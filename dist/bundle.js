/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={9842:function(e,t,n){var r;r=function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=21)}([function(e,t){var r={};e.exports=r,function(){r._nextId=0,r._seed=0,r._nowStartTime=+new Date,r._warnedOnce={},r._decomp=null,r.extend=function(e,t){var n,o;"boolean"==typeof t?(n=2,o=t):(n=1,o=!0);for(var i=n;i<arguments.length;i++){var s=arguments[i];if(s)for(var a in s)o&&s[a]&&s[a].constructor===Object?e[a]&&e[a].constructor!==Object?e[a]=s[a]:(e[a]=e[a]||{},r.extend(e[a],o,s[a])):e[a]=s[a]}return e},r.clone=function(e,t){return r.extend({},t,e)},r.keys=function(e){if(Object.keys)return Object.keys(e);var t=[];for(var n in e)t.push(n);return t},r.values=function(e){var t=[];if(Object.keys){for(var n=Object.keys(e),r=0;r<n.length;r++)t.push(e[n[r]]);return t}for(var o in e)t.push(e[o]);return t},r.get=function(e,t,n,r){t=t.split(".").slice(n,r);for(var o=0;o<t.length;o+=1)e=e[t[o]];return e},r.set=function(e,t,n,o,i){var s=t.split(".").slice(o,i);return r.get(e,t,0,-1)[s[s.length-1]]=n,n},r.shuffle=function(e){for(var t=e.length-1;t>0;t--){var n=Math.floor(r.random()*(t+1)),o=e[t];e[t]=e[n],e[n]=o}return e},r.choose=function(e){return e[Math.floor(r.random()*e.length)]},r.isElement=function(e){return"undefined"!=typeof HTMLElement?e instanceof HTMLElement:!!(e&&e.nodeType&&e.nodeName)},r.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)},r.isFunction=function(e){return"function"==typeof e},r.isPlainObject=function(e){return"object"==typeof e&&e.constructor===Object},r.isString=function(e){return"[object String]"===toString.call(e)},r.clamp=function(e,t,n){return e<t?t:e>n?n:e},r.sign=function(e){return e<0?-1:1},r.now=function(){if("undefined"!=typeof window&&window.performance){if(window.performance.now)return window.performance.now();if(window.performance.webkitNow)return window.performance.webkitNow()}return Date.now?Date.now():new Date-r._nowStartTime},r.random=function(t,n){return n=void 0!==n?n:1,(t=void 0!==t?t:0)+e()*(n-t)};var e=function(){return r._seed=(9301*r._seed+49297)%233280,r._seed/233280};r.colorToNumber=function(e){return 3==(e=e.replace("#","")).length&&(e=e.charAt(0)+e.charAt(0)+e.charAt(1)+e.charAt(1)+e.charAt(2)+e.charAt(2)),parseInt(e,16)},r.logLevel=1,r.log=function(){console&&r.logLevel>0&&r.logLevel<=3&&console.log.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},r.info=function(){console&&r.logLevel>0&&r.logLevel<=2&&console.info.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},r.warn=function(){console&&r.logLevel>0&&r.logLevel<=3&&console.warn.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},r.warnOnce=function(){var e=Array.prototype.slice.call(arguments).join(" ");r._warnedOnce[e]||(r.warn(e),r._warnedOnce[e]=!0)},r.deprecated=function(e,t,n){e[t]=r.chain((function(){r.warnOnce("🔅 deprecated 🔅",n)}),e[t])},r.nextId=function(){return r._nextId++},r.indexOf=function(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0;n<e.length;n++)if(e[n]===t)return n;return-1},r.map=function(e,t){if(e.map)return e.map(t);for(var n=[],r=0;r<e.length;r+=1)n.push(t(e[r]));return n},r.topologicalSort=function(e){var t=[],n=[],o=[];for(var i in e)n[i]||o[i]||r._topologicalSort(i,n,o,e,t);return t},r._topologicalSort=function(e,t,n,o,i){var s=o[e]||[];n[e]=!0;for(var a=0;a<s.length;a+=1){var c=s[a];n[c]||t[c]||r._topologicalSort(c,t,n,o,i)}n[e]=!1,t[e]=!0,i.push(e)},r.chain=function(){for(var e=[],t=0;t<arguments.length;t+=1){var n=arguments[t];n._chained?e.push.apply(e,n._chained):e.push(n)}var r=function(){for(var t,n=new Array(arguments.length),r=0,o=arguments.length;r<o;r++)n[r]=arguments[r];for(r=0;r<e.length;r+=1){var i=e[r].apply(t,n);void 0!==i&&(t=i)}return t};return r._chained=e,r},r.chainPathBefore=function(e,t,n){return r.set(e,t,r.chain(n,r.get(e,t)))},r.chainPathAfter=function(e,t,n){return r.set(e,t,r.chain(r.get(e,t),n))},r.setDecomp=function(e){r._decomp=e},r.getDecomp=function(){var e=r._decomp;try{e||"undefined"==typeof window||(e=window.decomp),e||void 0===n.g||(e=n.g.decomp)}catch(t){e=null}return e}}()},function(e,t){var n={};e.exports=n,n.create=function(e){var t={min:{x:0,y:0},max:{x:0,y:0}};return e&&n.update(t,e),t},n.update=function(e,t,n){e.min.x=1/0,e.max.x=-1/0,e.min.y=1/0,e.max.y=-1/0;for(var r=0;r<t.length;r++){var o=t[r];o.x>e.max.x&&(e.max.x=o.x),o.x<e.min.x&&(e.min.x=o.x),o.y>e.max.y&&(e.max.y=o.y),o.y<e.min.y&&(e.min.y=o.y)}n&&(n.x>0?e.max.x+=n.x:e.min.x+=n.x,n.y>0?e.max.y+=n.y:e.min.y+=n.y)},n.contains=function(e,t){return t.x>=e.min.x&&t.x<=e.max.x&&t.y>=e.min.y&&t.y<=e.max.y},n.overlaps=function(e,t){return e.min.x<=t.max.x&&e.max.x>=t.min.x&&e.max.y>=t.min.y&&e.min.y<=t.max.y},n.translate=function(e,t){e.min.x+=t.x,e.max.x+=t.x,e.min.y+=t.y,e.max.y+=t.y},n.shift=function(e,t){var n=e.max.x-e.min.x,r=e.max.y-e.min.y;e.min.x=t.x,e.max.x=t.x+n,e.min.y=t.y,e.max.y=t.y+r}},function(e,t){var n={};e.exports=n,n.create=function(e,t){return{x:e||0,y:t||0}},n.clone=function(e){return{x:e.x,y:e.y}},n.magnitude=function(e){return Math.sqrt(e.x*e.x+e.y*e.y)},n.magnitudeSquared=function(e){return e.x*e.x+e.y*e.y},n.rotate=function(e,t,n){var r=Math.cos(t),o=Math.sin(t);n||(n={});var i=e.x*r-e.y*o;return n.y=e.x*o+e.y*r,n.x=i,n},n.rotateAbout=function(e,t,n,r){var o=Math.cos(t),i=Math.sin(t);r||(r={});var s=n.x+((e.x-n.x)*o-(e.y-n.y)*i);return r.y=n.y+((e.x-n.x)*i+(e.y-n.y)*o),r.x=s,r},n.normalise=function(e){var t=n.magnitude(e);return 0===t?{x:0,y:0}:{x:e.x/t,y:e.y/t}},n.dot=function(e,t){return e.x*t.x+e.y*t.y},n.cross=function(e,t){return e.x*t.y-e.y*t.x},n.cross3=function(e,t,n){return(t.x-e.x)*(n.y-e.y)-(t.y-e.y)*(n.x-e.x)},n.add=function(e,t,n){return n||(n={}),n.x=e.x+t.x,n.y=e.y+t.y,n},n.sub=function(e,t,n){return n||(n={}),n.x=e.x-t.x,n.y=e.y-t.y,n},n.mult=function(e,t){return{x:e.x*t,y:e.y*t}},n.div=function(e,t){return{x:e.x/t,y:e.y/t}},n.perp=function(e,t){return{x:(t=!0===t?-1:1)*-e.y,y:t*e.x}},n.neg=function(e){return{x:-e.x,y:-e.y}},n.angle=function(e,t){return Math.atan2(t.y-e.y,t.x-e.x)},n._temp=[n.create(),n.create(),n.create(),n.create(),n.create(),n.create()]},function(e,t,n){var r={};e.exports=r;var o=n(2),i=n(0);r.create=function(e,t){for(var n=[],r=0;r<e.length;r++){var o=e[r],i={x:o.x,y:o.y,index:r,body:t,isInternal:!1};n.push(i)}return n},r.fromPath=function(e,t){var n=[];return e.replace(/L?\s*([-\d.e]+)[\s,]*([-\d.e]+)*/gi,(function(e,t,r){n.push({x:parseFloat(t),y:parseFloat(r)})})),r.create(n,t)},r.centre=function(e){for(var t,n,i,s=r.area(e,!0),a={x:0,y:0},c=0;c<e.length;c++)i=(c+1)%e.length,t=o.cross(e[c],e[i]),n=o.mult(o.add(e[c],e[i]),t),a=o.add(a,n);return o.div(a,6*s)},r.mean=function(e){for(var t={x:0,y:0},n=0;n<e.length;n++)t.x+=e[n].x,t.y+=e[n].y;return o.div(t,e.length)},r.area=function(e,t){for(var n=0,r=e.length-1,o=0;o<e.length;o++)n+=(e[r].x-e[o].x)*(e[r].y+e[o].y),r=o;return t?n/2:Math.abs(n)/2},r.inertia=function(e,t){for(var n,r,i=0,s=0,a=e,c=0;c<a.length;c++)r=(c+1)%a.length,i+=(n=Math.abs(o.cross(a[r],a[c])))*(o.dot(a[r],a[r])+o.dot(a[r],a[c])+o.dot(a[c],a[c])),s+=n;return t/6*(i/s)},r.translate=function(e,t,n){n=void 0!==n?n:1;var r,o=e.length,i=t.x*n,s=t.y*n;for(r=0;r<o;r++)e[r].x+=i,e[r].y+=s;return e},r.rotate=function(e,t,n){if(0!==t){var r,o,i,s,a=Math.cos(t),c=Math.sin(t),l=n.x,u=n.y,d=e.length;for(s=0;s<d;s++)o=(r=e[s]).x-l,i=r.y-u,r.x=l+(o*a-i*c),r.y=u+(o*c+i*a);return e}},r.contains=function(e,t){for(var n,r=t.x,o=t.y,i=e.length,s=e[i-1],a=0;a<i;a++){if(n=e[a],(r-s.x)*(n.y-s.y)+(o-s.y)*(s.x-n.x)>0)return!1;s=n}return!0},r.scale=function(e,t,n,i){if(1===t&&1===n)return e;var s,a;i=i||r.centre(e);for(var c=0;c<e.length;c++)s=e[c],a=o.sub(s,i),e[c].x=i.x+a.x*t,e[c].y=i.y+a.y*n;return e},r.chamfer=function(e,t,n,r,s){t="number"==typeof t?[t]:t||[8],n=void 0!==n?n:-1,r=r||2,s=s||14;for(var a=[],c=0;c<e.length;c++){var l=e[c-1>=0?c-1:e.length-1],u=e[c],d=e[(c+1)%e.length],p=t[c<t.length?c:t.length-1];if(0!==p){var f=o.normalise({x:u.y-l.y,y:l.x-u.x}),y=o.normalise({x:d.y-u.y,y:u.x-d.x}),v=Math.sqrt(2*Math.pow(p,2)),h=o.mult(i.clone(f),p),g=o.normalise(o.mult(o.add(f,y),.5)),m=o.sub(u,o.mult(g,v)),x=n;-1===n&&(x=1.75*Math.pow(p,.32)),(x=i.clamp(x,r,s))%2==1&&(x+=1);for(var b=Math.acos(o.dot(f,y))/x,_=0;_<x;_++)a.push(o.add(o.rotate(h,b*_),m))}else a.push(u)}return a},r.clockwiseSort=function(e){var t=r.mean(e);return e.sort((function(e,n){return o.angle(t,e)-o.angle(t,n)})),e},r.isConvex=function(e){var t,n,r,o,i=0,s=e.length;if(s<3)return null;for(t=0;t<s;t++)if(r=(t+2)%s,o=(e[n=(t+1)%s].x-e[t].x)*(e[r].y-e[n].y),(o-=(e[n].y-e[t].y)*(e[r].x-e[n].x))<0?i|=1:o>0&&(i|=2),3===i)return!1;return 0!==i||null},r.hull=function(e){var t,n,r=[],i=[];for((e=e.slice(0)).sort((function(e,t){var n=e.x-t.x;return 0!==n?n:e.y-t.y})),n=0;n<e.length;n+=1){for(t=e[n];i.length>=2&&o.cross3(i[i.length-2],i[i.length-1],t)<=0;)i.pop();i.push(t)}for(n=e.length-1;n>=0;n-=1){for(t=e[n];r.length>=2&&o.cross3(r[r.length-2],r[r.length-1],t)<=0;)r.pop();r.push(t)}return r.pop(),i.pop(),r.concat(i)}},function(e,t,n){var r={};e.exports=r;var o=n(0);r.on=function(e,t,n){for(var r,o=t.split(" "),i=0;i<o.length;i++)r=o[i],e.events=e.events||{},e.events[r]=e.events[r]||[],e.events[r].push(n);return n},r.off=function(e,t,n){if(t){"function"==typeof t&&(n=t,t=o.keys(e.events).join(" "));for(var r=t.split(" "),i=0;i<r.length;i++){var s=e.events[r[i]],a=[];if(n&&s)for(var c=0;c<s.length;c++)s[c]!==n&&a.push(s[c]);e.events[r[i]]=a}}else e.events={}},r.trigger=function(e,t,n){var r,i,s,a,c=e.events;if(c&&o.keys(c).length>0){n||(n={}),r=t.split(" ");for(var l=0;l<r.length;l++)if(s=c[i=r[l]]){(a=o.clone(n,!1)).name=i,a.source=e;for(var u=0;u<s.length;u++)s[u].apply(e,[a])}}}},function(e,t,n){var r={};e.exports=r;var o=n(4),i=n(0),s=n(1),a=n(6);r.create=function(e){return i.extend({id:i.nextId(),type:"composite",parent:null,isModified:!1,bodies:[],constraints:[],composites:[],label:"Composite",plugin:{},cache:{allBodies:null,allConstraints:null,allComposites:null}},e)},r.setModified=function(e,t,n,o){if(e.isModified=t,t&&e.cache&&(e.cache.allBodies=null,e.cache.allConstraints=null,e.cache.allComposites=null),n&&e.parent&&r.setModified(e.parent,t,n,o),o)for(var i=0;i<e.composites.length;i++){var s=e.composites[i];r.setModified(s,t,n,o)}},r.add=function(e,t){var n=[].concat(t);o.trigger(e,"beforeAdd",{object:t});for(var s=0;s<n.length;s++){var a=n[s];switch(a.type){case"body":if(a.parent!==a){i.warn("Composite.add: skipped adding a compound body part (you must add its parent instead)");break}r.addBody(e,a);break;case"constraint":r.addConstraint(e,a);break;case"composite":r.addComposite(e,a);break;case"mouseConstraint":r.addConstraint(e,a.constraint)}}return o.trigger(e,"afterAdd",{object:t}),e},r.remove=function(e,t,n){var i=[].concat(t);o.trigger(e,"beforeRemove",{object:t});for(var s=0;s<i.length;s++){var a=i[s];switch(a.type){case"body":r.removeBody(e,a,n);break;case"constraint":r.removeConstraint(e,a,n);break;case"composite":r.removeComposite(e,a,n);break;case"mouseConstraint":r.removeConstraint(e,a.constraint)}}return o.trigger(e,"afterRemove",{object:t}),e},r.addComposite=function(e,t){return e.composites.push(t),t.parent=e,r.setModified(e,!0,!0,!1),e},r.removeComposite=function(e,t,n){var o=i.indexOf(e.composites,t);if(-1!==o&&r.removeCompositeAt(e,o),n)for(var s=0;s<e.composites.length;s++)r.removeComposite(e.composites[s],t,!0);return e},r.removeCompositeAt=function(e,t){return e.composites.splice(t,1),r.setModified(e,!0,!0,!1),e},r.addBody=function(e,t){return e.bodies.push(t),r.setModified(e,!0,!0,!1),e},r.removeBody=function(e,t,n){var o=i.indexOf(e.bodies,t);if(-1!==o&&r.removeBodyAt(e,o),n)for(var s=0;s<e.composites.length;s++)r.removeBody(e.composites[s],t,!0);return e},r.removeBodyAt=function(e,t){return e.bodies.splice(t,1),r.setModified(e,!0,!0,!1),e},r.addConstraint=function(e,t){return e.constraints.push(t),r.setModified(e,!0,!0,!1),e},r.removeConstraint=function(e,t,n){var o=i.indexOf(e.constraints,t);if(-1!==o&&r.removeConstraintAt(e,o),n)for(var s=0;s<e.composites.length;s++)r.removeConstraint(e.composites[s],t,!0);return e},r.removeConstraintAt=function(e,t){return e.constraints.splice(t,1),r.setModified(e,!0,!0,!1),e},r.clear=function(e,t,n){if(n)for(var o=0;o<e.composites.length;o++)r.clear(e.composites[o],t,!0);return t?e.bodies=e.bodies.filter((function(e){return e.isStatic})):e.bodies.length=0,e.constraints.length=0,e.composites.length=0,r.setModified(e,!0,!0,!1),e},r.allBodies=function(e){if(e.cache&&e.cache.allBodies)return e.cache.allBodies;for(var t=[].concat(e.bodies),n=0;n<e.composites.length;n++)t=t.concat(r.allBodies(e.composites[n]));return e.cache&&(e.cache.allBodies=t),t},r.allConstraints=function(e){if(e.cache&&e.cache.allConstraints)return e.cache.allConstraints;for(var t=[].concat(e.constraints),n=0;n<e.composites.length;n++)t=t.concat(r.allConstraints(e.composites[n]));return e.cache&&(e.cache.allConstraints=t),t},r.allComposites=function(e){if(e.cache&&e.cache.allComposites)return e.cache.allComposites;for(var t=[].concat(e.composites),n=0;n<e.composites.length;n++)t=t.concat(r.allComposites(e.composites[n]));return e.cache&&(e.cache.allComposites=t),t},r.get=function(e,t,n){var o,i;switch(n){case"body":o=r.allBodies(e);break;case"constraint":o=r.allConstraints(e);break;case"composite":o=r.allComposites(e).concat(e)}return o?0===(i=o.filter((function(e){return e.id.toString()===t.toString()}))).length?null:i[0]:null},r.move=function(e,t,n){return r.remove(e,t),r.add(n,t),e},r.rebase=function(e){for(var t=r.allBodies(e).concat(r.allConstraints(e)).concat(r.allComposites(e)),n=0;n<t.length;n++)t[n].id=i.nextId();return e},r.translate=function(e,t,n){for(var o=n?r.allBodies(e):e.bodies,i=0;i<o.length;i++)a.translate(o[i],t);return e},r.rotate=function(e,t,n,o){for(var i=Math.cos(t),s=Math.sin(t),c=o?r.allBodies(e):e.bodies,l=0;l<c.length;l++){var u=c[l],d=u.position.x-n.x,p=u.position.y-n.y;a.setPosition(u,{x:n.x+(d*i-p*s),y:n.y+(d*s+p*i)}),a.rotate(u,t)}return e},r.scale=function(e,t,n,o,i){for(var s=i?r.allBodies(e):e.bodies,c=0;c<s.length;c++){var l=s[c],u=l.position.x-o.x,d=l.position.y-o.y;a.setPosition(l,{x:o.x+u*t,y:o.y+d*n}),a.scale(l,t,n)}return e},r.bounds=function(e){for(var t=r.allBodies(e),n=[],o=0;o<t.length;o+=1){var i=t[o];n.push(i.bounds.min,i.bounds.max)}return s.create(n)}},function(e,t,n){var r={};e.exports=r;var o=n(3),i=n(2),s=n(7),a=(n(16),n(0)),c=n(1),l=n(11);!function(){r._inertiaScale=4,r._nextCollidingGroupId=1,r._nextNonCollidingGroupId=-1,r._nextCategory=1,r.create=function(t){var n={id:a.nextId(),type:"body",label:"Body",parts:[],plugin:{},angle:0,vertices:o.fromPath("L 0 0 L 40 0 L 40 40 L 0 40"),position:{x:0,y:0},force:{x:0,y:0},torque:0,positionImpulse:{x:0,y:0},constraintImpulse:{x:0,y:0,angle:0},totalContacts:0,speed:0,angularSpeed:0,velocity:{x:0,y:0},angularVelocity:0,isSensor:!1,isStatic:!1,isSleeping:!1,motion:0,sleepThreshold:60,density:.001,restitution:0,friction:.1,frictionStatic:.5,frictionAir:.01,collisionFilter:{category:1,mask:4294967295,group:0},slop:.05,timeScale:1,render:{visible:!0,opacity:1,strokeStyle:null,fillStyle:null,lineWidth:null,sprite:{xScale:1,yScale:1,xOffset:0,yOffset:0}},events:null,bounds:null,chamfer:null,circleRadius:0,positionPrev:null,anglePrev:0,parent:null,axes:null,area:0,mass:0,inertia:0,_original:null},r=a.extend(n,t);return e(r,t),r},r.nextGroup=function(e){return e?r._nextNonCollidingGroupId--:r._nextCollidingGroupId++},r.nextCategory=function(){return r._nextCategory=r._nextCategory<<1,r._nextCategory};var e=function(e,t){t=t||{},r.set(e,{bounds:e.bounds||c.create(e.vertices),positionPrev:e.positionPrev||i.clone(e.position),anglePrev:e.anglePrev||e.angle,vertices:e.vertices,parts:e.parts||[e],isStatic:e.isStatic,isSleeping:e.isSleeping,parent:e.parent||e}),o.rotate(e.vertices,e.angle,e.position),l.rotate(e.axes,e.angle),c.update(e.bounds,e.vertices,e.velocity),r.set(e,{axes:t.axes||e.axes,area:t.area||e.area,mass:t.mass||e.mass,inertia:t.inertia||e.inertia});var n=e.isStatic?"#14151f":a.choose(["#f19648","#f5d259","#f55a3c","#063e7b","#ececd1"]),s=e.isStatic?"#555":"#ccc",u=e.isStatic&&null===e.render.fillStyle?1:0;e.render.fillStyle=e.render.fillStyle||n,e.render.strokeStyle=e.render.strokeStyle||s,e.render.lineWidth=e.render.lineWidth||u,e.render.sprite.xOffset+=-(e.bounds.min.x-e.position.x)/(e.bounds.max.x-e.bounds.min.x),e.render.sprite.yOffset+=-(e.bounds.min.y-e.position.y)/(e.bounds.max.y-e.bounds.min.y)};r.set=function(e,t,n){var o;for(o in"string"==typeof t&&(o=t,(t={})[o]=n),t)if(Object.prototype.hasOwnProperty.call(t,o))switch(n=t[o],o){case"isStatic":r.setStatic(e,n);break;case"isSleeping":s.set(e,n);break;case"mass":r.setMass(e,n);break;case"density":r.setDensity(e,n);break;case"inertia":r.setInertia(e,n);break;case"vertices":r.setVertices(e,n);break;case"position":r.setPosition(e,n);break;case"angle":r.setAngle(e,n);break;case"velocity":r.setVelocity(e,n);break;case"angularVelocity":r.setAngularVelocity(e,n);break;case"parts":r.setParts(e,n);break;case"centre":r.setCentre(e,n);break;default:e[o]=n}},r.setStatic=function(e,t){for(var n=0;n<e.parts.length;n++){var r=e.parts[n];r.isStatic=t,t?(r._original={restitution:r.restitution,friction:r.friction,mass:r.mass,inertia:r.inertia,density:r.density,inverseMass:r.inverseMass,inverseInertia:r.inverseInertia},r.restitution=0,r.friction=1,r.mass=r.inertia=r.density=1/0,r.inverseMass=r.inverseInertia=0,r.positionPrev.x=r.position.x,r.positionPrev.y=r.position.y,r.anglePrev=r.angle,r.angularVelocity=0,r.speed=0,r.angularSpeed=0,r.motion=0):r._original&&(r.restitution=r._original.restitution,r.friction=r._original.friction,r.mass=r._original.mass,r.inertia=r._original.inertia,r.density=r._original.density,r.inverseMass=r._original.inverseMass,r.inverseInertia=r._original.inverseInertia,r._original=null)}},r.setMass=function(e,t){var n=e.inertia/(e.mass/6);e.inertia=n*(t/6),e.inverseInertia=1/e.inertia,e.mass=t,e.inverseMass=1/e.mass,e.density=e.mass/e.area},r.setDensity=function(e,t){r.setMass(e,t*e.area),e.density=t},r.setInertia=function(e,t){e.inertia=t,e.inverseInertia=1/e.inertia},r.setVertices=function(e,t){t[0].body===e?e.vertices=t:e.vertices=o.create(t,e),e.axes=l.fromVertices(e.vertices),e.area=o.area(e.vertices),r.setMass(e,e.density*e.area);var n=o.centre(e.vertices);o.translate(e.vertices,n,-1),r.setInertia(e,r._inertiaScale*o.inertia(e.vertices,e.mass)),o.translate(e.vertices,e.position),c.update(e.bounds,e.vertices,e.velocity)},r.setParts=function(e,t,n){var i;for(t=t.slice(0),e.parts.length=0,e.parts.push(e),e.parent=e,i=0;i<t.length;i++){var s=t[i];s!==e&&(s.parent=e,e.parts.push(s))}if(1!==e.parts.length){if(n=void 0===n||n){var a=[];for(i=0;i<t.length;i++)a=a.concat(t[i].vertices);o.clockwiseSort(a);var c=o.hull(a),l=o.centre(c);r.setVertices(e,c),o.translate(e.vertices,l)}var u=r._totalProperties(e);e.area=u.area,e.parent=e,e.position.x=u.centre.x,e.position.y=u.centre.y,e.positionPrev.x=u.centre.x,e.positionPrev.y=u.centre.y,r.setMass(e,u.mass),r.setInertia(e,u.inertia),r.setPosition(e,u.centre)}},r.setCentre=function(e,t,n){n?(e.positionPrev.x+=t.x,e.positionPrev.y+=t.y,e.position.x+=t.x,e.position.y+=t.y):(e.positionPrev.x=t.x-(e.position.x-e.positionPrev.x),e.positionPrev.y=t.y-(e.position.y-e.positionPrev.y),e.position.x=t.x,e.position.y=t.y)},r.setPosition=function(e,t){var n=i.sub(t,e.position);e.positionPrev.x+=n.x,e.positionPrev.y+=n.y;for(var r=0;r<e.parts.length;r++){var s=e.parts[r];s.position.x+=n.x,s.position.y+=n.y,o.translate(s.vertices,n),c.update(s.bounds,s.vertices,e.velocity)}},r.setAngle=function(e,t){var n=t-e.angle;e.anglePrev+=n;for(var r=0;r<e.parts.length;r++){var s=e.parts[r];s.angle+=n,o.rotate(s.vertices,n,e.position),l.rotate(s.axes,n),c.update(s.bounds,s.vertices,e.velocity),r>0&&i.rotateAbout(s.position,n,e.position,s.position)}},r.setVelocity=function(e,t){e.positionPrev.x=e.position.x-t.x,e.positionPrev.y=e.position.y-t.y,e.velocity.x=t.x,e.velocity.y=t.y,e.speed=i.magnitude(e.velocity)},r.setAngularVelocity=function(e,t){e.anglePrev=e.angle-t,e.angularVelocity=t,e.angularSpeed=Math.abs(e.angularVelocity)},r.translate=function(e,t){r.setPosition(e,i.add(e.position,t))},r.rotate=function(e,t,n){if(n){var o=Math.cos(t),i=Math.sin(t),s=e.position.x-n.x,a=e.position.y-n.y;r.setPosition(e,{x:n.x+(s*o-a*i),y:n.y+(s*i+a*o)}),r.setAngle(e,e.angle+t)}else r.setAngle(e,e.angle+t)},r.scale=function(e,t,n,i){var s=0,a=0;i=i||e.position;for(var u=0;u<e.parts.length;u++){var d=e.parts[u];o.scale(d.vertices,t,n,i),d.axes=l.fromVertices(d.vertices),d.area=o.area(d.vertices),r.setMass(d,e.density*d.area),o.translate(d.vertices,{x:-d.position.x,y:-d.position.y}),r.setInertia(d,r._inertiaScale*o.inertia(d.vertices,d.mass)),o.translate(d.vertices,{x:d.position.x,y:d.position.y}),u>0&&(s+=d.area,a+=d.inertia),d.position.x=i.x+(d.position.x-i.x)*t,d.position.y=i.y+(d.position.y-i.y)*n,c.update(d.bounds,d.vertices,e.velocity)}e.parts.length>1&&(e.area=s,e.isStatic||(r.setMass(e,e.density*s),r.setInertia(e,a))),e.circleRadius&&(t===n?e.circleRadius*=t:e.circleRadius=null)},r.update=function(e,t,n,r){var s=Math.pow(t*n*e.timeScale,2),a=1-e.frictionAir*n*e.timeScale,u=e.position.x-e.positionPrev.x,d=e.position.y-e.positionPrev.y;e.velocity.x=u*a*r+e.force.x/e.mass*s,e.velocity.y=d*a*r+e.force.y/e.mass*s,e.positionPrev.x=e.position.x,e.positionPrev.y=e.position.y,e.position.x+=e.velocity.x,e.position.y+=e.velocity.y,e.angularVelocity=(e.angle-e.anglePrev)*a*r+e.torque/e.inertia*s,e.anglePrev=e.angle,e.angle+=e.angularVelocity,e.speed=i.magnitude(e.velocity),e.angularSpeed=Math.abs(e.angularVelocity);for(var p=0;p<e.parts.length;p++){var f=e.parts[p];o.translate(f.vertices,e.velocity),p>0&&(f.position.x+=e.velocity.x,f.position.y+=e.velocity.y),0!==e.angularVelocity&&(o.rotate(f.vertices,e.angularVelocity,e.position),l.rotate(f.axes,e.angularVelocity),p>0&&i.rotateAbout(f.position,e.angularVelocity,e.position,f.position)),c.update(f.bounds,f.vertices,e.velocity)}},r.applyForce=function(e,t,n){e.force.x+=n.x,e.force.y+=n.y;var r=t.x-e.position.x,o=t.y-e.position.y;e.torque+=r*n.y-o*n.x},r._totalProperties=function(e){for(var t={mass:0,area:0,inertia:0,centre:{x:0,y:0}},n=1===e.parts.length?0:1;n<e.parts.length;n++){var r=e.parts[n],o=r.mass!==1/0?r.mass:1;t.mass+=o,t.area+=r.area,t.inertia+=r.inertia,t.centre=i.add(t.centre,i.mult(r.position,o))}return t.centre=i.div(t.centre,t.mass),t}}()},function(e,t,n){var r={};e.exports=r;var o=n(4);r._motionWakeThreshold=.18,r._motionSleepThreshold=.08,r._minBias=.9,r.update=function(e,t){for(var n=t*t*t,o=0;o<e.length;o++){var i=e[o],s=i.speed*i.speed+i.angularSpeed*i.angularSpeed;if(0===i.force.x&&0===i.force.y){var a=Math.min(i.motion,s),c=Math.max(i.motion,s);i.motion=r._minBias*a+(1-r._minBias)*c,i.sleepThreshold>0&&i.motion<r._motionSleepThreshold*n?(i.sleepCounter+=1,i.sleepCounter>=i.sleepThreshold&&r.set(i,!0)):i.sleepCounter>0&&(i.sleepCounter-=1)}else r.set(i,!1)}},r.afterCollisions=function(e,t){for(var n=t*t*t,o=0;o<e.length;o++){var i=e[o];if(i.isActive){var s=i.collision,a=s.bodyA.parent,c=s.bodyB.parent;if(!(a.isSleeping&&c.isSleeping||a.isStatic||c.isStatic)&&(a.isSleeping||c.isSleeping)){var l=a.isSleeping&&!a.isStatic?a:c,u=l===a?c:a;!l.isStatic&&u.motion>r._motionWakeThreshold*n&&r.set(l,!1)}}}},r.set=function(e,t){var n=e.isSleeping;t?(e.isSleeping=!0,e.sleepCounter=e.sleepThreshold,e.positionImpulse.x=0,e.positionImpulse.y=0,e.positionPrev.x=e.position.x,e.positionPrev.y=e.position.y,e.anglePrev=e.angle,e.speed=0,e.angularSpeed=0,e.motion=0,n||o.trigger(e,"sleepStart")):(e.isSleeping=!1,e.sleepCounter=0,n&&o.trigger(e,"sleepEnd"))}},function(e,t,n){var r={};e.exports=r;var o,i,s,a=n(3),c=n(9);o=[],i={overlap:0,axis:null},s={overlap:0,axis:null},r.create=function(e,t){return{pair:null,collided:!1,bodyA:e,bodyB:t,parentA:e.parent,parentB:t.parent,depth:0,normal:{x:0,y:0},tangent:{x:0,y:0},penetration:{x:0,y:0},supports:[]}},r.collides=function(e,t,n){if(r._overlapAxes(i,e.vertices,t.vertices,e.axes),i.overlap<=0)return null;if(r._overlapAxes(s,t.vertices,e.vertices,t.axes),s.overlap<=0)return null;var o,l,u=n&&n.table[c.id(e,t)];u?o=u.collision:((o=r.create(e,t)).collided=!0,o.bodyA=e.id<t.id?e:t,o.bodyB=e.id<t.id?t:e,o.parentA=o.bodyA.parent,o.parentB=o.bodyB.parent),e=o.bodyA,t=o.bodyB,l=i.overlap<s.overlap?i:s;var d=o.normal,p=o.supports,f=l.axis,y=f.x,v=f.y;y*(t.position.x-e.position.x)+v*(t.position.y-e.position.y)<0?(d.x=y,d.y=v):(d.x=-y,d.y=-v),o.tangent.x=-d.y,o.tangent.y=d.x,o.depth=l.overlap,o.penetration.x=d.x*o.depth,o.penetration.y=d.y*o.depth;var h=r._findSupports(e,t,d,1),g=0;if(a.contains(e.vertices,h[0])&&(p[g++]=h[0]),a.contains(e.vertices,h[1])&&(p[g++]=h[1]),g<2){var m=r._findSupports(t,e,d,-1);a.contains(t.vertices,m[0])&&(p[g++]=m[0]),g<2&&a.contains(t.vertices,m[1])&&(p[g++]=m[1])}return 0===g&&(p[g++]=h[0]),p.length=g,o},r._overlapAxes=function(e,t,n,r){var o,i,s,a,c,l,u=t.length,d=n.length,p=t[0].x,f=t[0].y,y=n[0].x,v=n[0].y,h=r.length,g=Number.MAX_VALUE,m=0;for(c=0;c<h;c++){var x=r[c],b=x.x,_=x.y,w=p*b+f*_,S=y*b+v*_,P=w,C=S;for(l=1;l<u;l+=1)(a=t[l].x*b+t[l].y*_)>P?P=a:a<w&&(w=a);for(l=1;l<d;l+=1)(a=n[l].x*b+n[l].y*_)>C?C=a:a<S&&(S=a);if((o=(i=P-S)<(s=C-w)?i:s)<g&&(g=o,m=c,o<=0))break}e.axis=r[m],e.overlap=g},r._projectToAxis=function(e,t,n){for(var r=t[0].x*n.x+t[0].y*n.y,o=r,i=1;i<t.length;i+=1){var s=t[i].x*n.x+t[i].y*n.y;s>o?o=s:s<r&&(r=s)}e.min=r,e.max=o},r._findSupports=function(e,t,n,r){var i,s,a,c,l,u=t.vertices,d=u.length,p=e.position.x,f=e.position.y,y=n.x*r,v=n.y*r,h=Number.MAX_VALUE;for(l=0;l<d;l+=1)(c=y*(p-(s=u[l]).x)+v*(f-s.y))<h&&(h=c,i=s);return h=y*(p-(a=u[(d+i.index-1)%d]).x)+v*(f-a.y),y*(p-(s=u[(i.index+1)%d]).x)+v*(f-s.y)<h?(o[0]=i,o[1]=s,o):(o[0]=i,o[1]=a,o)}},function(e,t,n){var r={};e.exports=r;var o=n(17);r.create=function(e,t){var n=e.bodyA,o=e.bodyB,i={id:r.id(n,o),bodyA:n,bodyB:o,collision:e,contacts:[],activeContacts:[],separation:0,isActive:!0,confirmedActive:!0,isSensor:n.isSensor||o.isSensor,timeCreated:t,timeUpdated:t,inverseMass:0,friction:0,frictionStatic:0,restitution:0,slop:0};return r.update(i,e,t),i},r.update=function(e,t,n){var r=e.contacts,i=t.supports,s=e.activeContacts,a=t.parentA,c=t.parentB,l=a.vertices.length;e.isActive=!0,e.timeUpdated=n,e.collision=t,e.separation=t.depth,e.inverseMass=a.inverseMass+c.inverseMass,e.friction=a.friction<c.friction?a.friction:c.friction,e.frictionStatic=a.frictionStatic>c.frictionStatic?a.frictionStatic:c.frictionStatic,e.restitution=a.restitution>c.restitution?a.restitution:c.restitution,e.slop=a.slop>c.slop?a.slop:c.slop,t.pair=e,s.length=0;for(var u=0;u<i.length;u++){var d=i[u],p=d.body===a?d.index:l+d.index,f=r[p];f?s.push(f):s.push(r[p]=o.create(d))}},r.setActive=function(e,t,n){t?(e.isActive=!0,e.timeUpdated=n):(e.isActive=!1,e.activeContacts.length=0)},r.id=function(e,t){return e.id<t.id?"A"+e.id+"B"+t.id:"A"+t.id+"B"+e.id}},function(e,t,n){var r={};e.exports=r;var o=n(3),i=n(2),s=n(7),a=n(1),c=n(11),l=n(0);r._warming=.4,r._torqueDampen=1,r._minLength=1e-6,r.create=function(e){var t=e;t.bodyA&&!t.pointA&&(t.pointA={x:0,y:0}),t.bodyB&&!t.pointB&&(t.pointB={x:0,y:0});var n=t.bodyA?i.add(t.bodyA.position,t.pointA):t.pointA,r=t.bodyB?i.add(t.bodyB.position,t.pointB):t.pointB,o=i.magnitude(i.sub(n,r));t.length=void 0!==t.length?t.length:o,t.id=t.id||l.nextId(),t.label=t.label||"Constraint",t.type="constraint",t.stiffness=t.stiffness||(t.length>0?1:.7),t.damping=t.damping||0,t.angularStiffness=t.angularStiffness||0,t.angleA=t.bodyA?t.bodyA.angle:t.angleA,t.angleB=t.bodyB?t.bodyB.angle:t.angleB,t.plugin={};var s={visible:!0,lineWidth:2,strokeStyle:"#ffffff",type:"line",anchors:!0};return 0===t.length&&t.stiffness>.1?(s.type="pin",s.anchors=!1):t.stiffness<.9&&(s.type="spring"),t.render=l.extend(s,t.render),t},r.preSolveAll=function(e){for(var t=0;t<e.length;t+=1){var n=e[t],r=n.constraintImpulse;n.isStatic||0===r.x&&0===r.y&&0===r.angle||(n.position.x+=r.x,n.position.y+=r.y,n.angle+=r.angle)}},r.solveAll=function(e,t){for(var n=0;n<e.length;n+=1){var o=e[n],i=!o.bodyA||o.bodyA&&o.bodyA.isStatic,s=!o.bodyB||o.bodyB&&o.bodyB.isStatic;(i||s)&&r.solve(e[n],t)}for(n=0;n<e.length;n+=1)i=!(o=e[n]).bodyA||o.bodyA&&o.bodyA.isStatic,s=!o.bodyB||o.bodyB&&o.bodyB.isStatic,i||s||r.solve(e[n],t)},r.solve=function(e,t){var n=e.bodyA,o=e.bodyB,s=e.pointA,a=e.pointB;if(n||o){n&&!n.isStatic&&(i.rotate(s,n.angle-e.angleA,s),e.angleA=n.angle),o&&!o.isStatic&&(i.rotate(a,o.angle-e.angleB,a),e.angleB=o.angle);var c=s,l=a;if(n&&(c=i.add(n.position,s)),o&&(l=i.add(o.position,a)),c&&l){var u=i.sub(c,l),d=i.magnitude(u);d<r._minLength&&(d=r._minLength);var p,f,y,v,h,g=(d-e.length)/d,m=e.stiffness<1?e.stiffness*t:e.stiffness,x=i.mult(u,g*m),b=(n?n.inverseMass:0)+(o?o.inverseMass:0),_=b+((n?n.inverseInertia:0)+(o?o.inverseInertia:0));if(e.damping){var w=i.create();y=i.div(u,d),h=i.sub(o&&i.sub(o.position,o.positionPrev)||w,n&&i.sub(n.position,n.positionPrev)||w),v=i.dot(y,h)}n&&!n.isStatic&&(f=n.inverseMass/b,n.constraintImpulse.x-=x.x*f,n.constraintImpulse.y-=x.y*f,n.position.x-=x.x*f,n.position.y-=x.y*f,e.damping&&(n.positionPrev.x-=e.damping*y.x*v*f,n.positionPrev.y-=e.damping*y.y*v*f),p=i.cross(s,x)/_*r._torqueDampen*n.inverseInertia*(1-e.angularStiffness),n.constraintImpulse.angle-=p,n.angle-=p),o&&!o.isStatic&&(f=o.inverseMass/b,o.constraintImpulse.x+=x.x*f,o.constraintImpulse.y+=x.y*f,o.position.x+=x.x*f,o.position.y+=x.y*f,e.damping&&(o.positionPrev.x+=e.damping*y.x*v*f,o.positionPrev.y+=e.damping*y.y*v*f),p=i.cross(a,x)/_*r._torqueDampen*o.inverseInertia*(1-e.angularStiffness),o.constraintImpulse.angle+=p,o.angle+=p)}}},r.postSolveAll=function(e){for(var t=0;t<e.length;t++){var n=e[t],l=n.constraintImpulse;if(!(n.isStatic||0===l.x&&0===l.y&&0===l.angle)){s.set(n,!1);for(var u=0;u<n.parts.length;u++){var d=n.parts[u];o.translate(d.vertices,l),u>0&&(d.position.x+=l.x,d.position.y+=l.y),0!==l.angle&&(o.rotate(d.vertices,l.angle,n.position),c.rotate(d.axes,l.angle),u>0&&i.rotateAbout(d.position,l.angle,n.position,d.position)),a.update(d.bounds,d.vertices,n.velocity)}l.angle*=r._warming,l.x*=r._warming,l.y*=r._warming}}},r.pointAWorld=function(e){return{x:(e.bodyA?e.bodyA.position.x:0)+e.pointA.x,y:(e.bodyA?e.bodyA.position.y:0)+e.pointA.y}},r.pointBWorld=function(e){return{x:(e.bodyB?e.bodyB.position.x:0)+e.pointB.x,y:(e.bodyB?e.bodyB.position.y:0)+e.pointB.y}}},function(e,t,n){var r={};e.exports=r;var o=n(2),i=n(0);r.fromVertices=function(e){for(var t={},n=0;n<e.length;n++){var r=(n+1)%e.length,s=o.normalise({x:e[r].y-e[n].y,y:e[n].x-e[r].x}),a=0===s.y?1/0:s.x/s.y;t[a=a.toFixed(3).toString()]=s}return i.values(t)},r.rotate=function(e,t){if(0!==t)for(var n=Math.cos(t),r=Math.sin(t),o=0;o<e.length;o++){var i,s=e[o];i=s.x*n-s.y*r,s.y=s.x*r+s.y*n,s.x=i}}},function(e,t,n){var r={};e.exports=r;var o=n(3),i=n(0),s=n(6),a=n(1),c=n(2);r.rectangle=function(e,t,n,r,a){a=a||{};var c={label:"Rectangle Body",position:{x:e,y:t},vertices:o.fromPath("L 0 0 L "+n+" 0 L "+n+" "+r+" L 0 "+r)};if(a.chamfer){var l=a.chamfer;c.vertices=o.chamfer(c.vertices,l.radius,l.quality,l.qualityMin,l.qualityMax),delete a.chamfer}return s.create(i.extend({},c,a))},r.trapezoid=function(e,t,n,r,a,c){c=c||{};var l,u=n*(a*=.5),d=u+(1-2*a)*n,p=d+u;l=a<.5?"L 0 0 L "+u+" "+-r+" L "+d+" "+-r+" L "+p+" 0":"L 0 0 L "+d+" "+-r+" L "+p+" 0";var f={label:"Trapezoid Body",position:{x:e,y:t},vertices:o.fromPath(l)};if(c.chamfer){var y=c.chamfer;f.vertices=o.chamfer(f.vertices,y.radius,y.quality,y.qualityMin,y.qualityMax),delete c.chamfer}return s.create(i.extend({},f,c))},r.circle=function(e,t,n,o,s){o=o||{};var a={label:"Circle Body",circleRadius:n};s=s||25;var c=Math.ceil(Math.max(10,Math.min(s,n)));return c%2==1&&(c+=1),r.polygon(e,t,c,n,i.extend({},a,o))},r.polygon=function(e,t,n,a,c){if(c=c||{},n<3)return r.circle(e,t,a,c);for(var l=2*Math.PI/n,u="",d=.5*l,p=0;p<n;p+=1){var f=d+p*l,y=Math.cos(f)*a,v=Math.sin(f)*a;u+="L "+y.toFixed(3)+" "+v.toFixed(3)+" "}var h={label:"Polygon Body",position:{x:e,y:t},vertices:o.fromPath(u)};if(c.chamfer){var g=c.chamfer;h.vertices=o.chamfer(h.vertices,g.radius,g.quality,g.qualityMin,g.qualityMax),delete c.chamfer}return s.create(i.extend({},h,c))},r.fromVertices=function(e,t,n,r,l,u,d,p){var f,y,v,h,g,m,x,b,_,w,S=i.getDecomp();for(f=Boolean(S&&S.quickDecomp),r=r||{},v=[],l=void 0!==l&&l,u=void 0!==u?u:.01,d=void 0!==d?d:10,p=void 0!==p?p:.01,i.isArray(n[0])||(n=[n]),_=0;_<n.length;_+=1)if(g=n[_],!(h=o.isConvex(g))&&!f&&i.warnOnce("Bodies.fromVertices: Install the 'poly-decomp' library and use Common.setDecomp or provide 'decomp' as a global to decompose concave vertices."),h||!f)g=h?o.clockwiseSort(g):o.hull(g),v.push({position:{x:e,y:t},vertices:g});else{var P=g.map((function(e){return[e.x,e.y]}));S.makeCCW(P),!1!==u&&S.removeCollinearPoints(P,u),!1!==p&&S.removeDuplicatePoints&&S.removeDuplicatePoints(P,p);var C=S.quickDecomp(P);for(m=0;m<C.length;m++){var A=C[m].map((function(e){return{x:e[0],y:e[1]}}));d>0&&o.area(A)<d||v.push({position:o.centre(A),vertices:A})}}for(m=0;m<v.length;m++)v[m]=s.create(i.extend(v[m],r));if(l)for(m=0;m<v.length;m++){var M=v[m];for(x=m+1;x<v.length;x++){var B=v[x];if(a.overlaps(M.bounds,B.bounds)){var I=M.vertices,O=B.vertices;for(b=0;b<M.vertices.length;b++)for(w=0;w<B.vertices.length;w++){var k=c.magnitudeSquared(c.sub(I[(b+1)%I.length],O[w])),V=c.magnitudeSquared(c.sub(I[b],O[(w+1)%O.length]));k<5&&V<5&&(I[b].isInternal=!0,O[w].isInternal=!0)}}}}return v.length>1?(y=s.create(i.extend({parts:v.slice(0)},r)),s.setPosition(y,{x:e,y:t}),y):v[0]}},function(e,t,n){var r={};e.exports=r;var o=n(0);r.create=function(e){var t={};return e||o.log("Mouse.create: element was undefined, defaulting to document.body","warn"),t.element=e||document.body,t.absolute={x:0,y:0},t.position={x:0,y:0},t.mousedownPosition={x:0,y:0},t.mouseupPosition={x:0,y:0},t.offset={x:0,y:0},t.scale={x:1,y:1},t.wheelDelta=0,t.button=-1,t.pixelRatio=parseInt(t.element.getAttribute("data-pixel-ratio"),10)||1,t.sourceEvents={mousemove:null,mousedown:null,mouseup:null,mousewheel:null},t.mousemove=function(e){var n=r._getRelativeMousePosition(e,t.element,t.pixelRatio);e.changedTouches&&(t.button=0,e.preventDefault()),t.absolute.x=n.x,t.absolute.y=n.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y,t.sourceEvents.mousemove=e},t.mousedown=function(e){var n=r._getRelativeMousePosition(e,t.element,t.pixelRatio);e.changedTouches?(t.button=0,e.preventDefault()):t.button=e.button,t.absolute.x=n.x,t.absolute.y=n.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y,t.mousedownPosition.x=t.position.x,t.mousedownPosition.y=t.position.y,t.sourceEvents.mousedown=e},t.mouseup=function(e){var n=r._getRelativeMousePosition(e,t.element,t.pixelRatio);e.changedTouches&&e.preventDefault(),t.button=-1,t.absolute.x=n.x,t.absolute.y=n.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y,t.mouseupPosition.x=t.position.x,t.mouseupPosition.y=t.position.y,t.sourceEvents.mouseup=e},t.mousewheel=function(e){t.wheelDelta=Math.max(-1,Math.min(1,e.wheelDelta||-e.detail)),e.preventDefault()},r.setElement(t,t.element),t},r.setElement=function(e,t){e.element=t,t.addEventListener("mousemove",e.mousemove),t.addEventListener("mousedown",e.mousedown),t.addEventListener("mouseup",e.mouseup),t.addEventListener("mousewheel",e.mousewheel),t.addEventListener("DOMMouseScroll",e.mousewheel),t.addEventListener("touchmove",e.mousemove),t.addEventListener("touchstart",e.mousedown),t.addEventListener("touchend",e.mouseup)},r.clearSourceEvents=function(e){e.sourceEvents.mousemove=null,e.sourceEvents.mousedown=null,e.sourceEvents.mouseup=null,e.sourceEvents.mousewheel=null,e.wheelDelta=0},r.setOffset=function(e,t){e.offset.x=t.x,e.offset.y=t.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y},r.setScale=function(e,t){e.scale.x=t.x,e.scale.y=t.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y},r._getRelativeMousePosition=function(e,t,n){var r,o,i=t.getBoundingClientRect(),s=document.documentElement||document.body.parentNode||document.body,a=void 0!==window.pageXOffset?window.pageXOffset:s.scrollLeft,c=void 0!==window.pageYOffset?window.pageYOffset:s.scrollTop,l=e.changedTouches;return l?(r=l[0].pageX-i.left-a,o=l[0].pageY-i.top-c):(r=e.pageX-i.left-a,o=e.pageY-i.top-c),{x:r/(t.clientWidth/(t.width||t.clientWidth)*n),y:o/(t.clientHeight/(t.height||t.clientHeight)*n)}}},function(e,t,n){var r={};e.exports=r;var o=n(0),i=n(8);r.create=function(e){return o.extend({bodies:[],pairs:null},e)},r.setBodies=function(e,t){e.bodies=t.slice(0)},r.clear=function(e){e.bodies=[]},r.collisions=function(e){var t,n,o=[],s=e.pairs,a=e.bodies,c=a.length,l=r.canCollide,u=i.collides;for(a.sort(r._compareBoundsX),t=0;t<c;t++){var d=a[t],p=d.bounds,f=d.bounds.max.x,y=d.bounds.max.y,v=d.bounds.min.y,h=d.isStatic||d.isSleeping,g=d.parts.length,m=1===g;for(n=t+1;n<c;n++){var x=a[n];if((M=x.bounds).min.x>f)break;if(!(y<M.min.y||v>M.max.y)&&(!h||!x.isStatic&&!x.isSleeping)&&l(d.collisionFilter,x.collisionFilter)){var b=x.parts.length;if(m&&1===b)(C=u(d,x,s))&&o.push(C);else for(var _=b>1?1:0,w=g>1?1:0;w<g;w++)for(var S=d.parts[w],P=(p=S.bounds,_);P<b;P++){var C,A=x.parts[P],M=A.bounds;p.min.x>M.max.x||p.max.x<M.min.x||p.max.y<M.min.y||p.min.y>M.max.y||(C=u(S,A,s))&&o.push(C)}}}}return o},r.canCollide=function(e,t){return e.group===t.group&&0!==e.group?e.group>0:0!=(e.mask&t.category)&&0!=(t.mask&e.category)},r._compareBoundsX=function(e,t){return e.bounds.min.x-t.bounds.min.x}},function(e,t,n){var r={};e.exports=r;var o=n(0);r._registry={},r.register=function(e){if(r.isPlugin(e)||o.warn("Plugin.register:",r.toString(e),"does not implement all required fields."),e.name in r._registry){var t=r._registry[e.name],n=r.versionParse(e.version).number,i=r.versionParse(t.version).number;n>i?(o.warn("Plugin.register:",r.toString(t),"was upgraded to",r.toString(e)),r._registry[e.name]=e):n<i?o.warn("Plugin.register:",r.toString(t),"can not be downgraded to",r.toString(e)):e!==t&&o.warn("Plugin.register:",r.toString(e),"is already registered to different plugin object")}else r._registry[e.name]=e;return e},r.resolve=function(e){return r._registry[r.dependencyParse(e).name]},r.toString=function(e){return"string"==typeof e?e:(e.name||"anonymous")+"@"+(e.version||e.range||"0.0.0")},r.isPlugin=function(e){return e&&e.name&&e.version&&e.install},r.isUsed=function(e,t){return e.used.indexOf(t)>-1},r.isFor=function(e,t){var n=e.for&&r.dependencyParse(e.for);return!e.for||t.name===n.name&&r.versionSatisfies(t.version,n.range)},r.use=function(e,t){if(e.uses=(e.uses||[]).concat(t||[]),0!==e.uses.length){for(var n=r.dependencies(e),i=o.topologicalSort(n),s=[],a=0;a<i.length;a+=1)if(i[a]!==e.name){var c=r.resolve(i[a]);c?r.isUsed(e,c.name)||(r.isFor(c,e)||(o.warn("Plugin.use:",r.toString(c),"is for",c.for,"but installed on",r.toString(e)+"."),c._warned=!0),c.install?c.install(e):(o.warn("Plugin.use:",r.toString(c),"does not specify an install function."),c._warned=!0),c._warned?(s.push("🔶 "+r.toString(c)),delete c._warned):s.push("✅ "+r.toString(c)),e.used.push(c.name)):s.push("❌ "+i[a])}s.length>0&&o.info(s.join("  "))}else o.warn("Plugin.use:",r.toString(e),"does not specify any dependencies to install.")},r.dependencies=function(e,t){var n=r.dependencyParse(e),i=n.name;if(!(i in(t=t||{}))){e=r.resolve(e)||e,t[i]=o.map(e.uses||[],(function(t){r.isPlugin(t)&&r.register(t);var i=r.dependencyParse(t),s=r.resolve(t);return s&&!r.versionSatisfies(s.version,i.range)?(o.warn("Plugin.dependencies:",r.toString(s),"does not satisfy",r.toString(i),"used by",r.toString(n)+"."),s._warned=!0,e._warned=!0):s||(o.warn("Plugin.dependencies:",r.toString(t),"used by",r.toString(n),"could not be resolved."),e._warned=!0),i.name}));for(var s=0;s<t[i].length;s+=1)r.dependencies(t[i][s],t);return t}},r.dependencyParse=function(e){return o.isString(e)?(/^[\w-]+(@(\*|[\^~]?\d+\.\d+\.\d+(-[0-9A-Za-z-+]+)?))?$/.test(e)||o.warn("Plugin.dependencyParse:",e,"is not a valid dependency string."),{name:e.split("@")[0],range:e.split("@")[1]||"*"}):{name:e.name,range:e.range||e.version}},r.versionParse=function(e){var t=/^(\*)|(\^|~|>=|>)?\s*((\d+)\.(\d+)\.(\d+))(-[0-9A-Za-z-+]+)?$/;t.test(e)||o.warn("Plugin.versionParse:",e,"is not a valid version or range.");var n=t.exec(e),r=Number(n[4]),i=Number(n[5]),s=Number(n[6]);return{isRange:Boolean(n[1]||n[2]),version:n[3],range:e,operator:n[1]||n[2]||"",major:r,minor:i,patch:s,parts:[r,i,s],prerelease:n[7],number:1e8*r+1e4*i+s}},r.versionSatisfies=function(e,t){t=t||"*";var n=r.versionParse(t),o=r.versionParse(e);if(n.isRange){if("*"===n.operator||"*"===e)return!0;if(">"===n.operator)return o.number>n.number;if(">="===n.operator)return o.number>=n.number;if("~"===n.operator)return o.major===n.major&&o.minor===n.minor&&o.patch>=n.patch;if("^"===n.operator)return n.major>0?o.major===n.major&&o.number>=n.number:n.minor>0?o.minor===n.minor&&o.patch>=n.patch:o.patch===n.patch}return e===t||"*"===e}},function(e,t,n){var r={};e.exports=r;var o=n(0),i=n(5),s=n(1),a=n(4),c=n(2),l=n(13);!function(){var e,t;"undefined"!=typeof window&&(e=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(e){window.setTimeout((function(){e(o.now())}),1e3/60)},t=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),r._goodFps=30,r._goodDelta=1e3/60,r.create=function(e){var t={controller:r,engine:null,element:null,canvas:null,mouse:null,frameRequestId:null,timing:{historySize:60,delta:0,deltaHistory:[],lastTime:0,lastTimestamp:0,lastElapsed:0,timestampElapsed:0,timestampElapsedHistory:[],engineDeltaHistory:[],engineElapsedHistory:[],elapsedHistory:[]},options:{width:800,height:600,pixelRatio:1,background:"#14151f",wireframeBackground:"#14151f",hasBounds:!!e.bounds,enabled:!0,wireframes:!0,showSleeping:!0,showDebug:!1,showStats:!1,showPerformance:!1,showBounds:!1,showVelocity:!1,showCollisions:!1,showSeparations:!1,showAxes:!1,showPositions:!1,showAngleIndicator:!1,showIds:!1,showVertexNumbers:!1,showConvexHulls:!1,showInternalEdges:!1,showMousePosition:!1}},n=o.extend(t,e);return n.canvas&&(n.canvas.width=n.options.width||n.canvas.width,n.canvas.height=n.options.height||n.canvas.height),n.mouse=e.mouse,n.engine=e.engine,n.canvas=n.canvas||d(n.options.width,n.options.height),n.context=n.canvas.getContext("2d"),n.textures={},n.bounds=n.bounds||{min:{x:0,y:0},max:{x:n.canvas.width,y:n.canvas.height}},n.options.showBroadphase=!1,1!==n.options.pixelRatio&&r.setPixelRatio(n,n.options.pixelRatio),o.isElement(n.element)?n.element.appendChild(n.canvas):n.canvas.parentNode||o.log("Render.create: options.element was undefined, render.canvas was created but not appended","warn"),n},r.run=function(t){!function o(i){t.frameRequestId=e(o),n(t,i),r.world(t,i),(t.options.showStats||t.options.showDebug)&&r.stats(t,t.context,i),(t.options.showPerformance||t.options.showDebug)&&r.performance(t,t.context,i)}()},r.stop=function(e){t(e.frameRequestId)},r.setPixelRatio=function(e,t){var n=e.options,r=e.canvas;"auto"===t&&(t=p(r)),n.pixelRatio=t,r.setAttribute("data-pixel-ratio",t),r.width=n.width*t,r.height=n.height*t,r.style.width=n.width+"px",r.style.height=n.height+"px"},r.lookAt=function(e,t,n,r){r=void 0===r||r,t=o.isArray(t)?t:[t],n=n||{x:0,y:0};for(var i={min:{x:1/0,y:1/0},max:{x:-1/0,y:-1/0}},s=0;s<t.length;s+=1){var a=t[s],c=a.bounds?a.bounds.min:a.min||a.position||a,u=a.bounds?a.bounds.max:a.max||a.position||a;c&&u&&(c.x<i.min.x&&(i.min.x=c.x),u.x>i.max.x&&(i.max.x=u.x),c.y<i.min.y&&(i.min.y=c.y),u.y>i.max.y&&(i.max.y=u.y))}var d=i.max.x-i.min.x+2*n.x,p=i.max.y-i.min.y+2*n.y,f=e.canvas.height,y=e.canvas.width/f,v=d/p,h=1,g=1;v>y?g=v/y:h=y/v,e.options.hasBounds=!0,e.bounds.min.x=i.min.x,e.bounds.max.x=i.min.x+d*h,e.bounds.min.y=i.min.y,e.bounds.max.y=i.min.y+p*g,r&&(e.bounds.min.x+=.5*d-d*h*.5,e.bounds.max.x+=.5*d-d*h*.5,e.bounds.min.y+=.5*p-p*g*.5,e.bounds.max.y+=.5*p-p*g*.5),e.bounds.min.x-=n.x,e.bounds.max.x-=n.x,e.bounds.min.y-=n.y,e.bounds.max.y-=n.y,e.mouse&&(l.setScale(e.mouse,{x:(e.bounds.max.x-e.bounds.min.x)/e.canvas.width,y:(e.bounds.max.y-e.bounds.min.y)/e.canvas.height}),l.setOffset(e.mouse,e.bounds.min))},r.startViewTransform=function(e){var t=e.bounds.max.x-e.bounds.min.x,n=e.bounds.max.y-e.bounds.min.y,r=t/e.options.width,o=n/e.options.height;e.context.setTransform(e.options.pixelRatio/r,0,0,e.options.pixelRatio/o,0,0),e.context.translate(-e.bounds.min.x,-e.bounds.min.y)},r.endViewTransform=function(e){e.context.setTransform(e.options.pixelRatio,0,0,e.options.pixelRatio,0,0)},r.world=function(e,t){var n,u=o.now(),d=e.engine,p=d.world,f=e.canvas,v=e.context,h=e.options,g=e.timing,m=i.allBodies(p),x=i.allConstraints(p),b=h.wireframes?h.wireframeBackground:h.background,_=[],w=[],S={timestamp:d.timing.timestamp};if(a.trigger(e,"beforeRender",S),e.currentBackground!==b&&y(e,b),v.globalCompositeOperation="source-in",v.fillStyle="transparent",v.fillRect(0,0,f.width,f.height),v.globalCompositeOperation="source-over",h.hasBounds){for(n=0;n<m.length;n++){var P=m[n];s.overlaps(P.bounds,e.bounds)&&_.push(P)}for(n=0;n<x.length;n++){var C=x[n],A=C.bodyA,M=C.bodyB,B=C.pointA,I=C.pointB;A&&(B=c.add(A.position,C.pointA)),M&&(I=c.add(M.position,C.pointB)),B&&I&&(s.contains(e.bounds,B)||s.contains(e.bounds,I))&&w.push(C)}r.startViewTransform(e),e.mouse&&(l.setScale(e.mouse,{x:(e.bounds.max.x-e.bounds.min.x)/e.options.width,y:(e.bounds.max.y-e.bounds.min.y)/e.options.height}),l.setOffset(e.mouse,e.bounds.min))}else w=x,_=m,1!==e.options.pixelRatio&&e.context.setTransform(e.options.pixelRatio,0,0,e.options.pixelRatio,0,0);!h.wireframes||d.enableSleeping&&h.showSleeping?r.bodies(e,_,v):(h.showConvexHulls&&r.bodyConvexHulls(e,_,v),r.bodyWireframes(e,_,v)),h.showBounds&&r.bodyBounds(e,_,v),(h.showAxes||h.showAngleIndicator)&&r.bodyAxes(e,_,v),h.showPositions&&r.bodyPositions(e,_,v),h.showVelocity&&r.bodyVelocity(e,_,v),h.showIds&&r.bodyIds(e,_,v),h.showSeparations&&r.separations(e,d.pairs.list,v),h.showCollisions&&r.collisions(e,d.pairs.list,v),h.showVertexNumbers&&r.vertexNumbers(e,_,v),h.showMousePosition&&r.mousePosition(e,e.mouse,v),r.constraints(w,v),h.hasBounds&&r.endViewTransform(e),a.trigger(e,"afterRender",S),g.lastElapsed=o.now()-u},r.stats=function(e,t,n){for(var r=e.engine,o=r.world,s=i.allBodies(o),a=0,c=0,l=0;l<s.length;l+=1)a+=s[l].parts.length;var u={Part:a,Body:s.length,Cons:i.allConstraints(o).length,Comp:i.allComposites(o).length,Pair:r.pairs.list.length};for(var d in t.fillStyle="#0e0f19",t.fillRect(c,0,302.5,44),t.font="12px Arial",t.textBaseline="top",t.textAlign="right",u){var p=u[d];t.fillStyle="#aaa",t.fillText(d,c+55,8),t.fillStyle="#eee",t.fillText(p,c+55,26),c+=55}},r.performance=function(e,t){var n=e.engine,o=e.timing,i=o.deltaHistory,s=o.elapsedHistory,a=o.timestampElapsedHistory,c=o.engineDeltaHistory,l=o.engineElapsedHistory,d=n.timing.lastDelta,p=u(i),f=u(s),y=u(c),v=u(l),h=u(a)/p||0,g=1e3/p||0;t.fillStyle="#0e0f19",t.fillRect(0,50,370,34),r.status(t,10,69,60,4,i.length,Math.round(g)+" fps",g/r._goodFps,(function(e){return i[e]/p-1})),r.status(t,82,69,60,4,c.length,d.toFixed(2)+" dt",r._goodDelta/d,(function(e){return c[e]/y-1})),r.status(t,154,69,60,4,l.length,v.toFixed(2)+" ut",1-v/r._goodFps,(function(e){return l[e]/v-1})),r.status(t,226,69,60,4,s.length,f.toFixed(2)+" rt",1-f/r._goodFps,(function(e){return s[e]/f-1})),r.status(t,298,69,60,4,a.length,h.toFixed(2)+" x",h*h*h,(function(e){return(a[e]/i[e]/h||0)-1}))},r.status=function(e,t,n,r,i,s,a,c,l){e.strokeStyle="#888",e.fillStyle="#444",e.lineWidth=1,e.fillRect(t,n+7,r,1),e.beginPath(),e.moveTo(t,n+7-i*o.clamp(.4*l(0),-2,2));for(var u=0;u<r;u+=1)e.lineTo(t+u,n+7-(u<s?i*o.clamp(.4*l(u),-2,2):0));e.stroke(),e.fillStyle="hsl("+o.clamp(25+95*c,0,120)+",100%,60%)",e.fillRect(t,n-7,4,4),e.font="12px Arial",e.textBaseline="middle",e.textAlign="right",e.fillStyle="#eee",e.fillText(a,t+r,n-5)},r.constraints=function(e,t){for(var n=t,r=0;r<e.length;r++){var i=e[r];if(i.render.visible&&i.pointA&&i.pointB){var s,a,l=i.bodyA,u=i.bodyB;if(s=l?c.add(l.position,i.pointA):i.pointA,"pin"===i.render.type)n.beginPath(),n.arc(s.x,s.y,3,0,2*Math.PI),n.closePath();else{if(a=u?c.add(u.position,i.pointB):i.pointB,n.beginPath(),n.moveTo(s.x,s.y),"spring"===i.render.type)for(var d,p=c.sub(a,s),f=c.perp(c.normalise(p)),y=Math.ceil(o.clamp(i.length/5,12,20)),v=1;v<y;v+=1)d=v%2==0?1:-1,n.lineTo(s.x+p.x*(v/y)+f.x*d*4,s.y+p.y*(v/y)+f.y*d*4);n.lineTo(a.x,a.y)}i.render.lineWidth&&(n.lineWidth=i.render.lineWidth,n.strokeStyle=i.render.strokeStyle,n.stroke()),i.render.anchors&&(n.fillStyle=i.render.strokeStyle,n.beginPath(),n.arc(s.x,s.y,3,0,2*Math.PI),n.arc(a.x,a.y,3,0,2*Math.PI),n.closePath(),n.fill())}}},r.bodies=function(e,t,n){var r,o,i,s,a=n,c=(e.engine,e.options),l=c.showInternalEdges||!c.wireframes;for(i=0;i<t.length;i++)if((r=t[i]).render.visible)for(s=r.parts.length>1?1:0;s<r.parts.length;s++)if((o=r.parts[s]).render.visible){if(c.showSleeping&&r.isSleeping?a.globalAlpha=.5*o.render.opacity:1!==o.render.opacity&&(a.globalAlpha=o.render.opacity),o.render.sprite&&o.render.sprite.texture&&!c.wireframes){var u=o.render.sprite,d=f(e,u.texture);a.translate(o.position.x,o.position.y),a.rotate(o.angle),a.drawImage(d,d.width*-u.xOffset*u.xScale,d.height*-u.yOffset*u.yScale,d.width*u.xScale,d.height*u.yScale),a.rotate(-o.angle),a.translate(-o.position.x,-o.position.y)}else{if(o.circleRadius)a.beginPath(),a.arc(o.position.x,o.position.y,o.circleRadius,0,2*Math.PI);else{a.beginPath(),a.moveTo(o.vertices[0].x,o.vertices[0].y);for(var p=1;p<o.vertices.length;p++)!o.vertices[p-1].isInternal||l?a.lineTo(o.vertices[p].x,o.vertices[p].y):a.moveTo(o.vertices[p].x,o.vertices[p].y),o.vertices[p].isInternal&&!l&&a.moveTo(o.vertices[(p+1)%o.vertices.length].x,o.vertices[(p+1)%o.vertices.length].y);a.lineTo(o.vertices[0].x,o.vertices[0].y),a.closePath()}c.wireframes?(a.lineWidth=1,a.strokeStyle="#bbb",a.stroke()):(a.fillStyle=o.render.fillStyle,o.render.lineWidth&&(a.lineWidth=o.render.lineWidth,a.strokeStyle=o.render.strokeStyle,a.stroke()),a.fill())}a.globalAlpha=1}},r.bodyWireframes=function(e,t,n){var r,o,i,s,a,c=n,l=e.options.showInternalEdges;for(c.beginPath(),i=0;i<t.length;i++)if((r=t[i]).render.visible)for(a=r.parts.length>1?1:0;a<r.parts.length;a++){for(o=r.parts[a],c.moveTo(o.vertices[0].x,o.vertices[0].y),s=1;s<o.vertices.length;s++)!o.vertices[s-1].isInternal||l?c.lineTo(o.vertices[s].x,o.vertices[s].y):c.moveTo(o.vertices[s].x,o.vertices[s].y),o.vertices[s].isInternal&&!l&&c.moveTo(o.vertices[(s+1)%o.vertices.length].x,o.vertices[(s+1)%o.vertices.length].y);c.lineTo(o.vertices[0].x,o.vertices[0].y)}c.lineWidth=1,c.strokeStyle="#bbb",c.stroke()},r.bodyConvexHulls=function(e,t,n){var r,o,i,s=n;for(s.beginPath(),o=0;o<t.length;o++)if((r=t[o]).render.visible&&1!==r.parts.length){for(s.moveTo(r.vertices[0].x,r.vertices[0].y),i=1;i<r.vertices.length;i++)s.lineTo(r.vertices[i].x,r.vertices[i].y);s.lineTo(r.vertices[0].x,r.vertices[0].y)}s.lineWidth=1,s.strokeStyle="rgba(255,255,255,0.2)",s.stroke()},r.vertexNumbers=function(e,t,n){var r,o,i,s=n;for(r=0;r<t.length;r++){var a=t[r].parts;for(i=a.length>1?1:0;i<a.length;i++){var c=a[i];for(o=0;o<c.vertices.length;o++)s.fillStyle="rgba(255,255,255,0.2)",s.fillText(r+"_"+o,c.position.x+.8*(c.vertices[o].x-c.position.x),c.position.y+.8*(c.vertices[o].y-c.position.y))}}},r.mousePosition=function(e,t,n){var r=n;r.fillStyle="rgba(255,255,255,0.8)",r.fillText(t.position.x+"  "+t.position.y,t.position.x+5,t.position.y-5)},r.bodyBounds=function(e,t,n){var r=n,o=(e.engine,e.options);r.beginPath();for(var i=0;i<t.length;i++)if(t[i].render.visible)for(var s=t[i].parts,a=s.length>1?1:0;a<s.length;a++){var c=s[a];r.rect(c.bounds.min.x,c.bounds.min.y,c.bounds.max.x-c.bounds.min.x,c.bounds.max.y-c.bounds.min.y)}o.wireframes?r.strokeStyle="rgba(255,255,255,0.08)":r.strokeStyle="rgba(0,0,0,0.1)",r.lineWidth=1,r.stroke()},r.bodyAxes=function(e,t,n){var r,o,i,s,a=n,c=(e.engine,e.options);for(a.beginPath(),o=0;o<t.length;o++){var l=t[o],u=l.parts;if(l.render.visible)if(c.showAxes)for(i=u.length>1?1:0;i<u.length;i++)for(r=u[i],s=0;s<r.axes.length;s++){var d=r.axes[s];a.moveTo(r.position.x,r.position.y),a.lineTo(r.position.x+20*d.x,r.position.y+20*d.y)}else for(i=u.length>1?1:0;i<u.length;i++)for(r=u[i],s=0;s<r.axes.length;s++)a.moveTo(r.position.x,r.position.y),a.lineTo((r.vertices[0].x+r.vertices[r.vertices.length-1].x)/2,(r.vertices[0].y+r.vertices[r.vertices.length-1].y)/2)}c.wireframes?(a.strokeStyle="indianred",a.lineWidth=1):(a.strokeStyle="rgba(255, 255, 255, 0.4)",a.globalCompositeOperation="overlay",a.lineWidth=2),a.stroke(),a.globalCompositeOperation="source-over"},r.bodyPositions=function(e,t,n){var r,o,i,s,a=n,c=(e.engine,e.options);for(a.beginPath(),i=0;i<t.length;i++)if((r=t[i]).render.visible)for(s=0;s<r.parts.length;s++)o=r.parts[s],a.arc(o.position.x,o.position.y,3,0,2*Math.PI,!1),a.closePath();for(c.wireframes?a.fillStyle="indianred":a.fillStyle="rgba(0,0,0,0.5)",a.fill(),a.beginPath(),i=0;i<t.length;i++)(r=t[i]).render.visible&&(a.arc(r.positionPrev.x,r.positionPrev.y,2,0,2*Math.PI,!1),a.closePath());a.fillStyle="rgba(255,165,0,0.8)",a.fill()},r.bodyVelocity=function(e,t,n){var r=n;r.beginPath();for(var o=0;o<t.length;o++){var i=t[o];i.render.visible&&(r.moveTo(i.position.x,i.position.y),r.lineTo(i.position.x+2*(i.position.x-i.positionPrev.x),i.position.y+2*(i.position.y-i.positionPrev.y)))}r.lineWidth=3,r.strokeStyle="cornflowerblue",r.stroke()},r.bodyIds=function(e,t,n){var r,o,i=n;for(r=0;r<t.length;r++)if(t[r].render.visible){var s=t[r].parts;for(o=s.length>1?1:0;o<s.length;o++){var a=s[o];i.font="12px Arial",i.fillStyle="rgba(255,255,255,0.5)",i.fillText(a.id,a.position.x+10,a.position.y-10)}}},r.collisions=function(e,t,n){var r,o,i,s,a=n,c=e.options;for(a.beginPath(),i=0;i<t.length;i++)if((r=t[i]).isActive)for(o=r.collision,s=0;s<r.activeContacts.length;s++){var l=r.activeContacts[s].vertex;a.rect(l.x-1.5,l.y-1.5,3.5,3.5)}for(c.wireframes?a.fillStyle="rgba(255,255,255,0.7)":a.fillStyle="orange",a.fill(),a.beginPath(),i=0;i<t.length;i++)if((r=t[i]).isActive&&(o=r.collision,r.activeContacts.length>0)){var u=r.activeContacts[0].vertex.x,d=r.activeContacts[0].vertex.y;2===r.activeContacts.length&&(u=(r.activeContacts[0].vertex.x+r.activeContacts[1].vertex.x)/2,d=(r.activeContacts[0].vertex.y+r.activeContacts[1].vertex.y)/2),o.bodyB===o.supports[0].body||!0===o.bodyA.isStatic?a.moveTo(u-8*o.normal.x,d-8*o.normal.y):a.moveTo(u+8*o.normal.x,d+8*o.normal.y),a.lineTo(u,d)}c.wireframes?a.strokeStyle="rgba(255,165,0,0.7)":a.strokeStyle="orange",a.lineWidth=1,a.stroke()},r.separations=function(e,t,n){var r,o,i,s,a,c=n,l=e.options;for(c.beginPath(),a=0;a<t.length;a++)if((r=t[a]).isActive){i=(o=r.collision).bodyA;var u=1;(s=o.bodyB).isStatic||i.isStatic||(u=.5),s.isStatic&&(u=0),c.moveTo(s.position.x,s.position.y),c.lineTo(s.position.x-o.penetration.x*u,s.position.y-o.penetration.y*u),u=1,s.isStatic||i.isStatic||(u=.5),i.isStatic&&(u=0),c.moveTo(i.position.x,i.position.y),c.lineTo(i.position.x+o.penetration.x*u,i.position.y+o.penetration.y*u)}l.wireframes?c.strokeStyle="rgba(255,165,0,0.5)":c.strokeStyle="orange",c.stroke()},r.inspector=function(e,t){e.engine;var n,r=e.selected,o=e.render,i=o.options;if(i.hasBounds){var s=o.bounds.max.x-o.bounds.min.x,a=o.bounds.max.y-o.bounds.min.y,c=s/o.options.width,l=a/o.options.height;t.scale(1/c,1/l),t.translate(-o.bounds.min.x,-o.bounds.min.y)}for(var u=0;u<r.length;u++){var d=r[u].data;switch(t.translate(.5,.5),t.lineWidth=1,t.strokeStyle="rgba(255,165,0,0.9)",t.setLineDash([1,2]),d.type){case"body":n=d.bounds,t.beginPath(),t.rect(Math.floor(n.min.x-3),Math.floor(n.min.y-3),Math.floor(n.max.x-n.min.x+6),Math.floor(n.max.y-n.min.y+6)),t.closePath(),t.stroke();break;case"constraint":var p=d.pointA;d.bodyA&&(p=d.pointB),t.beginPath(),t.arc(p.x,p.y,10,0,2*Math.PI),t.closePath(),t.stroke()}t.setLineDash([]),t.translate(-.5,-.5)}null!==e.selectStart&&(t.translate(.5,.5),t.lineWidth=1,t.strokeStyle="rgba(255,165,0,0.6)",t.fillStyle="rgba(255,165,0,0.1)",n=e.selectBounds,t.beginPath(),t.rect(Math.floor(n.min.x),Math.floor(n.min.y),Math.floor(n.max.x-n.min.x),Math.floor(n.max.y-n.min.y)),t.closePath(),t.stroke(),t.fill(),t.translate(-.5,-.5)),i.hasBounds&&t.setTransform(1,0,0,1,0,0)};var n=function(e,t){var n=e.engine,o=e.timing,i=o.historySize,s=n.timing.timestamp;o.delta=t-o.lastTime||r._goodDelta,o.lastTime=t,o.timestampElapsed=s-o.lastTimestamp||0,o.lastTimestamp=s,o.deltaHistory.unshift(o.delta),o.deltaHistory.length=Math.min(o.deltaHistory.length,i),o.engineDeltaHistory.unshift(n.timing.lastDelta),o.engineDeltaHistory.length=Math.min(o.engineDeltaHistory.length,i),o.timestampElapsedHistory.unshift(o.timestampElapsed),o.timestampElapsedHistory.length=Math.min(o.timestampElapsedHistory.length,i),o.engineElapsedHistory.unshift(n.timing.lastElapsed),o.engineElapsedHistory.length=Math.min(o.engineElapsedHistory.length,i),o.elapsedHistory.unshift(o.lastElapsed),o.elapsedHistory.length=Math.min(o.elapsedHistory.length,i)},u=function(e){for(var t=0,n=0;n<e.length;n+=1)t+=e[n];return t/e.length||0},d=function(e,t){var n=document.createElement("canvas");return n.width=e,n.height=t,n.oncontextmenu=function(){return!1},n.onselectstart=function(){return!1},n},p=function(e){var t=e.getContext("2d");return(window.devicePixelRatio||1)/(t.webkitBackingStorePixelRatio||t.mozBackingStorePixelRatio||t.msBackingStorePixelRatio||t.oBackingStorePixelRatio||t.backingStorePixelRatio||1)},f=function(e,t){var n=e.textures[t];return n||((n=e.textures[t]=new Image).src=t,n)},y=function(e,t){var n=t;/(jpg|gif|png)$/.test(t)&&(n="url("+t+")"),e.canvas.style.background=n,e.canvas.style.backgroundSize="contain",e.currentBackground=t}}()},function(e,t){var n={};e.exports=n,n.create=function(e){return{vertex:e,normalImpulse:0,tangentImpulse:0}}},function(e,t,n){var r={};e.exports=r;var o=n(7),i=n(19),s=n(14),a=n(20),c=n(4),l=n(5),u=n(10),d=n(0),p=n(6);r.create=function(e){e=e||{};var t=d.extend({positionIterations:6,velocityIterations:4,constraintIterations:2,enableSleeping:!1,events:[],plugin:{},gravity:{x:0,y:1,scale:.001},timing:{timestamp:0,timeScale:1,lastDelta:0,lastElapsed:0}},e);return t.world=e.world||l.create({label:"World"}),t.pairs=e.pairs||a.create(),t.detector=e.detector||s.create(),t.grid={buckets:[]},t.world.gravity=t.gravity,t.broadphase=t.grid,t.metrics={},t},r.update=function(e,t,n){var p=d.now();t=t||1e3/60,n=n||1;var f,y=e.world,v=e.detector,h=e.pairs,g=e.timing,m=g.timestamp;g.timestamp+=t*g.timeScale,g.lastDelta=t*g.timeScale;var x={timestamp:g.timestamp};c.trigger(e,"beforeUpdate",x);var b=l.allBodies(y),_=l.allConstraints(y);for(y.isModified&&s.setBodies(v,b),y.isModified&&l.setModified(y,!1,!1,!0),e.enableSleeping&&o.update(b,g.timeScale),r._bodiesApplyGravity(b,e.gravity),r._bodiesUpdate(b,t,g.timeScale,n,y.bounds),u.preSolveAll(b),f=0;f<e.constraintIterations;f++)u.solveAll(_,g.timeScale);u.postSolveAll(b),v.pairs=e.pairs;var w=s.collisions(v);for(a.update(h,w,m),e.enableSleeping&&o.afterCollisions(h.list,g.timeScale),h.collisionStart.length>0&&c.trigger(e,"collisionStart",{pairs:h.collisionStart}),i.preSolvePosition(h.list),f=0;f<e.positionIterations;f++)i.solvePosition(h.list,g.timeScale);for(i.postSolvePosition(b),u.preSolveAll(b),f=0;f<e.constraintIterations;f++)u.solveAll(_,g.timeScale);for(u.postSolveAll(b),i.preSolveVelocity(h.list),f=0;f<e.velocityIterations;f++)i.solveVelocity(h.list,g.timeScale);return h.collisionActive.length>0&&c.trigger(e,"collisionActive",{pairs:h.collisionActive}),h.collisionEnd.length>0&&c.trigger(e,"collisionEnd",{pairs:h.collisionEnd}),r._bodiesClearForces(b),c.trigger(e,"afterUpdate",x),e.timing.lastElapsed=d.now()-p,e},r.merge=function(e,t){if(d.extend(e,t),t.world){e.world=t.world,r.clear(e);for(var n=l.allBodies(e.world),i=0;i<n.length;i++){var s=n[i];o.set(s,!1),s.id=d.nextId()}}},r.clear=function(e){a.clear(e.pairs),s.clear(e.detector)},r._bodiesClearForces=function(e){for(var t=0;t<e.length;t++){var n=e[t];n.force.x=0,n.force.y=0,n.torque=0}},r._bodiesApplyGravity=function(e,t){var n=void 0!==t.scale?t.scale:.001;if((0!==t.x||0!==t.y)&&0!==n)for(var r=0;r<e.length;r++){var o=e[r];o.isStatic||o.isSleeping||(o.force.y+=o.mass*t.y*n,o.force.x+=o.mass*t.x*n)}},r._bodiesUpdate=function(e,t,n,r,o){for(var i=0;i<e.length;i++){var s=e[i];s.isStatic||s.isSleeping||p.update(s,t,n,r)}}},function(e,t,n){var r={};e.exports=r;var o=n(3),i=n(1);r._restingThresh=4,r._restingThreshTangent=6,r._positionDampen=.9,r._positionWarming=.8,r._frictionNormalMultiplier=5,r.preSolvePosition=function(e){var t,n,r,o=e.length;for(t=0;t<o;t++)(n=e[t]).isActive&&(r=n.activeContacts.length,n.collision.parentA.totalContacts+=r,n.collision.parentB.totalContacts+=r)},r.solvePosition=function(e,t){var n,o,i,s,a,c,l,u,d=r._positionDampen,p=e.length;for(n=0;n<p;n++)(o=e[n]).isActive&&!o.isSensor&&(s=(i=o.collision).parentA,a=i.parentB,c=i.normal,o.separation=c.x*(a.positionImpulse.x+i.penetration.x-s.positionImpulse.x)+c.y*(a.positionImpulse.y+i.penetration.y-s.positionImpulse.y));for(n=0;n<p;n++)(o=e[n]).isActive&&!o.isSensor&&(s=(i=o.collision).parentA,a=i.parentB,c=i.normal,u=(o.separation-o.slop)*t,(s.isStatic||a.isStatic)&&(u*=2),s.isStatic||s.isSleeping||(l=d/s.totalContacts,s.positionImpulse.x+=c.x*u*l,s.positionImpulse.y+=c.y*u*l),a.isStatic||a.isSleeping||(l=d/a.totalContacts,a.positionImpulse.x-=c.x*u*l,a.positionImpulse.y-=c.y*u*l))},r.postSolvePosition=function(e){for(var t=r._positionWarming,n=e.length,s=o.translate,a=i.update,c=0;c<n;c++){var l=e[c],u=l.positionImpulse,d=u.x,p=u.y,f=l.velocity;if(l.totalContacts=0,0!==d||0!==p){for(var y=0;y<l.parts.length;y++){var v=l.parts[y];s(v.vertices,u),a(v.bounds,v.vertices,f),v.position.x+=d,v.position.y+=p}l.positionPrev.x+=d,l.positionPrev.y+=p,d*f.x+p*f.y<0?(u.x=0,u.y=0):(u.x*=t,u.y*=t)}}},r.preSolveVelocity=function(e){var t,n,r=e.length;for(t=0;t<r;t++){var o=e[t];if(o.isActive&&!o.isSensor){var i=o.activeContacts,s=i.length,a=o.collision,c=a.parentA,l=a.parentB,u=a.normal,d=a.tangent;for(n=0;n<s;n++){var p=i[n],f=p.vertex,y=p.normalImpulse,v=p.tangentImpulse;if(0!==y||0!==v){var h=u.x*y+d.x*v,g=u.y*y+d.y*v;c.isStatic||c.isSleeping||(c.positionPrev.x+=h*c.inverseMass,c.positionPrev.y+=g*c.inverseMass,c.anglePrev+=c.inverseInertia*((f.x-c.position.x)*g-(f.y-c.position.y)*h)),l.isStatic||l.isSleeping||(l.positionPrev.x-=h*l.inverseMass,l.positionPrev.y-=g*l.inverseMass,l.anglePrev-=l.inverseInertia*((f.x-l.position.x)*g-(f.y-l.position.y)*h))}}}}},r.solveVelocity=function(e,t){var n,o,i,s,a=t*t,c=r._restingThresh*a,l=r._frictionNormalMultiplier,u=r._restingThreshTangent*a,d=Number.MAX_VALUE,p=e.length;for(i=0;i<p;i++){var f=e[i];if(f.isActive&&!f.isSensor){var y=f.collision,v=y.parentA,h=y.parentB,g=v.velocity,m=h.velocity,x=y.normal.x,b=y.normal.y,_=y.tangent.x,w=y.tangent.y,S=f.activeContacts,P=S.length,C=1/P,A=v.inverseMass+h.inverseMass,M=f.friction*f.frictionStatic*l*a;for(g.x=v.position.x-v.positionPrev.x,g.y=v.position.y-v.positionPrev.y,m.x=h.position.x-h.positionPrev.x,m.y=h.position.y-h.positionPrev.y,v.angularVelocity=v.angle-v.anglePrev,h.angularVelocity=h.angle-h.anglePrev,s=0;s<P;s++){var B=S[s],I=B.vertex,O=I.x-v.position.x,k=I.y-v.position.y,V=I.x-h.position.x,E=I.y-h.position.y,T=g.x-k*v.angularVelocity,z=g.y+O*v.angularVelocity,j=T-(m.x-E*h.angularVelocity),L=z-(m.y+V*h.angularVelocity),R=x*j+b*L,F=_*j+w*L,D=f.separation+R,q=Math.min(D,1),U=(q=D<0?0:q)*M;F>U||-F>U?(o=F>0?F:-F,(n=f.friction*(F>0?1:-1)*a)<-o?n=-o:n>o&&(n=o)):(n=F,o=d);var W=O*b-k*x,H=V*b-E*x,N=C/(A+v.inverseInertia*W*W+h.inverseInertia*H*H),G=(1+f.restitution)*R*N;if(n*=N,R*R>c&&R<0)B.normalImpulse=0;else{var Q=B.normalImpulse;B.normalImpulse+=G,B.normalImpulse=Math.min(B.normalImpulse,0),G=B.normalImpulse-Q}if(F*F>u)B.tangentImpulse=0;else{var Z=B.tangentImpulse;B.tangentImpulse+=n,B.tangentImpulse<-o&&(B.tangentImpulse=-o),B.tangentImpulse>o&&(B.tangentImpulse=o),n=B.tangentImpulse-Z}var X=x*G+_*n,J=b*G+w*n;v.isStatic||v.isSleeping||(v.positionPrev.x+=X*v.inverseMass,v.positionPrev.y+=J*v.inverseMass,v.anglePrev+=(O*J-k*X)*v.inverseInertia),h.isStatic||h.isSleeping||(h.positionPrev.x-=X*h.inverseMass,h.positionPrev.y-=J*h.inverseMass,h.anglePrev-=(V*J-E*X)*h.inverseInertia)}}}}},function(e,t,n){var r={};e.exports=r;var o=n(9),i=n(0);r.create=function(e){return i.extend({table:{},list:[],collisionStart:[],collisionActive:[],collisionEnd:[]},e)},r.update=function(e,t,n){var r,i,s,a,c=e.list,l=c.length,u=e.table,d=t.length,p=e.collisionStart,f=e.collisionEnd,y=e.collisionActive;for(p.length=0,f.length=0,y.length=0,a=0;a<l;a++)c[a].confirmedActive=!1;for(a=0;a<d;a++)(s=(r=t[a]).pair)?(s.isActive?y.push(s):p.push(s),o.update(s,r,n),s.confirmedActive=!0):(u[(s=o.create(r,n)).id]=s,p.push(s),c.push(s));var v=[];for(l=c.length,a=0;a<l;a++)(s=c[a]).confirmedActive||(o.setActive(s,!1,n),f.push(s),s.collision.bodyA.isSleeping||s.collision.bodyB.isSleeping||v.push(a));for(a=0;a<v.length;a++)s=c[i=v[a]-a],c.splice(i,1),delete u[s.id]},r.clear=function(e){return e.table={},e.list.length=0,e.collisionStart.length=0,e.collisionActive.length=0,e.collisionEnd.length=0,e}},function(e,t,n){var r=e.exports=n(22);r.Axes=n(11),r.Bodies=n(12),r.Body=n(6),r.Bounds=n(1),r.Collision=n(8),r.Common=n(0),r.Composite=n(5),r.Composites=n(23),r.Constraint=n(10),r.Contact=n(17),r.Detector=n(14),r.Engine=n(18),r.Events=n(4),r.Grid=n(24),r.Mouse=n(13),r.MouseConstraint=n(25),r.Pair=n(9),r.Pairs=n(20),r.Plugin=n(15),r.Query=n(26),r.Render=n(16),r.Resolver=n(19),r.Runner=n(27),r.SAT=n(28),r.Sleeping=n(7),r.Svg=n(29),r.Vector=n(2),r.Vertices=n(3),r.World=n(30),r.Engine.run=r.Runner.run,r.Common.deprecated(r.Engine,"run","Engine.run ➤ use Matter.Runner.run(engine) instead")},function(e,t,n){var r={};e.exports=r;var o=n(15),i=n(0);r.name="matter-js",r.version="0.18.0",r.uses=[],r.used=[],r.use=function(){o.use(r,Array.prototype.slice.call(arguments))},r.before=function(e,t){return e=e.replace(/^Matter./,""),i.chainPathBefore(r,e,t)},r.after=function(e,t){return e=e.replace(/^Matter./,""),i.chainPathAfter(r,e,t)}},function(e,t,n){var r={};e.exports=r;var o=n(5),i=n(10),s=n(0),a=n(6),c=n(12),l=s.deprecated;r.stack=function(e,t,n,r,i,s,c){for(var l,u=o.create({label:"Stack"}),d=e,p=t,f=0,y=0;y<r;y++){for(var v=0,h=0;h<n;h++){var g=c(d,p,h,y,l,f);if(g){var m=g.bounds.max.y-g.bounds.min.y,x=g.bounds.max.x-g.bounds.min.x;m>v&&(v=m),a.translate(g,{x:.5*x,y:.5*m}),d=g.bounds.max.x+i,o.addBody(u,g),l=g,f+=1}else d+=i}p+=v+s,d=e}return u},r.chain=function(e,t,n,r,a,c){for(var l=e.bodies,u=1;u<l.length;u++){var d=l[u-1],p=l[u],f=d.bounds.max.y-d.bounds.min.y,y=d.bounds.max.x-d.bounds.min.x,v=p.bounds.max.y-p.bounds.min.y,h={bodyA:d,pointA:{x:y*t,y:f*n},bodyB:p,pointB:{x:(p.bounds.max.x-p.bounds.min.x)*r,y:v*a}},g=s.extend(h,c);o.addConstraint(e,i.create(g))}return e.label+=" Chain",e},r.mesh=function(e,t,n,r,a){var c,l,u,d,p,f=e.bodies;for(c=0;c<n;c++){for(l=1;l<t;l++)u=f[l-1+c*t],d=f[l+c*t],o.addConstraint(e,i.create(s.extend({bodyA:u,bodyB:d},a)));if(c>0)for(l=0;l<t;l++)u=f[l+(c-1)*t],d=f[l+c*t],o.addConstraint(e,i.create(s.extend({bodyA:u,bodyB:d},a))),r&&l>0&&(p=f[l-1+(c-1)*t],o.addConstraint(e,i.create(s.extend({bodyA:p,bodyB:d},a)))),r&&l<t-1&&(p=f[l+1+(c-1)*t],o.addConstraint(e,i.create(s.extend({bodyA:p,bodyB:d},a))))}return e.label+=" Mesh",e},r.pyramid=function(e,t,n,o,i,s,c){return r.stack(e,t,n,o,i,s,(function(t,r,s,l,u,d){var p=Math.min(o,Math.ceil(n/2)),f=u?u.bounds.max.x-u.bounds.min.x:0;if(!(l>p||s<(l=p-l)||s>n-1-l))return 1===d&&a.translate(u,{x:(s+(n%2==1?1:-1))*f,y:0}),c(e+(u?s*f:0)+s*i,r,s,l,u,d)}))},r.newtonsCradle=function(e,t,n,r,s){for(var a=o.create({label:"Newtons Cradle"}),l=0;l<n;l++){var u=c.circle(e+l*(1.9*r),t+s,r,{inertia:1/0,restitution:1,friction:0,frictionAir:1e-4,slop:1}),d=i.create({pointA:{x:e+l*(1.9*r),y:t},bodyB:u});o.addBody(a,u),o.addConstraint(a,d)}return a},l(r,"newtonsCradle","Composites.newtonsCradle ➤ moved to newtonsCradle example"),r.car=function(e,t,n,r,s){var l=a.nextGroup(!0),u=.5*-n+20,d=.5*n-20,p=o.create({label:"Car"}),f=c.rectangle(e,t,n,r,{collisionFilter:{group:l},chamfer:{radius:.5*r},density:2e-4}),y=c.circle(e+u,t+0,s,{collisionFilter:{group:l},friction:.8}),v=c.circle(e+d,t+0,s,{collisionFilter:{group:l},friction:.8}),h=i.create({bodyB:f,pointB:{x:u,y:0},bodyA:y,stiffness:1,length:0}),g=i.create({bodyB:f,pointB:{x:d,y:0},bodyA:v,stiffness:1,length:0});return o.addBody(p,f),o.addBody(p,y),o.addBody(p,v),o.addConstraint(p,h),o.addConstraint(p,g),p},l(r,"car","Composites.car ➤ moved to car example"),r.softBody=function(e,t,n,o,i,a,l,u,d,p){d=s.extend({inertia:1/0},d),p=s.extend({stiffness:.2,render:{type:"line",anchors:!1}},p);var f=r.stack(e,t,n,o,i,a,(function(e,t){return c.circle(e,t,u,d)}));return r.mesh(f,n,o,l,p),f.label="Soft Body",f},l(r,"softBody","Composites.softBody ➤ moved to softBody and cloth examples")},function(e,t,n){var r={};e.exports=r;var o=n(9),i=n(0),s=i.deprecated;r.create=function(e){return i.extend({buckets:{},pairs:{},pairsList:[],bucketWidth:48,bucketHeight:48},e)},r.update=function(e,t,n,o){var i,s,a,c,l,u=n.world,d=e.buckets,p=!1;for(i=0;i<t.length;i++){var f=t[i];if((!f.isSleeping||o)&&(!u.bounds||!(f.bounds.max.x<u.bounds.min.x||f.bounds.min.x>u.bounds.max.x||f.bounds.max.y<u.bounds.min.y||f.bounds.min.y>u.bounds.max.y))){var y=r._getRegion(e,f);if(!f.region||y.id!==f.region.id||o){f.region&&!o||(f.region=y);var v=r._regionUnion(y,f.region);for(s=v.startCol;s<=v.endCol;s++)for(a=v.startRow;a<=v.endRow;a++){c=d[l=r._getBucketId(s,a)];var h=s>=y.startCol&&s<=y.endCol&&a>=y.startRow&&a<=y.endRow,g=s>=f.region.startCol&&s<=f.region.endCol&&a>=f.region.startRow&&a<=f.region.endRow;!h&&g&&g&&c&&r._bucketRemoveBody(e,c,f),(f.region===y||h&&!g||o)&&(c||(c=r._createBucket(d,l)),r._bucketAddBody(e,c,f))}f.region=y,p=!0}}}p&&(e.pairsList=r._createActivePairsList(e))},s(r,"update","Grid.update ➤ replaced by Matter.Detector"),r.clear=function(e){e.buckets={},e.pairs={},e.pairsList=[]},s(r,"clear","Grid.clear ➤ replaced by Matter.Detector"),r._regionUnion=function(e,t){var n=Math.min(e.startCol,t.startCol),o=Math.max(e.endCol,t.endCol),i=Math.min(e.startRow,t.startRow),s=Math.max(e.endRow,t.endRow);return r._createRegion(n,o,i,s)},r._getRegion=function(e,t){var n=t.bounds,o=Math.floor(n.min.x/e.bucketWidth),i=Math.floor(n.max.x/e.bucketWidth),s=Math.floor(n.min.y/e.bucketHeight),a=Math.floor(n.max.y/e.bucketHeight);return r._createRegion(o,i,s,a)},r._createRegion=function(e,t,n,r){return{id:e+","+t+","+n+","+r,startCol:e,endCol:t,startRow:n,endRow:r}},r._getBucketId=function(e,t){return"C"+e+"R"+t},r._createBucket=function(e,t){return e[t]=[]},r._bucketAddBody=function(e,t,n){var r,i=e.pairs,s=o.id,a=t.length;for(r=0;r<a;r++){var c=t[r];if(!(n.id===c.id||n.isStatic&&c.isStatic)){var l=s(n,c),u=i[l];u?u[2]+=1:i[l]=[n,c,1]}}t.push(n)},r._bucketRemoveBody=function(e,t,n){var r,s=e.pairs,a=o.id;t.splice(i.indexOf(t,n),1);var c=t.length;for(r=0;r<c;r++){var l=s[a(n,t[r])];l&&(l[2]-=1)}},r._createActivePairsList=function(e){var t,n,r=e.pairs,o=i.keys(r),s=o.length,a=[];for(n=0;n<s;n++)(t=r[o[n]])[2]>0?a.push(t):delete r[o[n]];return a}},function(e,t,n){var r={};e.exports=r;var o=n(3),i=n(7),s=n(13),a=n(4),c=n(14),l=n(10),u=n(5),d=n(0),p=n(1);r.create=function(e,t){var n=(e?e.mouse:null)||(t?t.mouse:null);n||(e&&e.render&&e.render.canvas?n=s.create(e.render.canvas):t&&t.element?n=s.create(t.element):(n=s.create(),d.warn("MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected")));var o={type:"mouseConstraint",mouse:n,element:null,body:null,constraint:l.create({label:"Mouse Constraint",pointA:n.position,pointB:{x:0,y:0},length:.01,stiffness:.1,angularStiffness:1,render:{strokeStyle:"#90EE90",lineWidth:3}}),collisionFilter:{category:1,mask:4294967295,group:0}},i=d.extend(o,t);return a.on(e,"beforeUpdate",(function(){var t=u.allBodies(e.world);r.update(i,t),r._triggerEvents(i)})),i},r.update=function(e,t){var n=e.mouse,r=e.constraint,s=e.body;if(0===n.button){if(r.bodyB)i.set(r.bodyB,!1),r.pointA=n.position;else for(var l=0;l<t.length;l++)if(s=t[l],p.contains(s.bounds,n.position)&&c.canCollide(s.collisionFilter,e.collisionFilter))for(var u=s.parts.length>1?1:0;u<s.parts.length;u++){var d=s.parts[u];if(o.contains(d.vertices,n.position)){r.pointA=n.position,r.bodyB=e.body=s,r.pointB={x:n.position.x-s.position.x,y:n.position.y-s.position.y},r.angleB=s.angle,i.set(s,!1),a.trigger(e,"startdrag",{mouse:n,body:s});break}}}else r.bodyB=e.body=null,r.pointB=null,s&&a.trigger(e,"enddrag",{mouse:n,body:s})},r._triggerEvents=function(e){var t=e.mouse,n=t.sourceEvents;n.mousemove&&a.trigger(e,"mousemove",{mouse:t}),n.mousedown&&a.trigger(e,"mousedown",{mouse:t}),n.mouseup&&a.trigger(e,"mouseup",{mouse:t}),s.clearSourceEvents(t)}},function(e,t,n){var r={};e.exports=r;var o=n(2),i=n(8),s=n(1),a=n(12),c=n(3);r.collides=function(e,t){for(var n=[],r=t.length,o=e.bounds,a=i.collides,c=s.overlaps,l=0;l<r;l++){var u=t[l],d=u.parts.length,p=1===d?0:1;if(c(u.bounds,o))for(var f=p;f<d;f++){var y=u.parts[f];if(c(y.bounds,o)){var v=a(y,e);if(v){n.push(v);break}}}}return n},r.ray=function(e,t,n,i){i=i||1e-100;for(var s=o.angle(t,n),c=o.magnitude(o.sub(t,n)),l=.5*(n.x+t.x),u=.5*(n.y+t.y),d=a.rectangle(l,u,c,i,{angle:s}),p=r.collides(d,e),f=0;f<p.length;f+=1){var y=p[f];y.body=y.bodyB=y.bodyA}return p},r.region=function(e,t,n){for(var r=[],o=0;o<e.length;o++){var i=e[o],a=s.overlaps(i.bounds,t);(a&&!n||!a&&n)&&r.push(i)}return r},r.point=function(e,t){for(var n=[],r=0;r<e.length;r++){var o=e[r];if(s.contains(o.bounds,t))for(var i=1===o.parts.length?0:1;i<o.parts.length;i++){var a=o.parts[i];if(s.contains(a.bounds,t)&&c.contains(a.vertices,t)){n.push(o);break}}}return n}},function(e,t,n){var r={};e.exports=r;var o,i,s,a=n(4),c=n(18),l=n(0);"undefined"!=typeof window&&(o=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame,i=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),o||(o=function(e){s=setTimeout((function(){e(l.now())}),1e3/60)},i=function(){clearTimeout(s)}),r.create=function(e){var t=l.extend({fps:60,correction:1,deltaSampleSize:60,counterTimestamp:0,frameCounter:0,deltaHistory:[],timePrev:null,timeScalePrev:1,frameRequestId:null,isFixed:!1,enabled:!0},e);return t.delta=t.delta||1e3/t.fps,t.deltaMin=t.deltaMin||1e3/t.fps,t.deltaMax=t.deltaMax||1e3/(.5*t.fps),t.fps=1e3/t.delta,t},r.run=function(e,t){return void 0!==e.positionIterations&&(t=e,e=r.create()),function n(i){e.frameRequestId=o(n),i&&e.enabled&&r.tick(e,t,i)}(),e},r.tick=function(e,t,n){var r,o=t.timing,i=1,s={timestamp:o.timestamp};a.trigger(e,"beforeTick",s),e.isFixed?r=e.delta:(r=n-e.timePrev||e.delta,e.timePrev=n,e.deltaHistory.push(r),e.deltaHistory=e.deltaHistory.slice(-e.deltaSampleSize),i=(r=(r=(r=Math.min.apply(null,e.deltaHistory))<e.deltaMin?e.deltaMin:r)>e.deltaMax?e.deltaMax:r)/e.delta,e.delta=r),0!==e.timeScalePrev&&(i*=o.timeScale/e.timeScalePrev),0===o.timeScale&&(i=0),e.timeScalePrev=o.timeScale,e.correction=i,e.frameCounter+=1,n-e.counterTimestamp>=1e3&&(e.fps=e.frameCounter*((n-e.counterTimestamp)/1e3),e.counterTimestamp=n,e.frameCounter=0),a.trigger(e,"tick",s),a.trigger(e,"beforeUpdate",s),c.update(t,r,i),a.trigger(e,"afterUpdate",s),a.trigger(e,"afterTick",s)},r.stop=function(e){i(e.frameRequestId)},r.start=function(e,t){r.run(e,t)}},function(e,t,n){var r={};e.exports=r;var o=n(8),i=n(0).deprecated;r.collides=function(e,t){return o.collides(e,t)},i(r,"collides","SAT.collides ➤ replaced by Collision.collides")},function(e,t,n){var r={};e.exports=r,n(1);var o=n(0);r.pathToVertices=function(e,t){"undefined"==typeof window||"SVGPathSeg"in window||o.warn("Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.");var n,i,s,a,c,l,u,d,p,f,y,v=[],h=0,g=0,m=0;t=t||15;var x=function(e,t,n){var r=n%2==1&&n>1;if(!p||e!=p.x||t!=p.y){p&&r?(f=p.x,y=p.y):(f=0,y=0);var o={x:f+e,y:y+t};!r&&p||(p=o),v.push(o),g=f+e,m=y+t}},b=function(e){var t=e.pathSegTypeAsLetter.toUpperCase();if("Z"!==t){switch(t){case"M":case"L":case"T":case"C":case"S":case"Q":g=e.x,m=e.y;break;case"H":g=e.x;break;case"V":m=e.y}x(g,m,e.pathSegType)}};for(r._svgPathToAbsolute(e),s=e.getTotalLength(),l=[],n=0;n<e.pathSegList.numberOfItems;n+=1)l.push(e.pathSegList.getItem(n));for(u=l.concat();h<s;){if((c=l[e.getPathSegAtLength(h)])!=d){for(;u.length&&u[0]!=c;)b(u.shift());d=c}switch(c.pathSegTypeAsLetter.toUpperCase()){case"C":case"T":case"S":case"Q":case"A":a=e.getPointAtLength(h),x(a.x,a.y,0)}h+=t}for(n=0,i=u.length;n<i;++n)b(u[n]);return v},r._svgPathToAbsolute=function(e){for(var t,n,r,o,i,s,a=e.pathSegList,c=0,l=0,u=a.numberOfItems,d=0;d<u;++d){var p=a.getItem(d),f=p.pathSegTypeAsLetter;if(/[MLHVCSQTA]/.test(f))"x"in p&&(c=p.x),"y"in p&&(l=p.y);else switch("x1"in p&&(r=c+p.x1),"x2"in p&&(i=c+p.x2),"y1"in p&&(o=l+p.y1),"y2"in p&&(s=l+p.y2),"x"in p&&(c+=p.x),"y"in p&&(l+=p.y),f){case"m":a.replaceItem(e.createSVGPathSegMovetoAbs(c,l),d);break;case"l":a.replaceItem(e.createSVGPathSegLinetoAbs(c,l),d);break;case"h":a.replaceItem(e.createSVGPathSegLinetoHorizontalAbs(c),d);break;case"v":a.replaceItem(e.createSVGPathSegLinetoVerticalAbs(l),d);break;case"c":a.replaceItem(e.createSVGPathSegCurvetoCubicAbs(c,l,r,o,i,s),d);break;case"s":a.replaceItem(e.createSVGPathSegCurvetoCubicSmoothAbs(c,l,i,s),d);break;case"q":a.replaceItem(e.createSVGPathSegCurvetoQuadraticAbs(c,l,r,o),d);break;case"t":a.replaceItem(e.createSVGPathSegCurvetoQuadraticSmoothAbs(c,l),d);break;case"a":a.replaceItem(e.createSVGPathSegArcAbs(c,l,p.r1,p.r2,p.angle,p.largeArcFlag,p.sweepFlag),d);break;case"z":case"Z":c=t,l=n}"M"!=f&&"m"!=f||(t=c,n=l)}}},function(e,t,n){var r={};e.exports=r;var o=n(5);n(0),r.create=o.create,r.add=o.add,r.remove=o.remove,r.clear=o.clear,r.addComposite=o.addComposite,r.addBody=o.addBody,r.addConstraint=o.addConstraint}])},e.exports=r()},956:(e,t,n)=>{var r=n(9060).parse;r.parseSVG=r,r.makeAbsolute=function(e){var t,n={x:0,y:0},r={x:"x0",y:"y0",x1:"x0",y1:"y0",x2:"x0",y2:"y0"};return e.forEach((function(e){for(var o in"moveto"===e.command&&(t=e),e.x0=n.x,e.y0=n.y,r)o in e&&(e[o]+=e.relative?e[r[o]]:0);"x"in e||(e.x=n.x),"y"in e||(e.y=n.y),e.relative=!1,e.code=e.code.toUpperCase(),"closepath"==e.command&&(e.x=t.x,e.y=t.y),n=e})),e},e.exports=r},9060:e=>{"use strict";function t(e,n,r,o){this.message=e,this.expected=n,this.found=r,this.location=o,this.name="SyntaxError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(this,t)}!function(e,t){function n(){this.constructor=e}n.prototype=t.prototype,e.prototype=new n}(t,Error),t.buildMessage=function(e,t){var n={literal:function(e){return'"'+o(e.text)+'"'},class:function(e){var t,n="";for(t=0;t<e.parts.length;t++)n+=e.parts[t]instanceof Array?i(e.parts[t][0])+"-"+i(e.parts[t][1]):i(e.parts[t]);return"["+(e.inverted?"^":"")+n+"]"},any:function(e){return"any character"},end:function(e){return"end of input"},other:function(e){return e.description}};function r(e){return e.charCodeAt(0).toString(16).toUpperCase()}function o(e){return e.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,(function(e){return"\\x0"+r(e)})).replace(/[\x10-\x1F\x7F-\x9F]/g,(function(e){return"\\x"+r(e)}))}function i(e){return e.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,(function(e){return"\\x0"+r(e)})).replace(/[\x10-\x1F\x7F-\x9F]/g,(function(e){return"\\x"+r(e)}))}return"Expected "+function(e){var t,r,o,i=new Array(e.length);for(t=0;t<e.length;t++)i[t]=(o=e[t],n[o.type](o));if(i.sort(),i.length>0){for(t=1,r=1;t<i.length;t++)i[t-1]!==i[t]&&(i[r]=i[t],r++);i.length=r}switch(i.length){case 1:return i[0];case 2:return i[0]+" or "+i[1];default:return i.slice(0,-1).join(", ")+", or "+i[i.length-1]}}(e)+" but "+function(e){return e?'"'+o(e)+'"':"end of input"}(t)+" found."},e.exports={SyntaxError:t,parse:function(e,n){n=void 0!==n?n:{};var r,o={},i={svg_path:Y},s=Y,a=function(e,t){return function(e,t){if(!t)return[e];for(var n=[e],r=0,o=t.length;r<o;r++)n[r+1]=t[r][1];return n}(e,t)},c=/^[Mm]/,l=Q(["M","m"],!1,!1),u=/^[Zz]/,d=Q(["Z","z"],!1,!1),p=/^[Ll]/,f=Q(["L","l"],!1,!1),y=function(e,t){return we(e,t)},v=/^[Hh]/,h=Q(["H","h"],!1,!1),g=/^[Vv]/,m=Q(["V","v"],!1,!1),x=/^[Cc]/,b=Q(["C","c"],!1,!1),_=/^[Ss]/,w=Q(["S","s"],!1,!1),S=/^[Qq]/,P=Q(["Q","q"],!1,!1),C=/^[Tt]/,A=Q(["T","t"],!1,!1),M=/^[Aa]/,B=Q(["A","a"],!1,!1),I=/^[01]/,O=Q(["0","1"],!1,!1),k=G(",",!1),V=function(e){return e.join("")},E=G(".",!1),T=/^[eE]/,z=Q(["e","E"],!1,!1),j=/^[+\-]/,L=Q(["+","-"],!1,!1),R=/^[0-9]/,F=Q([["0","9"]],!1,!1),D=/^[ \t\n\r]/,q=Q([" ","\t","\n","\r"],!1,!1),U=0,W=[{line:1,column:1}],H=0,N=[];if("startRule"in n){if(!(n.startRule in i))throw new Error("Can't start parsing from rule \""+n.startRule+'".');s=i[n.startRule]}function G(e,t){return{type:"literal",text:e,ignoreCase:t}}function Q(e,t,n){return{type:"class",parts:e,inverted:t,ignoreCase:n}}function Z(t){var n,r=W[t];if(r)return r;for(n=t-1;!W[n];)n--;for(r={line:(r=W[n]).line,column:r.column};n<t;)10===e.charCodeAt(n)?(r.line++,r.column=1):r.column++,n++;return W[t]=r,r}function X(e,t){var n=Z(e),r=Z(t);return{start:{offset:e,line:n.line,column:n.column},end:{offset:t,line:r.line,column:r.column}}}function J(e){U<H||(U>H&&(H=U,N=[]),N.push(e))}function Y(){var e,t,n,r,i;for(e=U,t=[],n=he();n!==o;)t.push(n),n=he();if(t!==o)if(n=function(){var e,t,n,r,i,s;if(e=U,(t=$())!==o){for(n=[],r=U,i=[],s=he();s!==o;)i.push(s),s=he();for(i!==o&&(s=$())!==o?r=i=[i,s]:(U=r,r=o);r!==o;){for(n.push(r),r=U,i=[],s=he();s!==o;)i.push(s),s=he();i!==o&&(s=$())!==o?r=i=[i,s]:(U=r,r=o)}n!==o?e=t=a(t,n):(U=e,e=o)}else U=e,e=o;return e}(),n===o&&(n=null),n!==o){for(r=[],i=he();i!==o;)r.push(i),i=he();r!==o?(t=function(e){if(!e)return[];for(var t=[],n=0;n<e.length;n++)t=t.concat.apply(t,e[n]);var r=t[0];return r&&"m"==r.code&&(delete r.relative,r.code="M"),t}(n),e=t):(U=e,e=o)}else U=e,e=o;else U=e,e=o;return e}function $(){var t,n,r,i,s,u;if(t=U,n=function(){var t,n,r,i,s,a,u,d,p,f;if(t=U,c.test(e.charAt(U))?(n=e.charAt(U),U++):(n=o,J(l)),n!==o){for(r=[],i=he();i!==o;)r.push(i),i=he();r!==o&&(i=se())!==o?(s=U,(a=ue())===o&&(a=null),a!==o&&(u=ee())!==o?s=a=[a,u]:(U=s,s=o),s===o&&(s=null),s!==o?(p=s,f=we(d=n,[i]),p&&(f=f.concat(we("M"==d?"L":"l",p[1]))),t=n=f):(U=t,t=o)):(U=t,t=o)}else U=t,t=o;return t}(),n!==o){for(r=[],i=U,s=[],u=he();u!==o;)s.push(u),u=he();for(s!==o&&(u=K())!==o?i=s=[s,u]:(U=i,i=o);i!==o;){for(r.push(i),i=U,s=[],u=he();u!==o;)s.push(u),u=he();s!==o&&(u=K())!==o?i=s=[s,u]:(U=i,i=o)}r!==o?t=n=a(n,r):(U=t,t=o)}else U=t,t=o;return t}function K(){var t,n;return u.test(e.charAt(U))?(n=e.charAt(U),U++):(n=o,J(d)),n!==o&&(n=we("Z")),(t=n)===o&&(t=function(){var t,n,r,i;if(t=U,p.test(e.charAt(U))?(n=e.charAt(U),U++):(n=o,J(f)),n!==o){for(r=[],i=he();i!==o;)r.push(i),i=he();r!==o&&(i=ee())!==o?t=n=y(n,i):(U=t,t=o)}else U=t,t=o;return t}())===o&&(t=function(){var t,n,r,i;if(t=U,v.test(e.charAt(U))?(n=e.charAt(U),U++):(n=o,J(h)),n!==o){for(r=[],i=he();i!==o;)r.push(i),i=he();r!==o&&(i=te())!==o?t=n=we(n,i.map((function(e){return{x:e}}))):(U=t,t=o)}else U=t,t=o;return t}())===o&&(t=function(){var t,n,r,i;if(t=U,g.test(e.charAt(U))?(n=e.charAt(U),U++):(n=o,J(m)),n!==o){for(r=[],i=he();i!==o;)r.push(i),i=he();r!==o&&(i=te())!==o?t=n=we(n,i.map((function(e){return{y:e}}))):(U=t,t=o)}else U=t,t=o;return t}())===o&&(t=function(){var t,n,r,i;if(t=U,x.test(e.charAt(U))?(n=e.charAt(U),U++):(n=o,J(b)),n!==o){for(r=[],i=he();i!==o;)r.push(i),i=he();r!==o?(i=function(){var e,t,n,r,i,s;if(e=U,(t=ne())!==o){for(n=[],r=U,(i=ue())===o&&(i=null),i!==o&&(s=ne())!==o?r=i=[i,s]:(U=r,r=o);r!==o;)n.push(r),r=U,(i=ue())===o&&(i=null),i!==o&&(s=ne())!==o?r=i=[i,s]:(U=r,r=o);n!==o?e=t=a(t,n):(U=e,e=o)}else U=e,e=o;return e}(),i!==o?t=n=y(n,i):(U=t,t=o)):(U=t,t=o)}else U=t,t=o;return t}())===o&&(t=function(){var t,n,r,i;if(t=U,_.test(e.charAt(U))?(n=e.charAt(U),U++):(n=o,J(w)),n!==o){for(r=[],i=he();i!==o;)r.push(i),i=he();r!==o?(i=function(){var e,t,n,r,i,s;if(e=U,(t=re())!==o){for(n=[],r=U,(i=ue())===o&&(i=null),i!==o&&(s=re())!==o?r=i=[i,s]:(U=r,r=o);r!==o;)n.push(r),r=U,(i=ue())===o&&(i=null),i!==o&&(s=re())!==o?r=i=[i,s]:(U=r,r=o);n!==o?e=t=a(t,n):(U=e,e=o)}else U=e,e=o;return e}(),i!==o?t=n=y(n,i):(U=t,t=o)):(U=t,t=o)}else U=t,t=o;return t}())===o&&(t=function(){var t,n,r,i;if(t=U,S.test(e.charAt(U))?(n=e.charAt(U),U++):(n=o,J(P)),n!==o){for(r=[],i=he();i!==o;)r.push(i),i=he();r!==o?(i=function(){var e,t,n,r,i,s;if(e=U,(t=oe())!==o){for(n=[],r=U,(i=ue())===o&&(i=null),i!==o&&(s=oe())!==o?r=i=[i,s]:(U=r,r=o);r!==o;)n.push(r),r=U,(i=ue())===o&&(i=null),i!==o&&(s=oe())!==o?r=i=[i,s]:(U=r,r=o);n!==o?e=t=a(t,n):(U=e,e=o)}else U=e,e=o;return e}(),i!==o?t=n=y(n,i):(U=t,t=o)):(U=t,t=o)}else U=t,t=o;return t}())===o&&(t=function(){var t,n,r,i;if(t=U,C.test(e.charAt(U))?(n=e.charAt(U),U++):(n=o,J(A)),n!==o){for(r=[],i=he();i!==o;)r.push(i),i=he();r!==o?(i=function(){var e,t,n,r,i,s;if(e=U,(t=se())!==o){for(n=[],r=U,(i=ue())===o&&(i=null),i!==o&&(s=se())!==o?r=i=[i,s]:(U=r,r=o);r!==o;)n.push(r),r=U,(i=ue())===o&&(i=null),i!==o&&(s=se())!==o?r=i=[i,s]:(U=r,r=o);n!==o?e=t=a(t,n):(U=e,e=o)}else U=e,e=o;return e}(),i!==o?t=n=y(n,i):(U=t,t=o)):(U=t,t=o)}else U=t,t=o;return t}())===o&&(t=function(){var t,n,r,i;if(t=U,M.test(e.charAt(U))?(n=e.charAt(U),U++):(n=o,J(B)),n!==o){for(r=[],i=he();i!==o;)r.push(i),i=he();r!==o?(i=function(){var e,t,n,r,i,s;if(e=U,(t=ie())!==o){for(n=[],r=U,(i=ue())===o&&(i=null),i!==o&&(s=ie())!==o?r=i=[i,s]:(U=r,r=o);r!==o;)n.push(r),r=U,(i=ue())===o&&(i=null),i!==o&&(s=ie())!==o?r=i=[i,s]:(U=r,r=o);n!==o?e=t=a(t,n):(U=e,e=o)}else U=e,e=o;return e}(),i!==o?t=n=y(n,i):(U=t,t=o)):(U=t,t=o)}else U=t,t=o;return t}()),t}function ee(){var e,t,n,r,i,s;if(e=U,(t=se())!==o){for(n=[],r=U,(i=ue())===o&&(i=null),i!==o&&(s=se())!==o?r=i=[i,s]:(U=r,r=o);r!==o;)n.push(r),r=U,(i=ue())===o&&(i=null),i!==o&&(s=se())!==o?r=i=[i,s]:(U=r,r=o);n!==o?e=t=a(t,n):(U=e,e=o)}else U=e,e=o;return e}function te(){var e,t,n,r,i,s;if(e=U,(t=ce())!==o){for(n=[],r=U,(i=ue())===o&&(i=null),i!==o&&(s=ce())!==o?r=i=[i,s]:(U=r,r=o);r!==o;)n.push(r),r=U,(i=ue())===o&&(i=null),i!==o&&(s=ce())!==o?r=i=[i,s]:(U=r,r=o);n!==o?e=t=a(t,n):(U=e,e=o)}else U=e,e=o;return e}function ne(){var e,t,n,r,i,s,a,c,l;return e=U,(t=se())!==o?((n=ue())===o&&(n=null),n!==o&&(r=se())!==o?((i=ue())===o&&(i=null),i!==o&&(s=se())!==o?(c=r,l=s,e=t={x1:(a=t).x,y1:a.y,x2:c.x,y2:c.y,x:l.x,y:l.y}):(U=e,e=o)):(U=e,e=o)):(U=e,e=o),e}function re(){var e,t,n,r,i,s;return e=U,(t=se())!==o?((n=ue())===o&&(n=null),n!==o&&(r=se())!==o?(s=r,e=t={x2:(i=t).x,y2:i.y,x:s.x,y:s.y}):(U=e,e=o)):(U=e,e=o),e}function oe(){var e,t,n,r,i,s;return e=U,(t=se())!==o?((n=ue())===o&&(n=null),n!==o&&(r=se())!==o?(s=r,e=t={x1:(i=t).x,y1:i.y,x:s.x,y:s.y}):(U=e,e=o)):(U=e,e=o),e}function ie(){var e,t,n,r,i,s,a,c,l,u,d,p;return e=U,(t=ae())!==o?((n=ue())===o&&(n=null),n!==o&&(r=ae())!==o?((i=ue())===o&&(i=null),i!==o&&(s=ce())!==o&&ue()!==o&&(a=le())!==o?((c=ue())===o&&(c=null),c!==o&&(l=le())!==o?((u=ue())===o&&(u=null),u!==o&&(d=se())!==o?e=t={rx:t,ry:r,xAxisRotation:s,largeArc:a,sweep:l,x:(p=d).x,y:p.y}:(U=e,e=o)):(U=e,e=o)):(U=e,e=o)):(U=e,e=o)):(U=e,e=o),e}function se(){var e,t,n,r;return e=U,(t=ce())!==o?((n=ue())===o&&(n=null),n!==o&&(r=ce())!==o?e=t={x:t,y:r}:(U=e,e=o)):(U=e,e=o),e}function ae(){var e;return U,(e=pe())===o&&(e=ve()),e!==o&&(e*=1),e}function ce(){var e,t,n;return U,e=U,(t=ye())===o&&(t=null),t!==o&&(n=pe())!==o?e=t=[t,n]:(U=e,e=o),e===o&&(e=U,(t=ye())===o&&(t=null),t!==o&&(n=ve())!==o?e=t=[t,n]:(U=e,e=o)),e!==o&&(e=1*e.join("")),e}function le(){var t;return U,I.test(e.charAt(U))?(t=e.charAt(U),U++):(t=o,J(O)),t!==o&&(t="1"==t),t}function ue(){var e,t,n,r,i;if(e=U,t=[],(n=he())!==o)for(;n!==o;)t.push(n),n=he();else t=o;if(t!==o)if((n=de())===o&&(n=null),n!==o){for(r=[],i=he();i!==o;)r.push(i),i=he();r!==o?e=t=[t,n,r]:(U=e,e=o)}else U=e,e=o;else U=e,e=o;if(e===o){if(e=U,t=U,(n=de())!==o){for(r=[],i=he();i!==o;)r.push(i),i=he();r!==o?t=n=[n,r]:(U=t,t=o)}else U=t,t=o;t!==o&&(t=""),e=t}return e}function de(){var t;return 44===e.charCodeAt(U)?(t=",",U++):(t=o,J(k)),t}function pe(){var t,n,r;return U,t=U,n=function(){var t,n,r,i;return U,t=U,(n=ve())===o&&(n=null),n!==o?(46===e.charCodeAt(U)?(r=".",U++):(r=o,J(E)),r!==o&&(i=ve())!==o?t=n=[n,r,i]:(U=t,t=o)):(U=t,t=o),t===o&&(t=U,(n=ve())!==o?(46===e.charCodeAt(U)?(r=".",U++):(r=o,J(E)),r!==o?t=n=[n,r]:(U=t,t=o)):(U=t,t=o)),t!==o&&(t=V(t)),t}(),n!==o?((r=fe())===o&&(r=null),r!==o?t=n=[n,r]:(U=t,t=o)):(U=t,t=o),t===o&&(t=U,(n=ve())!==o&&(r=fe())!==o?t=n=[n,r]:(U=t,t=o)),t!==o&&(t=V(t)),t}function fe(){var t,n,r,i;return U,t=U,T.test(e.charAt(U))?(n=e.charAt(U),U++):(n=o,J(z)),n!==o?((r=ye())===o&&(r=null),r!==o&&(i=ve())!==o?t=n=[n,r,i]:(U=t,t=o)):(U=t,t=o),t!==o&&(t=V(t)),t}function ye(){var t;return j.test(e.charAt(U))?(t=e.charAt(U),U++):(t=o,J(L)),t}function ve(){var t,n;if(U,t=[],R.test(e.charAt(U))?(n=e.charAt(U),U++):(n=o,J(F)),n!==o)for(;n!==o;)t.push(n),R.test(e.charAt(U))?(n=e.charAt(U),U++):(n=o,J(F));else t=o;return t!==o&&(t=t.join("")),t}function he(){var t;return U,D.test(e.charAt(U))?(t=e.charAt(U),U++):(t=o,J(q)),t!==o&&(t=""),t}var ge,me,xe,be={m:"moveto",l:"lineto",h:"horizontal lineto",v:"vertical lineto",c:"curveto",s:"smooth curveto",q:"quadratic curveto",t:"smooth quadratic curveto",a:"elliptical arc",z:"closepath"};for(var _e in be)be[_e.toUpperCase()]=be[_e];function we(e,t){t||(t=[{}]);for(var n=t.length;n--;){var r={code:e,command:be[e]};for(var o in e==e.toLowerCase()&&(r.relative=!0),t[n])r[o]=t[n][o];t[n]=r}return t}if((r=s())!==o&&U===e.length)return r;throw r!==o&&U<e.length&&J({type:"end"}),ge=N,me=H<e.length?e.charAt(H):null,xe=H<e.length?X(H,H+1):X(H,H),new t(t.buildMessage(ge,me),ge,me,xe)}}},1962:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CurveCurveIntersector=void 0;var r=n(9842),o=n(1096),i=n(5545),s=n(2842),a=function(){function e(){}return e.prototype.intersects=function(e,t){var n=r.Vector.create(e.x0,e.y0),a=r.Vector.create(e.x,e.y),c=r.Vector.create(t.x0,t.y0),l=r.Vector.create(t.x,t.y);if((0,o.vectorEquals)(n,c)||(0,o.vectorEquals)(n,l)||(0,o.vectorEquals)(a,c)||(0,o.vectorEquals)(a,l))return!0;var u=new s.Bezier((0,i.findCurvePoints)(e)),d=new s.Bezier((0,i.findCurvePoints)(t));return 0!==u.curveintersects([u],[d]).length},e.prototype.supportedCommandTypes=function(){return[["C","S","Q"],["C","S","Q"]]},e}();t.CurveCurveIntersector=a},1466:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CurvePointIntersector=void 0;var r=n(9842),o=n(1096),i=function(){function e(){}return e.prototype.intersects=function(e,t){var n=r.Vector.create(e.x0,e.y0),i=r.Vector.create(e.x,e.y),s=r.Vector.create(t.x,t.y);return(0,o.vectorEquals)(n,s)||(0,o.vectorEquals)(i,s)},e.prototype.supportedCommandTypes=function(){return[["C","S","Q"],["M"]]},e}();t.CurvePointIntersector=i},961:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LineCurveIntersector=void 0;var r=n(2842),o=n(9842),i=n(1096),s=n(5545),a=function(){function e(){}return e.prototype.intersects=function(e,t){var n=o.Vector.create(e.x0,e.y0),a=o.Vector.create(e.x,e.y),c=o.Vector.create(t.x0,t.y0),l=o.Vector.create(t.x,t.y);return!!((0,i.vectorEquals)(n,c)||(0,i.vectorEquals)(n,l)||(0,i.vectorEquals)(a,c)||(0,i.vectorEquals)(a,l))||0!==new r.Bezier((0,s.findCurvePoints)(e)).intersects({p1:c,p2:l}).length},e.prototype.supportedCommandTypes=function(){return[["C","S","Q"],["L","Z"]]},e}();t.LineCurveIntersector=a},99:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LineLineIntersector=void 0;var r=n(9842),o=n(1096),i=function(){function e(){}return e.prototype.intersects=function(e,t){var n=r.Vector.create(e.x,e.y),i=r.Vector.create(e.x0,e.y0),s=r.Vector.create(t.x,t.y),a=r.Vector.create(t.x0,t.y0),c=r.Vector.sub(i,n),l=r.Vector.sub(a,s),u=r.Vector.cross(c,l),d=r.Vector.cross(r.Vector.sub(s,n),c);if(this.isZero(u)&&this.isZero(d)){var p=r.Vector.magnitude((0,o.multiplyVec)(r.Vector.sub(s,n),c)),f=r.Vector.magnitude((0,o.multiplyVec)(r.Vector.sub(n,s),l)),y=r.Vector.magnitude((0,o.multiplyVec)(c,c)),v=r.Vector.magnitude((0,o.multiplyVec)(l,l));return 0<=p&&p<=y||0<=(f&&f<=v)}if(this.isZero(u)&&!this.isZero(d))return!1;var h=r.Vector.cross(r.Vector.sub(s,n),l)/u,g=r.Vector.cross(r.Vector.sub(s,n),c)/u;return!this.isZero(u)&&0<=h&&h<=1&&0<=g&&g<=1},e.prototype.supportedCommandTypes=function(){return[["L","Z"],["L","Z"]]},e.prototype.isZero=function(e){return Math.abs(e)<1e-10},e}();t.LineLineIntersector=i},8513:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LinePointIntersector=void 0;var n=function(){function e(){}return e.prototype.intersects=function(e,t){var n=e.x,r=e.y,o=e.x0,i=e.y0,s=t.x,a=t.y,c=(a-r)*(o-n)-(s-n)*(i-r);if(Math.abs(c)>1e-10)return!1;var l=(s-n)*(o-n)+(a-r)*(i-r);return!(l<0)&&l<=(o-n)*(o-n)+(i-r)*(i-r)},e.prototype.supportedCommandTypes=function(){return[["L","Z"],["M"]]},e}();t.LinePointIntersector=n},7822:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PointPointIntersector=void 0;var r=n(9842),o=n(1096),i=function(){function e(){}return e.prototype.intersects=function(e,t){var n=r.Vector.create(e.x,e.y),i=r.Vector.create(t.x,t.y);return(0,o.vectorEquals)(n,i)},e.prototype.supportedCommandTypes=function(){return[["M"],["M"]]},e}();t.PointPointIntersector=i},7203:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AggregationNode=void 0;var r=n(7429),o=function(){function e(e,t){this._id=(0,r.v4)(),this._parent=t,this._value=e,this._children=[]}return Object.defineProperty(e.prototype,"id",{get:function(){return this._id},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this._value},enumerable:!1,configurable:!0}),e.prototype.addChild=function(t){var n=new e(t,this);return n._parent=this,this._children.push(n),n},e.prototype.addChildNode=function(e){return e._parent=this,this._children.push(e),e},e.prototype.getChildrenRecursively=function(){var e=new Array(this);return this._children.forEach((function(t){t.getChildrenRecursively().forEach((function(t){e.push(t)}))})),e},e.prototype.getRoot=function(){return void 0===this._parent?this:this._parent.getRoot()},e}();t.AggregationNode=o},3107:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AggregationTree=void 0;var r=n(7203),o=function(){function e(e){this._roots=[],this._aggregationFcn=e}return e.prototype.getAggregatedCommands=function(){return this._roots.map((function(e){return e.getChildrenRecursively().map((function(e){return e.value}))}))},e.prototype.addValue=function(e){var t=this;if(0===this._roots.length)this._roots.push(new r.AggregationNode(e,void 0));else{var n=this.getAllNodes().filter((function(n){return t._aggregationFcn(n.value,e)}));if(0===n.length)this._roots.push(new r.AggregationNode(e,void 0));else{var o=n[0].addChild(e);n.slice(1,n.length).map((function(e){return e.getRoot()})).filter((function(e){return e.id!==o.getRoot().id})).filter((function(e,t,n){return t===n.findIndex((function(t){return t.id===e.id}))})).forEach((function(e){o.addChildNode(e),t._roots.splice(t._roots.indexOf(e),1)}))}}},e.prototype.getAllNodes=function(){return this._roots.flatMap((function(e){return e.getChildrenRecursively()}))},e}();t.AggregationTree=o},2784:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CollisionAggregator=void 0;var r=n(99),o=n(3107),i=n(8513),s=n(961),a=n(1962),c=n(1466),l=n(7822),u=function(){function e(){this._intersectorRegistry=[new r.LineLineIntersector,new i.LinePointIntersector,new s.LineCurveIntersector,new a.CurveCurveIntersector,new c.CurvePointIntersector,new l.PointPointIntersector]}return e.prototype.aggregate=function(e){var t=this,n=e.flatMap((function(e){return e})),r=new o.AggregationTree((function(e,n){return t.intersect(e,n,t._intersectorRegistry)}));return n.forEach((function(e){r.addValue(e)})),r.getAggregatedCommands()},e.prototype.intersect=function(e,t,n){var r=n.find((function(n){var r=n.supportedCommandTypes();return r[0].includes(e.code)&&r[1].includes(t.code)||r[1].includes(e.code)&&r[0].includes(t.code)}));if(void 0===r)throw new Error("intersector not defined for types ".concat(e.code," ").concat(t.code));return r.supportedCommandTypes()[0].includes(e.code)?r.intersects(e,t):r.intersects(t,e)},e}();t.CollisionAggregator=u},6559:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PathAggregator=void 0;var n=function(){function e(){}return e.prototype.aggregate=function(e){return e},e}();t.PathAggregator=n},1446:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AggregatorBuilder=void 0;var r=n(2784),o=n(6559),i=n(9571),s=function(){function e(e){this._svg=e}return e.prototype.useCollisionAggregator=function(){return new i.SimulationBuilder(new r.CollisionAggregator,this._svg)},e.prototype.usePathAggregator=function(){return new i.SimulationBuilder(new o.PathAggregator,this._svg)},e.prototype.useCustomAggregator=function(e){return new i.SimulationBuilder(e,this._svg)},e}();t.AggregatorBuilder=s},9571:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SimulationBuilder=void 0;var r=n(9732),o=n(1623),i=n(8983),s=n(956),a=n(3287),c=n(468),l=n(8662),u=n(8933),d=n(4760),p=n(7453),f=n(9865),y=n(9633),v=function(){function e(e,t){this._aggregator=e,this._svg=t,this._plugins=[]}return e.prototype.withGravity=function(e){return this._plugins.push(new a.GravityPlugin(e)),this},e.prototype.withBorderCollider=function(){return this._plugins.push(new c.ViewColliderBorder),this},e.prototype.withMouseInteraction=function(e){return this._plugins.push(new l.MousePlugin(e)),this},e.prototype.withScrollInteraction=function(e){return this._plugins.push(new p.ScrollPlugin(e)),this},e.prototype.withDebugRenderer=function(){return this._plugins.push(new u.RendererPlugin),this},e.prototype.withCustomPlugin=function(e){return this._plugins.push(e),this},e.prototype.withLimitVelocityPlugin=function(e){return this._plugins.push(new f.LimitVelocityPlugin(e)),this},e.prototype.withLimitAngularVelocityPlugin=function(e){return this._plugins.push(new y.LimitAngularVelocityPlugin(e)),this},e.prototype.startSimulation=function(e){var t=this.createSvgData(),n=new r.MatterJsPhysics(t,e,this._plugins);(new d.ProductionRenderer).renderLoop(t,n)},e.prototype.createSvgData=function(){var e=Array.prototype.slice.call(this._svg.getElementsByTagName("path")).map((function(e){return e.getAttribute("d")})).map((function(e){return(0,i.expandCommands)((0,s.makeAbsolute)((0,s.parseSVG)(e)))})),t=this._aggregator.aggregate(e);return new o.SvgData(this._svg,e,t)},e}();t.SimulationBuilder=v},8983:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Line=t.expandCommands=void 0;var r=n(5545);t.expandCommands=function(e){return e.filter((function(e){return"Z"!==e.code||0!==(0,r.findLengthOfLineCommand)(e)})).map((function(e){switch(e.code){case"H":case"V":return new o(e.x,e.y,e.x0,e.y0);case"A":throw new Error("A not supported yet");default:return e}}))};var o=function(e,t,n,r){this.code="L",this.relative=!1,this.command="lineto",this.x=e,this.y=t,this.x0=n,this.y0=r};t.Line=o},5545:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.findCurvePoints=t.findLengthOfLineCommand=t.findAngleOfLineCommand=t.findCenterOfLineCommand=t.findCenterOfCurveCommand=t.findCenterOfCommand=void 0;var r=n(9842),o=n(1096),i=n(2842);t.findCenterOfCommand=function(e){switch(e.code){case"M":return r.Vector.create(e.x,e.y);case"T":throw new Error("T not supported");case"Z":case"L":return(0,t.findCenterOfLineCommand)(e);case"C":case"Q":case"S":return(0,t.findCenterOfCurveCommand)(e)}},t.findCenterOfCurveCommand=function(e){var n=(0,t.findCurvePoints)(e),o=new i.Bezier(n).get(.5);return r.Vector.create(o.x,o.y)},t.findCenterOfLineCommand=function(e){return(0,o.findCenterOfLine)(r.Vector.create(e.x,e.y),r.Vector.create(e.x0,e.y0))},t.findAngleOfLineCommand=function(e){return(0,o.findAngle)(e.x,e.y,e.x0,e.y0)},t.findLengthOfLineCommand=function(e){return(0,o.findDistanceVec)(r.Vector.create(e.x,e.y),r.Vector.create(e.x0,e.y0))},t.findCurvePoints=function(e){switch(e.code){case"C":return[r.Vector.create(e.x0,e.y0),r.Vector.create(e.x1,e.y1),r.Vector.create(e.x2,e.y2),r.Vector.create(e.x,e.y)];case"Q":return[r.Vector.create(e.x0,e.y0),r.Vector.create(e.x1,e.y1),r.Vector.create(e.x,e.y)];case"S":return[r.Vector.create(e.x0,e.y0),r.Vector.create(e.x2,e.y2),r.Vector.create(e.x,e.y)];case"T":throw new Error("T not defined")}}},1096:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.rotatePointAroundCenterPoint=t.findAngle=t.vectorEquals=t.multiplyVec=t.length=t.findCenterOfLine=t.findDistanceVec=t.findDistance=void 0;var r=n(9842);t.findDistance=function(e,t,n,r){return Math.sqrt(Math.pow(e-n,2)+Math.pow(t-r,2))},t.findDistanceVec=function(e,n){return(0,t.findDistance)(e.x,e.y,n.x,n.y)},t.findCenterOfLine=function(e,t){return r.Vector.create((e.x+t.x)/2,(e.y+t.y)/2)},t.length=function(e){return Math.sqrt(Math.pow(e.x,2)+Math.pow(e.y,2))},t.multiplyVec=function(e,t){return r.Vector.create(e.x*t.x,e.y*t.y)},t.vectorEquals=function(e,t){return e.x===t.x&&e.y===t.y},t.findAngle=function(e,t,n,r){var o,i=e-n,s=t-r;return(o=i||s?Math.atan2(s,i)-Math.PI:0)<0&&(o+=2*Math.PI),o},t.rotatePointAroundCenterPoint=function(e,t,n,r,o){var i=Math.cos(o),s=Math.sin(o);return{x:i*(n-e)+s*(r-t)+e,y:i*(r-t)-s*(n-e)+t}}},1623:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SvgData=void 0;var n=function(){function e(e,t,n){this._svg=e,this._strokeWidth=15,this._width=e.clientWidth,this._height=e.clientHeight,this._pathCommands=t,this._aggregatedCommands=n;var r=e.getAttribute("viewBox");if(null!==r){var o=r.split(/[ ,]/).filter(Boolean).map(Number);this._viewBox={minx:o[0],miny:o[1],width:o[2],height:o[3]}}}return Object.defineProperty(e.prototype,"pathCommands",{get:function(){return this._pathCommands},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"aggregatedCommands",{get:function(){return this._aggregatedCommands},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"svg",{get:function(){return this._svg},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"width",{get:function(){return this._width},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this._height},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"viewBox",{get:function(){return this._viewBox},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"relativeStrokeWidth",{get:function(){return this._strokeWidth},enumerable:!1,configurable:!0}),e}();t.SvgData=n},8804:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractCurveBody=void 0;var r=n(2842),o=n(9842),i=n(1096),s=n(5545),a=function(){function e(){}return e.prototype.createPoints=function(e,t){var n=1/t;return Array.from(Array(t+1).keys()).map((function(t){return e.get(t*n)}))},e.prototype.createInnerBodies=function(e,t){var n=(0,s.findCurvePoints)(t),a=this.createPoints(new r.Bezier(n),3);return a.filter((function(e,t){return t<a.length-1})).map((function(t,n){var r=o.Vector.create(t.x,t.y),s=o.Vector.create(a[n+1].x,a[n+1].y),c=(o.Vector.normalise(o.Vector.sub(s,r)),o.Vector.create((r.x+s.x)/2,(r.y+s.y)/2)),l=(0,i.findDistanceVec)(s,r);return o.Bodies.rectangle(c.x,c.y,l,e,{angle:(0,i.findAngle)(s.x,s.y,r.x,r.y)})}))},e}();t.AbstractCurveBody=a},3545:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.physBodyFactory=void 0;var r=n(6645),o=n(9295),i=n(1945),s=n(9595),a=n(5e3),c=n(8872);t.physBodyFactory=function(e,t){switch(e.code){case"L":return new r.LineBody(e,t);case"M":return new o.PointBody(e);case"C":return new i.CurveBody(e,t);case"Q":return new a.QuadraticCurveBody(e,t);case"S":return new s.ReflectionCurveBody(e,t);case"T":throw new Error("T not supported yet!");case"Z":return new c.ClosePathBody(e)}}},8872:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ClosePathBody=void 0;var r=n(9842),o=n(5545),i=n(1096),s=function(){function e(e){this._closeCmd=e;var t=r.Vector.create(e.x,e.y),n=r.Vector.create(e.x0,e.y0);if((0,i.vectorEquals)(t,n))this._bodies=[];else{var s=(0,o.findCenterOfLineCommand)(e),a=(0,o.findLengthOfLineCommand)(e),c=(0,o.findAngleOfLineCommand)(e),l=r.Bodies.rectangle(s.x,s.y,a,5,{angle:c});this._bodies=[l]}}return Object.defineProperty(e.prototype,"bodies",{get:function(){return this._bodies},enumerable:!1,configurable:!0}),e.prototype.updateSvgCommand=function(){},e}();t.ClosePathBody=s},1945:function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.CurveBody=void 0;var i=n(9842),s=function(e){function t(t,n){var r=e.call(this)||this;return r._curve=t,r._bodies=r.createInnerBodies(n,t),r._point1=i.Bodies.circle(t.x,t.y,1,{isSensor:!0,render:{fillStyle:"lightblue"}}),i.Body.setDensity(r._point1,0),r._bodies.push(r._point1),r._point2=i.Bodies.circle(t.x1,t.y1,1,{isSensor:!0,render:{fillStyle:"lightblue"}}),i.Body.setDensity(r._point2,0),r._bodies.push(r._point2),r._point3=i.Bodies.circle(t.x2,t.y2,1,{isSensor:!0,render:{fillStyle:"lightblue"}}),i.Body.setDensity(r._point3,0),r._bodies.push(r._point3),r}return o(t,e),Object.defineProperty(t.prototype,"bodies",{get:function(){return this._bodies},enumerable:!1,configurable:!0}),t.prototype.updateSvgCommand=function(){this._curve.x=this._point1.position.x,this._curve.y=this._point1.position.y,this._curve.x1=this._point2.position.x,this._curve.y1=this._point2.position.y,this._curve.x2=this._point3.position.x,this._curve.y2=this._point3.position.y},t}(n(8804).AbstractCurveBody);t.CurveBody=s},6645:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LineBody=void 0;var r=n(9842),o=n(5545),i=function(){function e(e,t){this._lineCmd=e;var n=(0,o.findCenterOfLineCommand)(e),i=(0,o.findLengthOfLineCommand)(e),s=(0,o.findAngleOfLineCommand)(e);r.Vector.create(e.x,e.y),r.Vector.create(e.x0,e.y0),this._point=r.Bodies.circle(e.x,e.y,1,{isSensor:!0}),r.Body.setDensity(this._point,0),this._body=r.Bodies.rectangle(n.x,n.y,i,t,{angle:s}),this._bodies=[this._point,this._body]}return Object.defineProperty(e.prototype,"bodies",{get:function(){return this._bodies},enumerable:!1,configurable:!0}),e.prototype.updateSvgCommand=function(){this._lineCmd.x=this._point.position.x,this._lineCmd.y=this._point.position.y},e}();t.LineBody=i},9295:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PointBody=void 0;var r=n(9842),o=function(){function e(e){this._moveCmd=e,this._point=r.Bodies.circle(e.x,e.y,1,{render:{fillStyle:"white"},isSensor:!0}),r.Body.setDensity(this._point,0),this._bodies=[this._point]}return Object.defineProperty(e.prototype,"bodies",{get:function(){return this._bodies},enumerable:!1,configurable:!0}),e.prototype.updateSvgCommand=function(){this._moveCmd.x=this._point.position.x,this._moveCmd.y=this._point.position.y},e}();t.PointBody=o},5e3:function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.QuadraticCurveBody=void 0;var i=n(8804),s=n(9842),a=function(e){function t(t,n){var r=e.call(this)||this;return r._curve=t,r._bodies=r.createInnerBodies(n,t),r._point1=s.Bodies.circle(t.x,t.y,1,{isSensor:!0,render:{fillStyle:"lightblue"}}),s.Body.setDensity(r._point1,0),r._bodies.push(r._point1),r._point2=s.Bodies.circle(t.x1,t.y1,1,{isSensor:!0,render:{fillStyle:"lightblue"}}),s.Body.setDensity(r._point2,0),r._bodies.push(r._point2),r}return o(t,e),Object.defineProperty(t.prototype,"bodies",{get:function(){return this._bodies},enumerable:!1,configurable:!0}),t.prototype.updateSvgCommand=function(){this._curve.x=this._point1.position.x,this._curve.y=this._point1.position.y,this._curve.x1=this._point2.position.x,this._curve.y1=this._point2.position.y},t}(i.AbstractCurveBody);t.QuadraticCurveBody=a},9595:function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.ReflectionCurveBody=void 0;var i=n(9842),s=function(e){function t(t,n){var r=e.call(this)||this;return r._curve=t,r._bodies=r.createInnerBodies(n,t),r._point1=i.Bodies.circle(t.x,t.y,1,{isSensor:!0,render:{fillStyle:"lightblue"}}),i.Body.setDensity(r._point1,0),r._bodies.push(r._point1),r._point3=i.Bodies.circle(t.x2,t.y2,1,{isSensor:!0,render:{fillStyle:"lightblue"}}),i.Body.setDensity(r._point3,0),r._bodies.push(r._point3),r}return o(t,e),Object.defineProperty(t.prototype,"bodies",{get:function(){return this._bodies},enumerable:!1,configurable:!0}),t.prototype.updateSvgCommand=function(){this._curve.x=this._point1.position.x,this._curve.y=this._point1.position.y,this._curve.x2=this._point3.position.x,this._curve.y2=this._point3.position.y},t}(n(8804).AbstractCurveBody);t.ReflectionCurveBody=s},9732:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MatterJsPhysics=void 0;var r=n(9842),o=n(9842),i=n(5545),s=n(3545),a=r.Engine,c=(r.Runner,r.Bodies),l=function(){function e(e,t,n){var r=this;this._svgData=e,this._engine=a.create(),this._world=this._engine.world,this._commandBodies=[];var l=[];e.aggregatedCommands.forEach((function(e){var n=e.map((function(e){return(0,i.findCenterOfCommand)(e).x})).reduce((function(e,t){return e+t}))/e.length,a=e.map((function(e){return(0,i.findCenterOfCommand)(e).y})).reduce((function(e,t){return e+t}))/e.length,u=c.circle(n,a,3e3,t),d=e.map((function(e){return(0,s.physBodyFactory)(e,t.colliderWidth)}));r._commandBodies=r._commandBodies.concat(d);var p=d.map((function(e){return e.bodies})).flatMap((function(e){return e}));o.Body.setParts(u,p,!1),o.World.add(r._world,u),l.push(u)})),n.forEach((function(t){return t.setup(e,r._engine,l)}))}return e.prototype.update=function(e){a.update(this._engine),this._commandBodies.forEach((function(e){return e.updateSvgCommand()}))},e}();t.MatterJsPhysics=l},3287:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GravityPlugin=void 0;var n=function(){function e(e){this._gravity=e}return e.prototype.setup=function(e,t,n){t.gravity.x=this._gravity.x,t.gravity.y=this._gravity.y},e}();t.GravityPlugin=n},9633:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LimitAngularVelocityPlugin=void 0;var r=n(9842),o=function(){function e(e){this._maxSpeed=e}return e.prototype.setup=function(e,t,n){var o=this;r.Events.on(t,"beforeUpdate",(function(){n.forEach((function(e){e.angularVelocity>o._maxSpeed&&r.Body.setAngularVelocity(e,o._maxSpeed),e.angularVelocity<-o._maxSpeed&&r.Body.setAngularVelocity(e,-o._maxSpeed)}))}))},e}();t.LimitAngularVelocityPlugin=o},9865:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LimitVelocityPlugin=void 0;var r=n(9842),o=function(){function e(e){this._maxSpeed=e}return e.prototype.setup=function(e,t,n){var o=this;r.Events.on(t,"beforeUpdate",(function(){n.forEach((function(e){e.velocity.x>o._maxSpeed&&r.Body.setVelocity(e,{x:o._maxSpeed,y:e.velocity.y}),e.velocity.x<-o._maxSpeed&&r.Body.setVelocity(e,{x:-o._maxSpeed,y:e.velocity.y}),e.velocity.y>o._maxSpeed&&r.Body.setVelocity(e,{x:e.velocity.x,y:o._maxSpeed}),e.velocity.y<-o._maxSpeed&&r.Body.setVelocity(e,{x:-e.velocity.x,y:-o._maxSpeed})}))}))},e}();t.LimitVelocityPlugin=o},8662:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MousePlugin=void 0;var r=n(9842),o=function(){function e(e){this._mouseForce=e}return e.prototype.setup=function(e,t,n){var o=this,i=t.world;e.svg.addEventListener("mousemove",(function(e){o._mousePos=r.Vector.create(e.offsetX,e.offsetY)})),r.Events.on(t,"afterUpdate",(function(){void 0!==o._previousMousePos&&void 0!==o._mousePos&&r.Query.point(r.Composite.allBodies(i),o._mousePos).forEach((function(e){var t=r.Vector.normalise(r.Vector.sub(o._mousePos,o._previousMousePos));r.Body.applyForce(e,o._mousePos,r.Vector.mult(t,o._mouseForce))})),o._previousMousePos=o._mousePos}))},e}();t.MousePlugin=o},8933:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RendererPlugin=void 0;var r=n(9842),o=function(){function e(){}return e.prototype.setup=function(e,t,n){var o=r.Render.create({element:document.body,engine:t,options:{wireframes:!0,width:e.width,height:e.height,showAngleIndicator:!1}});r.Render.run(o)},e}();t.RendererPlugin=o},7453:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ScrollPlugin=void 0;var r=n(9842),o=function(){function e(e){this._force=e}return e.prototype.setup=function(e,t,n){var o=this,i=t.world;window.onscroll=function(e){o._scrollPos=r.Vector.create(window.scrollX,window.scrollY)},r.Events.on(t,"afterUpdate",(function(){void 0!==o._scrollPos&&void 0!==o._previousScrollPos&&r.Composite.allBodies(i).forEach((function(e){var t=r.Vector.normalise(r.Vector.sub(o._scrollPos,o._previousScrollPos));r.Body.applyForce(e,e.position,r.Vector.mult(t,o._force))})),o._previousScrollPos=o._scrollPos}))},e}();t.ScrollPlugin=o},468:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ViewColliderBorder=void 0;var r=n(9842),o=function(){function e(){}return e.prototype.setup=function(e,t,n){var o=t.world,i=e.width,s=e.height,a=0,c=0,l=100;if(void 0!==e.viewBox){var u=e.viewBox.width,d=e.viewBox.height,p=u<d?d/u:u/d,f=i<s?s/i:i/s;i<s?u<d?(s=d*(1/f)*p,i=u):(s=d*f*p,i=u):u<d?(i=u*f*p,s=d):(i=u*(1/f)*p,s=d),a=e.viewBox.minx-(i-u)/2,c=e.viewBox.miny-(s-d)/2}var y=r.Bodies.rectangle(i/2+a,s+50+c,i,l,{isStatic:!0});r.World.add(o,y);var v=r.Bodies.rectangle(i/2+a,-50+c,i,l,{isStatic:!0});r.World.add(o,v);var h=r.Bodies.rectangle(-50+a,s/2+c,l,s,{isStatic:!0});r.World.add(o,h);var g=r.Bodies.rectangle(i+50+a,s/2+c,l,s,{isStatic:!0});r.World.add(o,g)},e}();t.ViewColliderBorder=o},4760:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ProductionRenderer=void 0;var r=n(3947),o=function(){function e(){}return e.prototype.renderLoop=function(e,t){var n=Array.prototype.slice.call(e.svg.getElementsByTagName("path"));this.updateFrame(e,t,n)},e.prototype.updateFrame=function(e,t,n){var o=this;t.update(e.aggregatedCommands),e.pathCommands.forEach((function(e,t){var o=e.map(r.serializeCommand).join(" ");n[t].setAttribute("d",o)})),window.requestAnimationFrame((function(r){return o.updateFrame(e,t,n)}))},e}();t.ProductionRenderer=o},3947:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.serializeCommand=void 0,t.serializeCommand=function(e){switch(e.code){case"M":var t=e;return"M ".concat(t.x.toFixed(2)," ").concat(t.y.toFixed(2));case"L":var n=e;return"L ".concat(n.x.toFixed(2)," ").concat(n.y.toFixed(2));case"Z":return"Z";case"C":return"C ".concat((r=e).x1.toFixed(2)," ").concat(r.y1.toFixed(2)," ").concat(r.x2.toFixed(2)," ").concat(r.y2.toFixed(2),"  ").concat(r.x.toFixed(2)," ").concat(r.y.toFixed(2));case"S":return"S ".concat((r=e).x2.toFixed(2)," ").concat(r.y2.toFixed(2),"  ").concat(r.x.toFixed(2)," ").concat(r.y.toFixed(2));case"Q":var r;return"Q ".concat((r=e).x1.toFixed(2)," ").concat(r.y1.toFixed(2)," ").concat(r.x.toFixed(2)," ").concat(r.y.toFixed(2));default:throw new Error("no serializer found for ".concat(e.code))}}},7429:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"NIL",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(t,"parse",{enumerable:!0,get:function(){return d.default}}),Object.defineProperty(t,"stringify",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(t,"v1",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(t,"v3",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"v4",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(t,"v5",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(t,"validate",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(t,"version",{enumerable:!0,get:function(){return c.default}});var r=p(n(3990)),o=p(n(8237)),i=p(n(5355)),s=p(n(3764)),a=p(n(6314)),c=p(n(8464)),l=p(n(6435)),u=p(n(4008)),d=p(n(8222));function p(e){return e&&e.__esModule?e:{default:e}}},4163:(e,t)=>{"use strict";function n(e){return 14+(e+64>>>9<<4)+1}function r(e,t){const n=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(n>>16)<<16|65535&n}function o(e,t,n,o,i,s){return r((a=r(r(t,e),r(o,s)))<<(c=i)|a>>>32-c,n);var a,c}function i(e,t,n,r,i,s,a){return o(t&n|~t&r,e,t,i,s,a)}function s(e,t,n,r,i,s,a){return o(t&r|n&~r,e,t,i,s,a)}function a(e,t,n,r,i,s,a){return o(t^n^r,e,t,i,s,a)}function c(e,t,n,r,i,s,a){return o(n^(t|~r),e,t,i,s,a)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=function(e){if("string"==typeof e){const t=unescape(encodeURIComponent(e));e=new Uint8Array(t.length);for(let n=0;n<t.length;++n)e[n]=t.charCodeAt(n)}return function(e){const t=[],n=32*e.length,r="0123456789abcdef";for(let o=0;o<n;o+=8){const n=e[o>>5]>>>o%32&255,i=parseInt(r.charAt(n>>>4&15)+r.charAt(15&n),16);t.push(i)}return t}(function(e,t){e[t>>5]|=128<<t%32,e[n(t)-1]=t;let o=1732584193,l=-271733879,u=-1732584194,d=271733878;for(let t=0;t<e.length;t+=16){const n=o,p=l,f=u,y=d;o=i(o,l,u,d,e[t],7,-680876936),d=i(d,o,l,u,e[t+1],12,-389564586),u=i(u,d,o,l,e[t+2],17,606105819),l=i(l,u,d,o,e[t+3],22,-1044525330),o=i(o,l,u,d,e[t+4],7,-176418897),d=i(d,o,l,u,e[t+5],12,1200080426),u=i(u,d,o,l,e[t+6],17,-1473231341),l=i(l,u,d,o,e[t+7],22,-45705983),o=i(o,l,u,d,e[t+8],7,1770035416),d=i(d,o,l,u,e[t+9],12,-1958414417),u=i(u,d,o,l,e[t+10],17,-42063),l=i(l,u,d,o,e[t+11],22,-1990404162),o=i(o,l,u,d,e[t+12],7,1804603682),d=i(d,o,l,u,e[t+13],12,-40341101),u=i(u,d,o,l,e[t+14],17,-1502002290),l=i(l,u,d,o,e[t+15],22,1236535329),o=s(o,l,u,d,e[t+1],5,-165796510),d=s(d,o,l,u,e[t+6],9,-1069501632),u=s(u,d,o,l,e[t+11],14,643717713),l=s(l,u,d,o,e[t],20,-373897302),o=s(o,l,u,d,e[t+5],5,-701558691),d=s(d,o,l,u,e[t+10],9,38016083),u=s(u,d,o,l,e[t+15],14,-660478335),l=s(l,u,d,o,e[t+4],20,-405537848),o=s(o,l,u,d,e[t+9],5,568446438),d=s(d,o,l,u,e[t+14],9,-1019803690),u=s(u,d,o,l,e[t+3],14,-187363961),l=s(l,u,d,o,e[t+8],20,1163531501),o=s(o,l,u,d,e[t+13],5,-1444681467),d=s(d,o,l,u,e[t+2],9,-51403784),u=s(u,d,o,l,e[t+7],14,1735328473),l=s(l,u,d,o,e[t+12],20,-1926607734),o=a(o,l,u,d,e[t+5],4,-378558),d=a(d,o,l,u,e[t+8],11,-2022574463),u=a(u,d,o,l,e[t+11],16,1839030562),l=a(l,u,d,o,e[t+14],23,-35309556),o=a(o,l,u,d,e[t+1],4,-1530992060),d=a(d,o,l,u,e[t+4],11,1272893353),u=a(u,d,o,l,e[t+7],16,-155497632),l=a(l,u,d,o,e[t+10],23,-1094730640),o=a(o,l,u,d,e[t+13],4,681279174),d=a(d,o,l,u,e[t],11,-358537222),u=a(u,d,o,l,e[t+3],16,-722521979),l=a(l,u,d,o,e[t+6],23,76029189),o=a(o,l,u,d,e[t+9],4,-640364487),d=a(d,o,l,u,e[t+12],11,-421815835),u=a(u,d,o,l,e[t+15],16,530742520),l=a(l,u,d,o,e[t+2],23,-995338651),o=c(o,l,u,d,e[t],6,-198630844),d=c(d,o,l,u,e[t+7],10,1126891415),u=c(u,d,o,l,e[t+14],15,-1416354905),l=c(l,u,d,o,e[t+5],21,-57434055),o=c(o,l,u,d,e[t+12],6,1700485571),d=c(d,o,l,u,e[t+3],10,-1894986606),u=c(u,d,o,l,e[t+10],15,-1051523),l=c(l,u,d,o,e[t+1],21,-2054922799),o=c(o,l,u,d,e[t+8],6,1873313359),d=c(d,o,l,u,e[t+15],10,-30611744),u=c(u,d,o,l,e[t+6],15,-1560198380),l=c(l,u,d,o,e[t+13],21,1309151649),o=c(o,l,u,d,e[t+4],6,-145523070),d=c(d,o,l,u,e[t+11],10,-1120210379),u=c(u,d,o,l,e[t+2],15,718787259),l=c(l,u,d,o,e[t+9],21,-343485551),o=r(o,n),l=r(l,p),u=r(u,f),d=r(d,y)}return[o,l,u,d]}(function(e){if(0===e.length)return[];const t=8*e.length,r=new Uint32Array(n(t));for(let n=0;n<t;n+=8)r[n>>5]|=(255&e[n/8])<<n%32;return r}(e),8*e.length))}},4790:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};t.default=n},6314:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.default="00000000-0000-0000-0000-000000000000"},8222:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=(r=n(6435))&&r.__esModule?r:{default:r};t.default=function(e){if(!(0,o.default)(e))throw TypeError("Invalid UUID");let t;const n=new Uint8Array(16);return n[0]=(t=parseInt(e.slice(0,8),16))>>>24,n[1]=t>>>16&255,n[2]=t>>>8&255,n[3]=255&t,n[4]=(t=parseInt(e.slice(9,13),16))>>>8,n[5]=255&t,n[6]=(t=parseInt(e.slice(14,18),16))>>>8,n[7]=255&t,n[8]=(t=parseInt(e.slice(19,23),16))>>>8,n[9]=255&t,n[10]=(t=parseInt(e.slice(24,36),16))/1099511627776&255,n[11]=t/4294967296&255,n[12]=t>>>24&255,n[13]=t>>>16&255,n[14]=t>>>8&255,n[15]=255&t,n}},58:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.default=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i},3319:(e,t)=>{"use strict";let n;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){if(!n&&(n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!n))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return n(r)};const r=new Uint8Array(16)},3757:(e,t)=>{"use strict";function n(e,t,n,r){switch(e){case 0:return t&n^~t&r;case 1:case 3:return t^n^r;case 2:return t&n^t&r^n&r}}function r(e,t){return e<<t|e>>>32-t}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=function(e){const t=[1518500249,1859775393,2400959708,3395469782],o=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof e){const t=unescape(encodeURIComponent(e));e=[];for(let n=0;n<t.length;++n)e.push(t.charCodeAt(n))}else Array.isArray(e)||(e=Array.prototype.slice.call(e));e.push(128);const i=e.length/4+2,s=Math.ceil(i/16),a=new Array(s);for(let t=0;t<s;++t){const n=new Uint32Array(16);for(let r=0;r<16;++r)n[r]=e[64*t+4*r]<<24|e[64*t+4*r+1]<<16|e[64*t+4*r+2]<<8|e[64*t+4*r+3];a[t]=n}a[s-1][14]=8*(e.length-1)/Math.pow(2,32),a[s-1][14]=Math.floor(a[s-1][14]),a[s-1][15]=8*(e.length-1)&4294967295;for(let e=0;e<s;++e){const i=new Uint32Array(80);for(let t=0;t<16;++t)i[t]=a[e][t];for(let e=16;e<80;++e)i[e]=r(i[e-3]^i[e-8]^i[e-14]^i[e-16],1);let s=o[0],c=o[1],l=o[2],u=o[3],d=o[4];for(let e=0;e<80;++e){const o=Math.floor(e/20),a=r(s,5)+n(o,c,l,u)+d+t[o]+i[e]>>>0;d=u,u=l,l=r(c,30)>>>0,c=s,s=a}o[0]=o[0]+s>>>0,o[1]=o[1]+c>>>0,o[2]=o[2]+l>>>0,o[3]=o[3]+u>>>0,o[4]=o[4]+d>>>0}return[o[0]>>24&255,o[0]>>16&255,o[0]>>8&255,255&o[0],o[1]>>24&255,o[1]>>16&255,o[1]>>8&255,255&o[1],o[2]>>24&255,o[2]>>16&255,o[2]>>8&255,255&o[2],o[3]>>24&255,o[3]>>16&255,o[3]>>8&255,255&o[3],o[4]>>24&255,o[4]>>16&255,o[4]>>8&255,255&o[4]]}},4008:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.unsafeStringify=s;var r,o=(r=n(6435))&&r.__esModule?r:{default:r};const i=[];for(let e=0;e<256;++e)i.push((e+256).toString(16).slice(1));function s(e,t=0){return(i[e[t+0]]+i[e[t+1]]+i[e[t+2]]+i[e[t+3]]+"-"+i[e[t+4]]+i[e[t+5]]+"-"+i[e[t+6]]+i[e[t+7]]+"-"+i[e[t+8]]+i[e[t+9]]+"-"+i[e[t+10]]+i[e[t+11]]+i[e[t+12]]+i[e[t+13]]+i[e[t+14]]+i[e[t+15]]).toLowerCase()}t.default=function(e,t=0){const n=s(e,t);if(!(0,o.default)(n))throw TypeError("Stringified UUID is invalid");return n}},3990:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=(r=n(3319))&&r.__esModule?r:{default:r},i=n(4008);let s,a,c=0,l=0;t.default=function(e,t,n){let r=t&&n||0;const u=t||new Array(16);let d=(e=e||{}).node||s,p=void 0!==e.clockseq?e.clockseq:a;if(null==d||null==p){const t=e.random||(e.rng||o.default)();null==d&&(d=s=[1|t[0],t[1],t[2],t[3],t[4],t[5]]),null==p&&(p=a=16383&(t[6]<<8|t[7]))}let f=void 0!==e.msecs?e.msecs:Date.now(),y=void 0!==e.nsecs?e.nsecs:l+1;const v=f-c+(y-l)/1e4;if(v<0&&void 0===e.clockseq&&(p=p+1&16383),(v<0||f>c)&&void 0===e.nsecs&&(y=0),y>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");c=f,l=y,a=p,f+=122192928e5;const h=(1e4*(268435455&f)+y)%4294967296;u[r++]=h>>>24&255,u[r++]=h>>>16&255,u[r++]=h>>>8&255,u[r++]=255&h;const g=f/4294967296*1e4&268435455;u[r++]=g>>>8&255,u[r++]=255&g,u[r++]=g>>>24&15|16,u[r++]=g>>>16&255,u[r++]=p>>>8|128,u[r++]=255&p;for(let e=0;e<6;++e)u[r+e]=d[e];return t||(0,i.unsafeStringify)(u)}},8237:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n(7925)),o=i(n(4163));function i(e){return e&&e.__esModule?e:{default:e}}var s=(0,r.default)("v3",48,o.default);t.default=s},7925:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=void 0,t.default=function(e,t,n){function r(e,r,s,a){var c;if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));const t=[];for(let n=0;n<e.length;++n)t.push(e.charCodeAt(n));return t}(e)),"string"==typeof r&&(r=(0,i.default)(r)),16!==(null===(c=r)||void 0===c?void 0:c.length))throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");let l=new Uint8Array(16+e.length);if(l.set(r),l.set(e,r.length),l=n(l),l[6]=15&l[6]|t,l[8]=63&l[8]|128,s){a=a||0;for(let e=0;e<16;++e)s[a+e]=l[e];return s}return(0,o.unsafeStringify)(l)}try{r.name=e}catch(e){}return r.DNS=s,r.URL=a,r};var r,o=n(4008),i=(r=n(8222))&&r.__esModule?r:{default:r};const s="6ba7b810-9dad-11d1-80b4-00c04fd430c8";t.DNS=s;const a="6ba7b811-9dad-11d1-80b4-00c04fd430c8";t.URL=a},5355:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=s(n(4790)),o=s(n(3319)),i=n(4008);function s(e){return e&&e.__esModule?e:{default:e}}t.default=function(e,t,n){if(r.default.randomUUID&&!t&&!e)return r.default.randomUUID();const s=(e=e||{}).random||(e.rng||o.default)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,t){n=n||0;for(let e=0;e<16;++e)t[n+e]=s[e];return t}return(0,i.unsafeStringify)(s)}},3764:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n(7925)),o=i(n(3757));function i(e){return e&&e.__esModule?e:{default:e}}var s=(0,r.default)("v5",80,o.default);t.default=s},6435:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=(r=n(58))&&r.__esModule?r:{default:r};t.default=function(e){return"string"==typeof e&&o.default.test(e)}},8464:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=(r=n(6435))&&r.__esModule?r:{default:r};t.default=function(e){if(!(0,o.default)(e))throw TypeError("Invalid UUID");return parseInt(e.slice(14,15),16)}},2842:(e,n,r)=>{"use strict";r.r(n),r.d(n,{Bezier:()=>B});const{abs:o,cos:i,sin:s,acos:a,atan2:c,sqrt:l,pow:u}=Math;function d(e){return e<0?-u(-e,1/3):u(e,1/3)}const p=Math.PI,f=2*p,y=p/2,v=Number.MAX_SAFE_INTEGER||9007199254740991,h=Number.MIN_SAFE_INTEGER||-9007199254740991,g={x:0,y:0,z:0},m={Tvalues:[-.06405689286260563,.06405689286260563,-.1911188674736163,.1911188674736163,-.3150426796961634,.3150426796961634,-.4337935076260451,.4337935076260451,-.5454214713888396,.5454214713888396,-.6480936519369755,.6480936519369755,-.7401241915785544,.7401241915785544,-.820001985973903,.820001985973903,-.8864155270044011,.8864155270044011,-.9382745520027328,.9382745520027328,-.9747285559713095,.9747285559713095,-.9951872199970213,.9951872199970213],Cvalues:[.12793819534675216,.12793819534675216,.1258374563468283,.1258374563468283,.12167047292780339,.12167047292780339,.1155056680537256,.1155056680537256,.10744427011596563,.10744427011596563,.09761865210411388,.09761865210411388,.08619016153195327,.08619016153195327,.0733464814110803,.0733464814110803,.05929858491543678,.05929858491543678,.04427743881741981,.04427743881741981,.028531388628933663,.028531388628933663,.0123412297999872,.0123412297999872],arcfn:function(e,t){const n=t(e);let r=n.x*n.x+n.y*n.y;return void 0!==n.z&&(r+=n.z*n.z),l(r)},compute:function(e,t,n){if(0===e)return t[0].t=0,t[0];const r=t.length-1;if(1===e)return t[r].t=1,t[r];const o=1-e;let i=t;if(0===r)return t[0].t=e,t[0];if(1===r){const t={x:o*i[0].x+e*i[1].x,y:o*i[0].y+e*i[1].y,t:e};return n&&(t.z=o*i[0].z+e*i[1].z),t}if(r<4){let t,s,a,c=o*o,l=e*e,u=0;2===r?(i=[i[0],i[1],i[2],g],t=c,s=o*e*2,a=l):3===r&&(t=c*o,s=c*e*3,a=o*l*3,u=e*l);const d={x:t*i[0].x+s*i[1].x+a*i[2].x+u*i[3].x,y:t*i[0].y+s*i[1].y+a*i[2].y+u*i[3].y,t:e};return n&&(d.z=t*i[0].z+s*i[1].z+a*i[2].z+u*i[3].z),d}const s=JSON.parse(JSON.stringify(t));for(;s.length>1;){for(let t=0;t<s.length-1;t++)s[t]={x:s[t].x+(s[t+1].x-s[t].x)*e,y:s[t].y+(s[t+1].y-s[t].y)*e},void 0!==s[t].z&&(s[t]=s[t].z+(s[t+1].z-s[t].z)*e);s.splice(s.length-1,1)}return s[0].t=e,s[0]},computeWithRatios:function(e,t,n,r){const o=1-e,i=n,s=t;let a,c=i[0],l=i[1],u=i[2],d=i[3];return c*=o,l*=e,2===s.length?(a=c+l,{x:(c*s[0].x+l*s[1].x)/a,y:(c*s[0].y+l*s[1].y)/a,z:!!r&&(c*s[0].z+l*s[1].z)/a,t:e}):(c*=o,l*=2*o,u*=e*e,3===s.length?(a=c+l+u,{x:(c*s[0].x+l*s[1].x+u*s[2].x)/a,y:(c*s[0].y+l*s[1].y+u*s[2].y)/a,z:!!r&&(c*s[0].z+l*s[1].z+u*s[2].z)/a,t:e}):(c*=o,l*=1.5*o,u*=3*o,d*=e*e*e,4===s.length?(a=c+l+u+d,{x:(c*s[0].x+l*s[1].x+u*s[2].x+d*s[3].x)/a,y:(c*s[0].y+l*s[1].y+u*s[2].y+d*s[3].y)/a,z:!!r&&(c*s[0].z+l*s[1].z+u*s[2].z+d*s[3].z)/a,t:e}):void 0))},derive:function(e,t){const n=[];for(let r=e,o=r.length,i=o-1;o>1;o--,i--){const e=[];for(let n,o=0;o<i;o++)n={x:i*(r[o+1].x-r[o].x),y:i*(r[o+1].y-r[o].y)},t&&(n.z=i*(r[o+1].z-r[o].z)),e.push(n);n.push(e),r=e}return n},between:function(e,t,n){return t<=e&&e<=n||m.approximately(e,t)||m.approximately(e,n)},approximately:function(e,t,n){return o(e-t)<=(n||1e-6)},length:function(e){const t=m.Tvalues.length;let n=0;for(let r,o=0;o<t;o++)r=.5*m.Tvalues[o]+.5,n+=m.Cvalues[o]*m.arcfn(r,e);return.5*n},map:function(e,t,n,r,o){return r+(e-t)/(n-t)*(o-r)},lerp:function(e,t,n){const r={x:t.x+e*(n.x-t.x),y:t.y+e*(n.y-t.y)};return void 0!==t.z&&void 0!==n.z&&(r.z=t.z+e*(n.z-t.z)),r},pointToString:function(e){let t=e.x+"/"+e.y;return void 0!==e.z&&(t+="/"+e.z),t},pointsToString:function(e){return"["+e.map(m.pointToString).join(", ")+"]"},copy:function(e){return JSON.parse(JSON.stringify(e))},angle:function(e,t,n){const r=t.x-e.x,o=t.y-e.y,i=n.x-e.x,s=n.y-e.y;return c(r*s-o*i,r*i+o*s)},round:function(e,t){const n=""+e,r=n.indexOf(".");return parseFloat(n.substring(0,r+1+t))},dist:function(e,t){const n=e.x-t.x,r=e.y-t.y;return l(n*n+r*r)},closest:function(e,t){let n,r,o=u(2,63);return e.forEach((function(e,i){r=m.dist(t,e),r<o&&(o=r,n=i)})),{mdist:o,mpos:n}},abcratio:function(e,t){if(2!==t&&3!==t)return!1;if(void 0===e)e=.5;else if(0===e||1===e)return e;const n=u(e,t)+u(1-e,t);return o((n-1)/n)},projectionratio:function(e,t){if(2!==t&&3!==t)return!1;if(void 0===e)e=.5;else if(0===e||1===e)return e;const n=u(1-e,t);return n/(u(e,t)+n)},lli8:function(e,t,n,r,o,i,s,a){const c=(e-n)*(i-a)-(t-r)*(o-s);return 0!=c&&{x:((e*r-t*n)*(o-s)-(e-n)*(o*a-i*s))/c,y:((e*r-t*n)*(i-a)-(t-r)*(o*a-i*s))/c}},lli4:function(e,t,n,r){const o=e.x,i=e.y,s=t.x,a=t.y,c=n.x,l=n.y,u=r.x,d=r.y;return m.lli8(o,i,s,a,c,l,u,d)},lli:function(e,t){return m.lli4(e,e.c,t,t.c)},makeline:function(e,t){return new B(e.x,e.y,(e.x+t.x)/2,(e.y+t.y)/2,t.x,t.y)},findbbox:function(e){let t=v,n=v,r=h,o=h;return e.forEach((function(e){const i=e.bbox();t>i.x.min&&(t=i.x.min),n>i.y.min&&(n=i.y.min),r<i.x.max&&(r=i.x.max),o<i.y.max&&(o=i.y.max)})),{x:{min:t,mid:(t+r)/2,max:r,size:r-t},y:{min:n,mid:(n+o)/2,max:o,size:o-n}}},shapeintersections:function(e,t,n,r,o){if(!m.bboxoverlap(t,r))return[];const i=[],s=[e.startcap,e.forward,e.back,e.endcap],a=[n.startcap,n.forward,n.back,n.endcap];return s.forEach((function(t){t.virtual||a.forEach((function(r){if(r.virtual)return;const s=t.intersects(r,o);s.length>0&&(s.c1=t,s.c2=r,s.s1=e,s.s2=n,i.push(s))}))})),i},makeshape:function(e,t,n){const r=t.points.length,o=e.points.length,i=m.makeline(t.points[r-1],e.points[0]),s=m.makeline(e.points[o-1],t.points[0]),a={startcap:i,forward:e,back:t,endcap:s,bbox:m.findbbox([i,e,t,s]),intersections:function(e){return m.shapeintersections(a,a.bbox,e,e.bbox,n)}};return a},getminmax:function(e,t,n){if(!n)return{min:0,max:0};let r,o,i=v,s=h;-1===n.indexOf(0)&&(n=[0].concat(n)),-1===n.indexOf(1)&&n.push(1);for(let a=0,c=n.length;a<c;a++)r=n[a],o=e.get(r),o[t]<i&&(i=o[t]),o[t]>s&&(s=o[t]);return{min:i,mid:(i+s)/2,max:s,size:s-i}},align:function(e,t){const n=t.p1.x,r=t.p1.y,o=-c(t.p2.y-r,t.p2.x-n);return e.map((function(e){return{x:(e.x-n)*i(o)-(e.y-r)*s(o),y:(e.x-n)*s(o)+(e.y-r)*i(o)}}))},roots:function(e,t){t=t||{p1:{x:0,y:0},p2:{x:1,y:0}};const n=e.length-1,r=m.align(e,t),o=function(e){return 0<=e&&e<=1};if(2===n){const e=r[0].y,t=r[1].y,n=r[2].y,i=e-2*t+n;if(0!==i){const r=-l(t*t-e*n),s=-e+t;return[-(r+s)/i,-(-r+s)/i].filter(o)}return t!==n&&0===i?[(2*t-n)/(2*t-2*n)].filter(o):[]}const s=r[0].y,c=r[1].y,u=r[2].y;let p=3*c-s-3*u+r[3].y,y=3*s-6*c+3*u,v=-3*s+3*c,h=s;if(m.approximately(p,0)){if(m.approximately(y,0))return m.approximately(v,0)?[]:[-h/v].filter(o);const e=l(v*v-4*y*h),t=2*y;return[(e-v)/t,(-v-e)/t].filter(o)}y/=p,v/=p,h/=p;const g=(3*v-y*y)/3,x=g/3,b=(2*y*y*y-9*y*v+27*h)/27,_=b/2,w=_*_+x*x*x;let S,P,C,A,M;if(w<0){const e=-g/3,t=l(e*e*e),n=-b/(2*t),r=a(n<-1?-1:n>1?1:n),s=2*d(t);return C=s*i(r/3)-y/3,A=s*i((r+f)/3)-y/3,M=s*i((r+2*f)/3)-y/3,[C,A,M].filter(o)}if(0===w)return S=_<0?d(-_):-d(_),C=2*S-y/3,A=-S-y/3,[C,A].filter(o);{const e=l(w);return S=d(-_+e),P=d(_+e),[S-P-y/3].filter(o)}},droots:function(e){if(3===e.length){const t=e[0],n=e[1],r=e[2],o=t-2*n+r;if(0!==o){const e=-l(n*n-t*r),i=-t+n;return[-(e+i)/o,-(-e+i)/o]}return n!==r&&0===o?[(2*n-r)/(2*(n-r))]:[]}if(2===e.length){const t=e[0],n=e[1];return t!==n?[t/(t-n)]:[]}return[]},curvature:function(e,t,n,r,i){let s,a,c,d,p=0,f=0;const y=m.compute(e,t),v=m.compute(e,n),h=y.x*y.x+y.y*y.y;if(r?(s=l(u(y.y*v.z-v.y*y.z,2)+u(y.z*v.x-v.z*y.x,2)+u(y.x*v.y-v.x*y.y,2)),a=u(h+y.z*y.z,1.5)):(s=y.x*v.y-y.y*v.x,a=u(h,1.5)),0===s||0===a)return{k:0,r:0};if(p=s/a,f=a/s,!i){const i=m.curvature(e-.001,t,n,r,!0).k,s=m.curvature(e+.001,t,n,r,!0).k;d=(s-p+(p-i))/2,c=(o(s-p)+o(p-i))/2}return{k:p,r:f,dk:d,adk:c}},inflections:function(e){if(e.length<4)return[];const t=m.align(e,{p1:e[0],p2:e.slice(-1)[0]}),n=t[2].x*t[1].y,r=t[3].x*t[1].y,o=t[1].x*t[2].y,i=18*(-3*n+2*r+3*o-t[3].x*t[2].y),s=18*(3*n-r-3*o),a=18*(o-n);if(m.approximately(i,0)){if(!m.approximately(s,0)){let e=-a/s;if(0<=e&&e<=1)return[e]}return[]}const c=s*s-4*i*a,l=Math.sqrt(c),u=2*i;return m.approximately(u,0)?[]:[(l-s)/u,-(s+l)/u].filter((function(e){return 0<=e&&e<=1}))},bboxoverlap:function(e,t){const n=["x","y"],r=n.length;for(let i,s,a,c,l=0;l<r;l++)if(i=n[l],s=e[i].mid,a=t[i].mid,c=(e[i].size+t[i].size)/2,o(s-a)>=c)return!1;return!0},expandbox:function(e,t){t.x.min<e.x.min&&(e.x.min=t.x.min),t.y.min<e.y.min&&(e.y.min=t.y.min),t.z&&t.z.min<e.z.min&&(e.z.min=t.z.min),t.x.max>e.x.max&&(e.x.max=t.x.max),t.y.max>e.y.max&&(e.y.max=t.y.max),t.z&&t.z.max>e.z.max&&(e.z.max=t.z.max),e.x.mid=(e.x.min+e.x.max)/2,e.y.mid=(e.y.min+e.y.max)/2,e.z&&(e.z.mid=(e.z.min+e.z.max)/2),e.x.size=e.x.max-e.x.min,e.y.size=e.y.max-e.y.min,e.z&&(e.z.size=e.z.max-e.z.min)},pairiteration:function(e,t,n){const r=e.bbox(),o=t.bbox(),i=1e5,s=n||.5;if(r.x.size+r.y.size<s&&o.x.size+o.y.size<s)return[(i*(e._t1+e._t2)/2|0)/i+"/"+(i*(t._t1+t._t2)/2|0)/i];let a=e.split(.5),c=t.split(.5),l=[{left:a.left,right:c.left},{left:a.left,right:c.right},{left:a.right,right:c.right},{left:a.right,right:c.left}];l=l.filter((function(e){return m.bboxoverlap(e.left.bbox(),e.right.bbox())}));let u=[];return 0===l.length||(l.forEach((function(e){u=u.concat(m.pairiteration(e.left,e.right,s))})),u=u.filter((function(e,t){return u.indexOf(e)===t}))),u},getccenter:function(e,t,n){const r=t.x-e.x,o=t.y-e.y,a=n.x-t.x,l=n.y-t.y,u=r*i(y)-o*s(y),d=r*s(y)+o*i(y),p=a*i(y)-l*s(y),v=a*s(y)+l*i(y),h=(e.x+t.x)/2,g=(e.y+t.y)/2,x=(t.x+n.x)/2,b=(t.y+n.y)/2,_=h+u,w=g+d,S=x+p,P=b+v,C=m.lli8(h,g,_,w,x,b,S,P),A=m.dist(C,e);let M,B=c(e.y-C.y,e.x-C.x),I=c(t.y-C.y,t.x-C.x),O=c(n.y-C.y,n.x-C.x);return B<O?((B>I||I>O)&&(B+=f),B>O&&(M=O,O=B,B=M)):O<I&&I<B?(M=O,O=B,B=M):O+=f,C.s=B,C.e=O,C.r=A,C},numberSort:function(e,t){return e-t}};class x{constructor(e){this.curves=[],this._3d=!1,e&&(this.curves=e,this._3d=this.curves[0]._3d)}valueOf(){return this.toString()}toString(){return"["+this.curves.map((function(e){return m.pointsToString(e.points)})).join(", ")+"]"}addCurve(e){this.curves.push(e),this._3d=this._3d||e._3d}length(){return this.curves.map((function(e){return e.length()})).reduce((function(e,t){return e+t}))}curve(e){return this.curves[e]}bbox(){const e=this.curves;for(var t=e[0].bbox(),n=1;n<e.length;n++)m.expandbox(t,e[n].bbox());return t}offset(e){const t=[];return this.curves.forEach((function(n){t.push(...n.offset(e))})),new x(t)}}const{abs:b,min:_,max:w,cos:S,sin:P,acos:C,sqrt:A}=Math,M=Math.PI;class B{constructor(e){let t=e&&e.forEach?e:Array.from(arguments).slice(),n=!1;if("object"==typeof t[0]){n=t.length;const e=[];t.forEach((function(t){["x","y","z"].forEach((function(n){void 0!==t[n]&&e.push(t[n])}))})),t=e}let r=!1;const o=t.length;if(n){if(n>4){if(1!==arguments.length)throw new Error("Only new Bezier(point[]) is accepted for 4th and higher order curves");r=!0}}else if(6!==o&&8!==o&&9!==o&&12!==o&&1!==arguments.length)throw new Error("Only new Bezier(point[]) is accepted for 4th and higher order curves");const i=this._3d=!r&&(9===o||12===o)||e&&e[0]&&void 0!==e[0].z,s=this.points=[];for(let e=0,n=i?3:2;e<o;e+=n){var a={x:t[e],y:t[e+1]};i&&(a.z=t[e+2]),s.push(a)}const c=this.order=s.length-1,l=this.dims=["x","y"];i&&l.push("z"),this.dimlen=l.length;const u=m.align(s,{p1:s[0],p2:s[c]}),d=m.dist(s[0],s[c]);this._linear=u.reduce(((e,t)=>e+b(t.y)),0)<d/50,this._lut=[],this._t1=0,this._t2=1,this.update()}static quadraticFromPoints(e,t,n,r){if(void 0===r&&(r=.5),0===r)return new B(t,t,n);if(1===r)return new B(e,t,t);const o=B.getABC(2,e,t,n,r);return new B(e,o.A,n)}static cubicFromPoints(e,t,n,r,o){void 0===r&&(r=.5);const i=B.getABC(3,e,t,n,r);void 0===o&&(o=m.dist(t,i.C));const s=o*(1-r)/r,a=m.dist(e,n),c=(n.x-e.x)/a,l=(n.y-e.y)/a,u=o*c,d=o*l,p=s*c,f=s*l,y=t.x-u,v=t.y-d,h=t.x+p,g=t.y+f,x=i.A,b=x.x+(y-x.x)/(1-r),_=x.y+(v-x.y)/(1-r),w=x.x+(h-x.x)/r,S=x.y+(g-x.y)/r,P={x:e.x+(b-e.x)/r,y:e.y+(_-e.y)/r},C={x:n.x+(w-n.x)/(1-r),y:n.y+(S-n.y)/(1-r)};return new B(e,P,C,n)}static getUtils(){return m}getUtils(){return B.getUtils()}static get PolyBezier(){return x}valueOf(){return this.toString()}toString(){return m.pointsToString(this.points)}toSVG(){if(this._3d)return!1;const e=this.points,t=["M",e[0].x,e[0].y,2===this.order?"Q":"C"];for(let n=1,r=e.length;n<r;n++)t.push(e[n].x),t.push(e[n].y);return t.join(" ")}setRatios(e){if(e.length!==this.points.length)throw new Error("incorrect number of ratio values");this.ratios=e,this._lut=[]}verify(){const e=this.coordDigest();e!==this._print&&(this._print=e,this.update())}coordDigest(){return this.points.map((function(e,t){return""+t+e.x+e.y+(e.z?e.z:0)})).join("")}update(){this._lut=[],this.dpoints=m.derive(this.points,this._3d),this.computedirection()}computedirection(){const e=this.points,t=m.angle(e[0],e[this.order],e[1]);this.clockwise=t>0}length(){return m.length(this.derivative.bind(this))}static getABC(e=2,t,n,r,o=.5){const i=m.projectionratio(o,e),s=1-i,a={x:i*t.x+s*r.x,y:i*t.y+s*r.y},c=m.abcratio(o,e);return{A:{x:n.x+(n.x-a.x)/c,y:n.y+(n.y-a.y)/c},B:n,C:a,S:t,E:r}}getABC(e,t){t=t||this.get(e);let n=this.points[0],r=this.points[this.order];return B.getABC(this.order,n,t,r,e)}getLUT(e){if(this.verify(),e=e||100,this._lut.length===e)return this._lut;this._lut=[],e++,this._lut=[];for(let t,n,r=0;r<e;r++)n=r/(e-1),t=this.compute(n),t.t=n,this._lut.push(t);return this._lut}on(e,n){n=n||5;const r=this.getLUT(),o=[];for(let t,i=0,s=0;i<r.length;i++)t=r[i],m.dist(t,e)<n&&(o.push(t),s+=i/r.length);return!!o.length&&(t/=o.length)}project(e){const t=this.getLUT(),n=t.length-1,r=m.closest(t,e),o=r.mpos,i=(o-1)/n,s=(o+1)/n,a=.1/n;let c,l,u=r.mdist,d=i,p=d;for(u+=1;d<s+a;d+=a)c=this.compute(d),l=m.dist(e,c),l<u&&(u=l,p=d);return p=p<0?0:p>1?1:p,c=this.compute(p),c.t=p,c.d=u,c}get(e){return this.compute(e)}point(e){return this.points[e]}compute(e){return this.ratios?m.computeWithRatios(e,this.points,this.ratios,this._3d):m.compute(e,this.points,this._3d,this.ratios)}raise(){const e=this.points,t=[e[0]],n=e.length;for(let r,o,i=1;i<n;i++)r=e[i],o=e[i-1],t[i]={x:(n-i)/n*r.x+i/n*o.x,y:(n-i)/n*r.y+i/n*o.y};return t[n]=e[n-1],new B(t)}derivative(e){return m.compute(e,this.dpoints[0],this._3d)}dderivative(e){return m.compute(e,this.dpoints[1],this._3d)}align(){let e=this.points;return new B(m.align(e,{p1:e[0],p2:e[e.length-1]}))}curvature(e){return m.curvature(e,this.dpoints[0],this.dpoints[1],this._3d)}inflections(){return m.inflections(this.points)}normal(e){return this._3d?this.__normal3(e):this.__normal2(e)}__normal2(e){const t=this.derivative(e),n=A(t.x*t.x+t.y*t.y);return{x:-t.y/n,y:t.x/n}}__normal3(e){const t=this.derivative(e),n=this.derivative(e+.01),r=A(t.x*t.x+t.y*t.y+t.z*t.z),o=A(n.x*n.x+n.y*n.y+n.z*n.z);t.x/=r,t.y/=r,t.z/=r,n.x/=o,n.y/=o,n.z/=o;const i={x:n.y*t.z-n.z*t.y,y:n.z*t.x-n.x*t.z,z:n.x*t.y-n.y*t.x},s=A(i.x*i.x+i.y*i.y+i.z*i.z);i.x/=s,i.y/=s,i.z/=s;const a=[i.x*i.x,i.x*i.y-i.z,i.x*i.z+i.y,i.x*i.y+i.z,i.y*i.y,i.y*i.z-i.x,i.x*i.z-i.y,i.y*i.z+i.x,i.z*i.z];return{x:a[0]*t.x+a[1]*t.y+a[2]*t.z,y:a[3]*t.x+a[4]*t.y+a[5]*t.z,z:a[6]*t.x+a[7]*t.y+a[8]*t.z}}hull(e){let t=this.points,n=[],r=[],o=0;for(r[o++]=t[0],r[o++]=t[1],r[o++]=t[2],3===this.order&&(r[o++]=t[3]);t.length>1;){n=[];for(let i,s=0,a=t.length-1;s<a;s++)i=m.lerp(e,t[s],t[s+1]),r[o++]=i,n.push(i);t=n}return r}split(e,t){if(0===e&&t)return this.split(t).left;if(1===t)return this.split(e).right;const n=this.hull(e),r={left:2===this.order?new B([n[0],n[3],n[5]]):new B([n[0],n[4],n[7],n[9]]),right:2===this.order?new B([n[5],n[4],n[2]]):new B([n[9],n[8],n[6],n[3]]),span:n};return r.left._t1=m.map(0,0,1,this._t1,this._t2),r.left._t2=m.map(e,0,1,this._t1,this._t2),r.right._t1=m.map(e,0,1,this._t1,this._t2),r.right._t2=m.map(1,0,1,this._t1,this._t2),t?(t=m.map(t,e,1,0,1),r.right.split(t).left):r}extrema(){const e={};let t=[];return this.dims.forEach(function(n){let r=function(e){return e[n]},o=this.dpoints[0].map(r);e[n]=m.droots(o),3===this.order&&(o=this.dpoints[1].map(r),e[n]=e[n].concat(m.droots(o))),e[n]=e[n].filter((function(e){return e>=0&&e<=1})),t=t.concat(e[n].sort(m.numberSort))}.bind(this)),e.values=t.sort(m.numberSort).filter((function(e,n){return t.indexOf(e)===n})),e}bbox(){const e=this.extrema(),t={};return this.dims.forEach(function(n){t[n]=m.getminmax(this,n,e[n])}.bind(this)),t}overlaps(e){const t=this.bbox(),n=e.bbox();return m.bboxoverlap(t,n)}offset(e,t){if(void 0!==t){const n=this.get(e),r=this.normal(e),o={c:n,n:r,x:n.x+r.x*t,y:n.y+r.y*t};return this._3d&&(o.z=n.z+r.z*t),o}if(this._linear){const t=this.normal(0),n=this.points.map((function(n){const r={x:n.x+e*t.x,y:n.y+e*t.y};return n.z&&t.z&&(r.z=n.z+e*t.z),r}));return[new B(n)]}return this.reduce().map((function(t){return t._linear?t.offset(e)[0]:t.scale(e)}))}simple(){if(3===this.order){const e=m.angle(this.points[0],this.points[3],this.points[1]),t=m.angle(this.points[0],this.points[3],this.points[2]);if(e>0&&t<0||e<0&&t>0)return!1}const e=this.normal(0),t=this.normal(1);let n=e.x*t.x+e.y*t.y;return this._3d&&(n+=e.z*t.z),b(C(n))<M/3}reduce(){let e,t,n=0,r=0,o=.01,i=[],s=[],a=this.extrema().values;for(-1===a.indexOf(0)&&(a=[0].concat(a)),-1===a.indexOf(1)&&a.push(1),n=a[0],e=1;e<a.length;e++)r=a[e],t=this.split(n,r),t._t1=n,t._t2=r,i.push(t),n=r;return i.forEach((function(e){for(n=0,r=0;r<=1;)for(r=n+o;r<=1.01;r+=o)if(t=e.split(n,r),!t.simple()){if(r-=o,b(n-r)<o)return[];t=e.split(n,r),t._t1=m.map(n,0,1,e._t1,e._t2),t._t2=m.map(r,0,1,e._t1,e._t2),s.push(t),n=r;break}n<1&&(t=e.split(n,1),t._t1=m.map(n,0,1,e._t1,e._t2),t._t2=e._t2,s.push(t))})),s}translate(e,t,n){n="number"==typeof n?n:t;const r=this.order;let o=this.points.map(((e,o)=>(1-o/r)*t+o/r*n));return new B(this.points.map(((t,n)=>({x:t.x+e.x*o[n],y:t.y+e.y*o[n]}))))}scale(e){const t=this.order;let n=!1;if("function"==typeof e&&(n=e),n&&2===t)return this.raise().scale(n);const r=this.clockwise,o=this.points;if(this._linear)return this.translate(this.normal(0),n?n(0):e,n?n(1):e);const i=n?n(0):e,s=n?n(1):e,a=[this.offset(0,10),this.offset(1,10)],c=[],l=m.lli4(a[0],a[0].c,a[1],a[1].c);if(!l)throw new Error("cannot scale this curve. Try reducing it first.");return[0,1].forEach((function(e){const n=c[e*t]=m.copy(o[e*t]);n.x+=(e?s:i)*a[e].n.x,n.y+=(e?s:i)*a[e].n.y})),n?([0,1].forEach((function(i){if(2!==t||!i){var s=o[i+1],a={x:s.x-l.x,y:s.y-l.y},u=n?n((i+1)/t):e;n&&!r&&(u=-u);var d=A(a.x*a.x+a.y*a.y);a.x/=d,a.y/=d,c[i+1]={x:s.x+u*a.x,y:s.y+u*a.y}}})),new B(c)):([0,1].forEach((e=>{if(2===t&&e)return;const n=c[e*t],r=this.derivative(e),i={x:n.x+r.x,y:n.y+r.y};c[e+1]=m.lli4(n,i,l,o[e+1])})),new B(c))}outline(e,t,n,r){if(t=void 0===t?e:t,this._linear){const o=this.normal(0),i=this.points[0],s=this.points[this.points.length-1];let a,c,l;void 0===n&&(n=e,r=t),a={x:i.x+o.x*e,y:i.y+o.y*e},l={x:s.x+o.x*n,y:s.y+o.y*n},c={x:(a.x+l.x)/2,y:(a.y+l.y)/2};const u=[a,c,l];a={x:i.x-o.x*t,y:i.y-o.y*t},l={x:s.x-o.x*r,y:s.y-o.y*r},c={x:(a.x+l.x)/2,y:(a.y+l.y)/2};const d=[l,c,a],p=m.makeline(d[2],u[0]),f=m.makeline(u[2],d[0]),y=[p,new B(u),f,new B(d)];return new x(y)}const o=this.reduce(),i=o.length,s=[];let a,c=[],l=0,u=this.length();const d=void 0!==n&&void 0!==r;function p(e,t,n,r,o){return function(i){const s=r/n,a=(r+o)/n,c=t-e;return m.map(i,0,1,e+s*c,e+a*c)}}o.forEach((function(o){const i=o.length();d?(s.push(o.scale(p(e,n,u,l,i))),c.push(o.scale(p(-t,-r,u,l,i)))):(s.push(o.scale(e)),c.push(o.scale(-t))),l+=i})),c=c.map((function(e){return a=e.points,a[3]?e.points=[a[3],a[2],a[1],a[0]]:e.points=[a[2],a[1],a[0]],e})).reverse();const f=s[0].points[0],y=s[i-1].points[s[i-1].points.length-1],v=c[i-1].points[c[i-1].points.length-1],h=c[0].points[0],g=m.makeline(v,f),b=m.makeline(y,h),_=[g].concat(s).concat([b]).concat(c);return new x(_)}outlineshapes(e,t,n){t=t||e;const r=this.outline(e,t).curves,o=[];for(let e=1,t=r.length;e<t/2;e++){const i=m.makeshape(r[e],r[t-e],n);i.startcap.virtual=e>1,i.endcap.virtual=e<t/2-1,o.push(i)}return o}intersects(e,t){return e?e.p1&&e.p2?this.lineIntersects(e):(e instanceof B&&(e=e.reduce()),this.curveintersects(this.reduce(),e,t)):this.selfintersects(t)}lineIntersects(e){const t=_(e.p1.x,e.p2.x),n=_(e.p1.y,e.p2.y),r=w(e.p1.x,e.p2.x),o=w(e.p1.y,e.p2.y);return m.roots(this.points,e).filter((e=>{var i=this.get(e);return m.between(i.x,t,r)&&m.between(i.y,n,o)}))}selfintersects(e){const t=this.reduce(),n=t.length-2,r=[];for(let o,i,s,a=0;a<n;a++)i=t.slice(a,a+1),s=t.slice(a+2),o=this.curveintersects(i,s,e),r.push(...o);return r}curveintersects(e,t,n){const r=[];e.forEach((function(e){t.forEach((function(t){e.overlaps(t)&&r.push({left:e,right:t})}))}));let o=[];return r.forEach((function(e){const t=m.pairiteration(e.left,e.right,n);t.length>0&&(o=o.concat(t))})),o}arcs(e){return e=e||.5,this._iterate(e,[])}_error(e,t,n,r){const o=(r-n)/4,i=this.get(n+o),s=this.get(r-o),a=m.dist(e,t),c=m.dist(e,i),l=m.dist(e,s);return b(c-a)+b(l-a)}_iterate(e,t){let n,r=0,o=1;do{n=0,o=1;let i,s,a,c,l,u=this.get(r),d=!1,p=!1,f=o,y=1;do{if(p=d,c=a,f=(r+o)/2,i=this.get(f),s=this.get(o),a=m.getccenter(u,i,s),a.interval={start:r,end:o},d=this._error(a,u,r,o)<=e,l=p&&!d,l||(y=o),d){if(o>=1){if(a.interval.end=y=1,c=a,o>1){let e={x:a.x+a.r*S(a.e),y:a.y+a.r*P(a.e)};a.e+=m.angle({x:a.x,y:a.y},e,this.get(1))}break}o+=(o-r)/2}else o=f}while(!l&&n++<100);if(n>=100)break;c=c||a,t.push(c),r=y}while(o<1);return t}}}},n={};function r(t){var o=n[t];if(void 0!==o)return o.exports;var i=n[t]={exports:{}};return e[t].call(i.exports,i,i.exports,r),i.exports}r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";r(1446)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,