/*! For license information please see bundle.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.physicalSvg=t():e.physicalSvg=t()}(self,(()=>(()=>{var e={842:function(e,t,n){var o;o=function(){return function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=21)}([function(e,t){var o={};e.exports=o,function(){o._nextId=0,o._seed=0,o._nowStartTime=+new Date,o._warnedOnce={},o._decomp=null,o.extend=function(e,t){var n,r;"boolean"==typeof t?(n=2,r=t):(n=1,r=!0);for(var i=n;i<arguments.length;i++){var s=arguments[i];if(s)for(var a in s)r&&s[a]&&s[a].constructor===Object?e[a]&&e[a].constructor!==Object?e[a]=s[a]:(e[a]=e[a]||{},o.extend(e[a],r,s[a])):e[a]=s[a]}return e},o.clone=function(e,t){return o.extend({},t,e)},o.keys=function(e){if(Object.keys)return Object.keys(e);var t=[];for(var n in e)t.push(n);return t},o.values=function(e){var t=[];if(Object.keys){for(var n=Object.keys(e),o=0;o<n.length;o++)t.push(e[n[o]]);return t}for(var r in e)t.push(e[r]);return t},o.get=function(e,t,n,o){t=t.split(".").slice(n,o);for(var r=0;r<t.length;r+=1)e=e[t[r]];return e},o.set=function(e,t,n,r,i){var s=t.split(".").slice(r,i);return o.get(e,t,0,-1)[s[s.length-1]]=n,n},o.shuffle=function(e){for(var t=e.length-1;t>0;t--){var n=Math.floor(o.random()*(t+1)),r=e[t];e[t]=e[n],e[n]=r}return e},o.choose=function(e){return e[Math.floor(o.random()*e.length)]},o.isElement=function(e){return"undefined"!=typeof HTMLElement?e instanceof HTMLElement:!!(e&&e.nodeType&&e.nodeName)},o.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)},o.isFunction=function(e){return"function"==typeof e},o.isPlainObject=function(e){return"object"==typeof e&&e.constructor===Object},o.isString=function(e){return"[object String]"===toString.call(e)},o.clamp=function(e,t,n){return e<t?t:e>n?n:e},o.sign=function(e){return e<0?-1:1},o.now=function(){if("undefined"!=typeof window&&window.performance){if(window.performance.now)return window.performance.now();if(window.performance.webkitNow)return window.performance.webkitNow()}return Date.now?Date.now():new Date-o._nowStartTime},o.random=function(t,n){return n=void 0!==n?n:1,(t=void 0!==t?t:0)+e()*(n-t)};var e=function(){return o._seed=(9301*o._seed+49297)%233280,o._seed/233280};o.colorToNumber=function(e){return 3==(e=e.replace("#","")).length&&(e=e.charAt(0)+e.charAt(0)+e.charAt(1)+e.charAt(1)+e.charAt(2)+e.charAt(2)),parseInt(e,16)},o.logLevel=1,o.log=function(){console&&o.logLevel>0&&o.logLevel<=3&&console.log.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},o.info=function(){console&&o.logLevel>0&&o.logLevel<=2&&console.info.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},o.warn=function(){console&&o.logLevel>0&&o.logLevel<=3&&console.warn.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},o.warnOnce=function(){var e=Array.prototype.slice.call(arguments).join(" ");o._warnedOnce[e]||(o.warn(e),o._warnedOnce[e]=!0)},o.deprecated=function(e,t,n){e[t]=o.chain((function(){o.warnOnce("🔅 deprecated 🔅",n)}),e[t])},o.nextId=function(){return o._nextId++},o.indexOf=function(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0;n<e.length;n++)if(e[n]===t)return n;return-1},o.map=function(e,t){if(e.map)return e.map(t);for(var n=[],o=0;o<e.length;o+=1)n.push(t(e[o]));return n},o.topologicalSort=function(e){var t=[],n=[],r=[];for(var i in e)n[i]||r[i]||o._topologicalSort(i,n,r,e,t);return t},o._topologicalSort=function(e,t,n,r,i){var s=r[e]||[];n[e]=!0;for(var a=0;a<s.length;a+=1){var c=s[a];n[c]||t[c]||o._topologicalSort(c,t,n,r,i)}n[e]=!1,t[e]=!0,i.push(e)},o.chain=function(){for(var e=[],t=0;t<arguments.length;t+=1){var n=arguments[t];n._chained?e.push.apply(e,n._chained):e.push(n)}var o=function(){for(var t,n=new Array(arguments.length),o=0,r=arguments.length;o<r;o++)n[o]=arguments[o];for(o=0;o<e.length;o+=1){var i=e[o].apply(t,n);void 0!==i&&(t=i)}return t};return o._chained=e,o},o.chainPathBefore=function(e,t,n){return o.set(e,t,o.chain(n,o.get(e,t)))},o.chainPathAfter=function(e,t,n){return o.set(e,t,o.chain(o.get(e,t),n))},o.setDecomp=function(e){o._decomp=e},o.getDecomp=function(){var e=o._decomp;try{e||"undefined"==typeof window||(e=window.decomp),e||void 0===n.g||(e=n.g.decomp)}catch(t){e=null}return e}}()},function(e,t){var n={};e.exports=n,n.create=function(e){var t={min:{x:0,y:0},max:{x:0,y:0}};return e&&n.update(t,e),t},n.update=function(e,t,n){e.min.x=1/0,e.max.x=-1/0,e.min.y=1/0,e.max.y=-1/0;for(var o=0;o<t.length;o++){var r=t[o];r.x>e.max.x&&(e.max.x=r.x),r.x<e.min.x&&(e.min.x=r.x),r.y>e.max.y&&(e.max.y=r.y),r.y<e.min.y&&(e.min.y=r.y)}n&&(n.x>0?e.max.x+=n.x:e.min.x+=n.x,n.y>0?e.max.y+=n.y:e.min.y+=n.y)},n.contains=function(e,t){return t.x>=e.min.x&&t.x<=e.max.x&&t.y>=e.min.y&&t.y<=e.max.y},n.overlaps=function(e,t){return e.min.x<=t.max.x&&e.max.x>=t.min.x&&e.max.y>=t.min.y&&e.min.y<=t.max.y},n.translate=function(e,t){e.min.x+=t.x,e.max.x+=t.x,e.min.y+=t.y,e.max.y+=t.y},n.shift=function(e,t){var n=e.max.x-e.min.x,o=e.max.y-e.min.y;e.min.x=t.x,e.max.x=t.x+n,e.min.y=t.y,e.max.y=t.y+o}},function(e,t){var n={};e.exports=n,n.create=function(e,t){return{x:e||0,y:t||0}},n.clone=function(e){return{x:e.x,y:e.y}},n.magnitude=function(e){return Math.sqrt(e.x*e.x+e.y*e.y)},n.magnitudeSquared=function(e){return e.x*e.x+e.y*e.y},n.rotate=function(e,t,n){var o=Math.cos(t),r=Math.sin(t);n||(n={});var i=e.x*o-e.y*r;return n.y=e.x*r+e.y*o,n.x=i,n},n.rotateAbout=function(e,t,n,o){var r=Math.cos(t),i=Math.sin(t);o||(o={});var s=n.x+((e.x-n.x)*r-(e.y-n.y)*i);return o.y=n.y+((e.x-n.x)*i+(e.y-n.y)*r),o.x=s,o},n.normalise=function(e){var t=n.magnitude(e);return 0===t?{x:0,y:0}:{x:e.x/t,y:e.y/t}},n.dot=function(e,t){return e.x*t.x+e.y*t.y},n.cross=function(e,t){return e.x*t.y-e.y*t.x},n.cross3=function(e,t,n){return(t.x-e.x)*(n.y-e.y)-(t.y-e.y)*(n.x-e.x)},n.add=function(e,t,n){return n||(n={}),n.x=e.x+t.x,n.y=e.y+t.y,n},n.sub=function(e,t,n){return n||(n={}),n.x=e.x-t.x,n.y=e.y-t.y,n},n.mult=function(e,t){return{x:e.x*t,y:e.y*t}},n.div=function(e,t){return{x:e.x/t,y:e.y/t}},n.perp=function(e,t){return{x:(t=!0===t?-1:1)*-e.y,y:t*e.x}},n.neg=function(e){return{x:-e.x,y:-e.y}},n.angle=function(e,t){return Math.atan2(t.y-e.y,t.x-e.x)},n._temp=[n.create(),n.create(),n.create(),n.create(),n.create(),n.create()]},function(e,t,n){var o={};e.exports=o;var r=n(2),i=n(0);o.create=function(e,t){for(var n=[],o=0;o<e.length;o++){var r=e[o],i={x:r.x,y:r.y,index:o,body:t,isInternal:!1};n.push(i)}return n},o.fromPath=function(e,t){var n=[];return e.replace(/L?\s*([-\d.e]+)[\s,]*([-\d.e]+)*/gi,(function(e,t,o){n.push({x:parseFloat(t),y:parseFloat(o)})})),o.create(n,t)},o.centre=function(e){for(var t,n,i,s=o.area(e,!0),a={x:0,y:0},c=0;c<e.length;c++)i=(c+1)%e.length,t=r.cross(e[c],e[i]),n=r.mult(r.add(e[c],e[i]),t),a=r.add(a,n);return r.div(a,6*s)},o.mean=function(e){for(var t={x:0,y:0},n=0;n<e.length;n++)t.x+=e[n].x,t.y+=e[n].y;return r.div(t,e.length)},o.area=function(e,t){for(var n=0,o=e.length-1,r=0;r<e.length;r++)n+=(e[o].x-e[r].x)*(e[o].y+e[r].y),o=r;return t?n/2:Math.abs(n)/2},o.inertia=function(e,t){for(var n,o,i=0,s=0,a=e,c=0;c<a.length;c++)o=(c+1)%a.length,i+=(n=Math.abs(r.cross(a[o],a[c])))*(r.dot(a[o],a[o])+r.dot(a[o],a[c])+r.dot(a[c],a[c])),s+=n;return t/6*(i/s)},o.translate=function(e,t,n){n=void 0!==n?n:1;var o,r=e.length,i=t.x*n,s=t.y*n;for(o=0;o<r;o++)e[o].x+=i,e[o].y+=s;return e},o.rotate=function(e,t,n){if(0!==t){var o,r,i,s,a=Math.cos(t),c=Math.sin(t),l=n.x,u=n.y,p=e.length;for(s=0;s<p;s++)r=(o=e[s]).x-l,i=o.y-u,o.x=l+(r*a-i*c),o.y=u+(r*c+i*a);return e}},o.contains=function(e,t){for(var n,o=t.x,r=t.y,i=e.length,s=e[i-1],a=0;a<i;a++){if(n=e[a],(o-s.x)*(n.y-s.y)+(r-s.y)*(s.x-n.x)>0)return!1;s=n}return!0},o.scale=function(e,t,n,i){if(1===t&&1===n)return e;var s,a;i=i||o.centre(e);for(var c=0;c<e.length;c++)s=e[c],a=r.sub(s,i),e[c].x=i.x+a.x*t,e[c].y=i.y+a.y*n;return e},o.chamfer=function(e,t,n,o,s){t="number"==typeof t?[t]:t||[8],n=void 0!==n?n:-1,o=o||2,s=s||14;for(var a=[],c=0;c<e.length;c++){var l=e[c-1>=0?c-1:e.length-1],u=e[c],p=e[(c+1)%e.length],d=t[c<t.length?c:t.length-1];if(0!==d){var f=r.normalise({x:u.y-l.y,y:l.x-u.x}),y=r.normalise({x:p.y-u.y,y:u.x-p.x}),h=Math.sqrt(2*Math.pow(d,2)),v=r.mult(i.clone(f),d),x=r.normalise(r.mult(r.add(f,y),.5)),m=r.sub(u,r.mult(x,h)),g=n;-1===n&&(g=1.75*Math.pow(d,.32)),(g=i.clamp(g,o,s))%2==1&&(g+=1);for(var b=Math.acos(r.dot(f,y))/g,_=0;_<g;_++)a.push(r.add(r.rotate(v,b*_),m))}else a.push(u)}return a},o.clockwiseSort=function(e){var t=o.mean(e);return e.sort((function(e,n){return r.angle(t,e)-r.angle(t,n)})),e},o.isConvex=function(e){var t,n,o,r,i=0,s=e.length;if(s<3)return null;for(t=0;t<s;t++)if(o=(t+2)%s,r=(e[n=(t+1)%s].x-e[t].x)*(e[o].y-e[n].y),(r-=(e[n].y-e[t].y)*(e[o].x-e[n].x))<0?i|=1:r>0&&(i|=2),3===i)return!1;return 0!==i||null},o.hull=function(e){var t,n,o=[],i=[];for((e=e.slice(0)).sort((function(e,t){var n=e.x-t.x;return 0!==n?n:e.y-t.y})),n=0;n<e.length;n+=1){for(t=e[n];i.length>=2&&r.cross3(i[i.length-2],i[i.length-1],t)<=0;)i.pop();i.push(t)}for(n=e.length-1;n>=0;n-=1){for(t=e[n];o.length>=2&&r.cross3(o[o.length-2],o[o.length-1],t)<=0;)o.pop();o.push(t)}return o.pop(),i.pop(),o.concat(i)}},function(e,t,n){var o={};e.exports=o;var r=n(0);o.on=function(e,t,n){for(var o,r=t.split(" "),i=0;i<r.length;i++)o=r[i],e.events=e.events||{},e.events[o]=e.events[o]||[],e.events[o].push(n);return n},o.off=function(e,t,n){if(t){"function"==typeof t&&(n=t,t=r.keys(e.events).join(" "));for(var o=t.split(" "),i=0;i<o.length;i++){var s=e.events[o[i]],a=[];if(n&&s)for(var c=0;c<s.length;c++)s[c]!==n&&a.push(s[c]);e.events[o[i]]=a}}else e.events={}},o.trigger=function(e,t,n){var o,i,s,a,c=e.events;if(c&&r.keys(c).length>0){n||(n={}),o=t.split(" ");for(var l=0;l<o.length;l++)if(s=c[i=o[l]]){(a=r.clone(n,!1)).name=i,a.source=e;for(var u=0;u<s.length;u++)s[u].apply(e,[a])}}}},function(e,t,n){var o={};e.exports=o;var r=n(4),i=n(0),s=n(1),a=n(6);o.create=function(e){return i.extend({id:i.nextId(),type:"composite",parent:null,isModified:!1,bodies:[],constraints:[],composites:[],label:"Composite",plugin:{},cache:{allBodies:null,allConstraints:null,allComposites:null}},e)},o.setModified=function(e,t,n,r){if(e.isModified=t,t&&e.cache&&(e.cache.allBodies=null,e.cache.allConstraints=null,e.cache.allComposites=null),n&&e.parent&&o.setModified(e.parent,t,n,r),r)for(var i=0;i<e.composites.length;i++){var s=e.composites[i];o.setModified(s,t,n,r)}},o.add=function(e,t){var n=[].concat(t);r.trigger(e,"beforeAdd",{object:t});for(var s=0;s<n.length;s++){var a=n[s];switch(a.type){case"body":if(a.parent!==a){i.warn("Composite.add: skipped adding a compound body part (you must add its parent instead)");break}o.addBody(e,a);break;case"constraint":o.addConstraint(e,a);break;case"composite":o.addComposite(e,a);break;case"mouseConstraint":o.addConstraint(e,a.constraint)}}return r.trigger(e,"afterAdd",{object:t}),e},o.remove=function(e,t,n){var i=[].concat(t);r.trigger(e,"beforeRemove",{object:t});for(var s=0;s<i.length;s++){var a=i[s];switch(a.type){case"body":o.removeBody(e,a,n);break;case"constraint":o.removeConstraint(e,a,n);break;case"composite":o.removeComposite(e,a,n);break;case"mouseConstraint":o.removeConstraint(e,a.constraint)}}return r.trigger(e,"afterRemove",{object:t}),e},o.addComposite=function(e,t){return e.composites.push(t),t.parent=e,o.setModified(e,!0,!0,!1),e},o.removeComposite=function(e,t,n){var r=i.indexOf(e.composites,t);if(-1!==r&&o.removeCompositeAt(e,r),n)for(var s=0;s<e.composites.length;s++)o.removeComposite(e.composites[s],t,!0);return e},o.removeCompositeAt=function(e,t){return e.composites.splice(t,1),o.setModified(e,!0,!0,!1),e},o.addBody=function(e,t){return e.bodies.push(t),o.setModified(e,!0,!0,!1),e},o.removeBody=function(e,t,n){var r=i.indexOf(e.bodies,t);if(-1!==r&&o.removeBodyAt(e,r),n)for(var s=0;s<e.composites.length;s++)o.removeBody(e.composites[s],t,!0);return e},o.removeBodyAt=function(e,t){return e.bodies.splice(t,1),o.setModified(e,!0,!0,!1),e},o.addConstraint=function(e,t){return e.constraints.push(t),o.setModified(e,!0,!0,!1),e},o.removeConstraint=function(e,t,n){var r=i.indexOf(e.constraints,t);if(-1!==r&&o.removeConstraintAt(e,r),n)for(var s=0;s<e.composites.length;s++)o.removeConstraint(e.composites[s],t,!0);return e},o.removeConstraintAt=function(e,t){return e.constraints.splice(t,1),o.setModified(e,!0,!0,!1),e},o.clear=function(e,t,n){if(n)for(var r=0;r<e.composites.length;r++)o.clear(e.composites[r],t,!0);return t?e.bodies=e.bodies.filter((function(e){return e.isStatic})):e.bodies.length=0,e.constraints.length=0,e.composites.length=0,o.setModified(e,!0,!0,!1),e},o.allBodies=function(e){if(e.cache&&e.cache.allBodies)return e.cache.allBodies;for(var t=[].concat(e.bodies),n=0;n<e.composites.length;n++)t=t.concat(o.allBodies(e.composites[n]));return e.cache&&(e.cache.allBodies=t),t},o.allConstraints=function(e){if(e.cache&&e.cache.allConstraints)return e.cache.allConstraints;for(var t=[].concat(e.constraints),n=0;n<e.composites.length;n++)t=t.concat(o.allConstraints(e.composites[n]));return e.cache&&(e.cache.allConstraints=t),t},o.allComposites=function(e){if(e.cache&&e.cache.allComposites)return e.cache.allComposites;for(var t=[].concat(e.composites),n=0;n<e.composites.length;n++)t=t.concat(o.allComposites(e.composites[n]));return e.cache&&(e.cache.allComposites=t),t},o.get=function(e,t,n){var r,i;switch(n){case"body":r=o.allBodies(e);break;case"constraint":r=o.allConstraints(e);break;case"composite":r=o.allComposites(e).concat(e)}return r?0===(i=r.filter((function(e){return e.id.toString()===t.toString()}))).length?null:i[0]:null},o.move=function(e,t,n){return o.remove(e,t),o.add(n,t),e},o.rebase=function(e){for(var t=o.allBodies(e).concat(o.allConstraints(e)).concat(o.allComposites(e)),n=0;n<t.length;n++)t[n].id=i.nextId();return e},o.translate=function(e,t,n){for(var r=n?o.allBodies(e):e.bodies,i=0;i<r.length;i++)a.translate(r[i],t);return e},o.rotate=function(e,t,n,r){for(var i=Math.cos(t),s=Math.sin(t),c=r?o.allBodies(e):e.bodies,l=0;l<c.length;l++){var u=c[l],p=u.position.x-n.x,d=u.position.y-n.y;a.setPosition(u,{x:n.x+(p*i-d*s),y:n.y+(p*s+d*i)}),a.rotate(u,t)}return e},o.scale=function(e,t,n,r,i){for(var s=i?o.allBodies(e):e.bodies,c=0;c<s.length;c++){var l=s[c],u=l.position.x-r.x,p=l.position.y-r.y;a.setPosition(l,{x:r.x+u*t,y:r.y+p*n}),a.scale(l,t,n)}return e},o.bounds=function(e){for(var t=o.allBodies(e),n=[],r=0;r<t.length;r+=1){var i=t[r];n.push(i.bounds.min,i.bounds.max)}return s.create(n)}},function(e,t,n){var o={};e.exports=o;var r=n(3),i=n(2),s=n(7),a=(n(16),n(0)),c=n(1),l=n(11);!function(){o._inertiaScale=4,o._nextCollidingGroupId=1,o._nextNonCollidingGroupId=-1,o._nextCategory=1,o.create=function(t){var n={id:a.nextId(),type:"body",label:"Body",parts:[],plugin:{},angle:0,vertices:r.fromPath("L 0 0 L 40 0 L 40 40 L 0 40"),position:{x:0,y:0},force:{x:0,y:0},torque:0,positionImpulse:{x:0,y:0},constraintImpulse:{x:0,y:0,angle:0},totalContacts:0,speed:0,angularSpeed:0,velocity:{x:0,y:0},angularVelocity:0,isSensor:!1,isStatic:!1,isSleeping:!1,motion:0,sleepThreshold:60,density:.001,restitution:0,friction:.1,frictionStatic:.5,frictionAir:.01,collisionFilter:{category:1,mask:4294967295,group:0},slop:.05,timeScale:1,render:{visible:!0,opacity:1,strokeStyle:null,fillStyle:null,lineWidth:null,sprite:{xScale:1,yScale:1,xOffset:0,yOffset:0}},events:null,bounds:null,chamfer:null,circleRadius:0,positionPrev:null,anglePrev:0,parent:null,axes:null,area:0,mass:0,inertia:0,_original:null},o=a.extend(n,t);return e(o,t),o},o.nextGroup=function(e){return e?o._nextNonCollidingGroupId--:o._nextCollidingGroupId++},o.nextCategory=function(){return o._nextCategory=o._nextCategory<<1,o._nextCategory};var e=function(e,t){t=t||{},o.set(e,{bounds:e.bounds||c.create(e.vertices),positionPrev:e.positionPrev||i.clone(e.position),anglePrev:e.anglePrev||e.angle,vertices:e.vertices,parts:e.parts||[e],isStatic:e.isStatic,isSleeping:e.isSleeping,parent:e.parent||e}),r.rotate(e.vertices,e.angle,e.position),l.rotate(e.axes,e.angle),c.update(e.bounds,e.vertices,e.velocity),o.set(e,{axes:t.axes||e.axes,area:t.area||e.area,mass:t.mass||e.mass,inertia:t.inertia||e.inertia});var n=e.isStatic?"#14151f":a.choose(["#f19648","#f5d259","#f55a3c","#063e7b","#ececd1"]),s=e.isStatic?"#555":"#ccc",u=e.isStatic&&null===e.render.fillStyle?1:0;e.render.fillStyle=e.render.fillStyle||n,e.render.strokeStyle=e.render.strokeStyle||s,e.render.lineWidth=e.render.lineWidth||u,e.render.sprite.xOffset+=-(e.bounds.min.x-e.position.x)/(e.bounds.max.x-e.bounds.min.x),e.render.sprite.yOffset+=-(e.bounds.min.y-e.position.y)/(e.bounds.max.y-e.bounds.min.y)};o.set=function(e,t,n){var r;for(r in"string"==typeof t&&(r=t,(t={})[r]=n),t)if(Object.prototype.hasOwnProperty.call(t,r))switch(n=t[r],r){case"isStatic":o.setStatic(e,n);break;case"isSleeping":s.set(e,n);break;case"mass":o.setMass(e,n);break;case"density":o.setDensity(e,n);break;case"inertia":o.setInertia(e,n);break;case"vertices":o.setVertices(e,n);break;case"position":o.setPosition(e,n);break;case"angle":o.setAngle(e,n);break;case"velocity":o.setVelocity(e,n);break;case"angularVelocity":o.setAngularVelocity(e,n);break;case"parts":o.setParts(e,n);break;case"centre":o.setCentre(e,n);break;default:e[r]=n}},o.setStatic=function(e,t){for(var n=0;n<e.parts.length;n++){var o=e.parts[n];o.isStatic=t,t?(o._original={restitution:o.restitution,friction:o.friction,mass:o.mass,inertia:o.inertia,density:o.density,inverseMass:o.inverseMass,inverseInertia:o.inverseInertia},o.restitution=0,o.friction=1,o.mass=o.inertia=o.density=1/0,o.inverseMass=o.inverseInertia=0,o.positionPrev.x=o.position.x,o.positionPrev.y=o.position.y,o.anglePrev=o.angle,o.angularVelocity=0,o.speed=0,o.angularSpeed=0,o.motion=0):o._original&&(o.restitution=o._original.restitution,o.friction=o._original.friction,o.mass=o._original.mass,o.inertia=o._original.inertia,o.density=o._original.density,o.inverseMass=o._original.inverseMass,o.inverseInertia=o._original.inverseInertia,o._original=null)}},o.setMass=function(e,t){var n=e.inertia/(e.mass/6);e.inertia=n*(t/6),e.inverseInertia=1/e.inertia,e.mass=t,e.inverseMass=1/e.mass,e.density=e.mass/e.area},o.setDensity=function(e,t){o.setMass(e,t*e.area),e.density=t},o.setInertia=function(e,t){e.inertia=t,e.inverseInertia=1/e.inertia},o.setVertices=function(e,t){t[0].body===e?e.vertices=t:e.vertices=r.create(t,e),e.axes=l.fromVertices(e.vertices),e.area=r.area(e.vertices),o.setMass(e,e.density*e.area);var n=r.centre(e.vertices);r.translate(e.vertices,n,-1),o.setInertia(e,o._inertiaScale*r.inertia(e.vertices,e.mass)),r.translate(e.vertices,e.position),c.update(e.bounds,e.vertices,e.velocity)},o.setParts=function(e,t,n){var i;for(t=t.slice(0),e.parts.length=0,e.parts.push(e),e.parent=e,i=0;i<t.length;i++){var s=t[i];s!==e&&(s.parent=e,e.parts.push(s))}if(1!==e.parts.length){if(n=void 0===n||n){var a=[];for(i=0;i<t.length;i++)a=a.concat(t[i].vertices);r.clockwiseSort(a);var c=r.hull(a),l=r.centre(c);o.setVertices(e,c),r.translate(e.vertices,l)}var u=o._totalProperties(e);e.area=u.area,e.parent=e,e.position.x=u.centre.x,e.position.y=u.centre.y,e.positionPrev.x=u.centre.x,e.positionPrev.y=u.centre.y,o.setMass(e,u.mass),o.setInertia(e,u.inertia),o.setPosition(e,u.centre)}},o.setCentre=function(e,t,n){n?(e.positionPrev.x+=t.x,e.positionPrev.y+=t.y,e.position.x+=t.x,e.position.y+=t.y):(e.positionPrev.x=t.x-(e.position.x-e.positionPrev.x),e.positionPrev.y=t.y-(e.position.y-e.positionPrev.y),e.position.x=t.x,e.position.y=t.y)},o.setPosition=function(e,t){var n=i.sub(t,e.position);e.positionPrev.x+=n.x,e.positionPrev.y+=n.y;for(var o=0;o<e.parts.length;o++){var s=e.parts[o];s.position.x+=n.x,s.position.y+=n.y,r.translate(s.vertices,n),c.update(s.bounds,s.vertices,e.velocity)}},o.setAngle=function(e,t){var n=t-e.angle;e.anglePrev+=n;for(var o=0;o<e.parts.length;o++){var s=e.parts[o];s.angle+=n,r.rotate(s.vertices,n,e.position),l.rotate(s.axes,n),c.update(s.bounds,s.vertices,e.velocity),o>0&&i.rotateAbout(s.position,n,e.position,s.position)}},o.setVelocity=function(e,t){e.positionPrev.x=e.position.x-t.x,e.positionPrev.y=e.position.y-t.y,e.velocity.x=t.x,e.velocity.y=t.y,e.speed=i.magnitude(e.velocity)},o.setAngularVelocity=function(e,t){e.anglePrev=e.angle-t,e.angularVelocity=t,e.angularSpeed=Math.abs(e.angularVelocity)},o.translate=function(e,t){o.setPosition(e,i.add(e.position,t))},o.rotate=function(e,t,n){if(n){var r=Math.cos(t),i=Math.sin(t),s=e.position.x-n.x,a=e.position.y-n.y;o.setPosition(e,{x:n.x+(s*r-a*i),y:n.y+(s*i+a*r)}),o.setAngle(e,e.angle+t)}else o.setAngle(e,e.angle+t)},o.scale=function(e,t,n,i){var s=0,a=0;i=i||e.position;for(var u=0;u<e.parts.length;u++){var p=e.parts[u];r.scale(p.vertices,t,n,i),p.axes=l.fromVertices(p.vertices),p.area=r.area(p.vertices),o.setMass(p,e.density*p.area),r.translate(p.vertices,{x:-p.position.x,y:-p.position.y}),o.setInertia(p,o._inertiaScale*r.inertia(p.vertices,p.mass)),r.translate(p.vertices,{x:p.position.x,y:p.position.y}),u>0&&(s+=p.area,a+=p.inertia),p.position.x=i.x+(p.position.x-i.x)*t,p.position.y=i.y+(p.position.y-i.y)*n,c.update(p.bounds,p.vertices,e.velocity)}e.parts.length>1&&(e.area=s,e.isStatic||(o.setMass(e,e.density*s),o.setInertia(e,a))),e.circleRadius&&(t===n?e.circleRadius*=t:e.circleRadius=null)},o.update=function(e,t,n,o){var s=Math.pow(t*n*e.timeScale,2),a=1-e.frictionAir*n*e.timeScale,u=e.position.x-e.positionPrev.x,p=e.position.y-e.positionPrev.y;e.velocity.x=u*a*o+e.force.x/e.mass*s,e.velocity.y=p*a*o+e.force.y/e.mass*s,e.positionPrev.x=e.position.x,e.positionPrev.y=e.position.y,e.position.x+=e.velocity.x,e.position.y+=e.velocity.y,e.angularVelocity=(e.angle-e.anglePrev)*a*o+e.torque/e.inertia*s,e.anglePrev=e.angle,e.angle+=e.angularVelocity,e.speed=i.magnitude(e.velocity),e.angularSpeed=Math.abs(e.angularVelocity);for(var d=0;d<e.parts.length;d++){var f=e.parts[d];r.translate(f.vertices,e.velocity),d>0&&(f.position.x+=e.velocity.x,f.position.y+=e.velocity.y),0!==e.angularVelocity&&(r.rotate(f.vertices,e.angularVelocity,e.position),l.rotate(f.axes,e.angularVelocity),d>0&&i.rotateAbout(f.position,e.angularVelocity,e.position,f.position)),c.update(f.bounds,f.vertices,e.velocity)}},o.applyForce=function(e,t,n){e.force.x+=n.x,e.force.y+=n.y;var o=t.x-e.position.x,r=t.y-e.position.y;e.torque+=o*n.y-r*n.x},o._totalProperties=function(e){for(var t={mass:0,area:0,inertia:0,centre:{x:0,y:0}},n=1===e.parts.length?0:1;n<e.parts.length;n++){var o=e.parts[n],r=o.mass!==1/0?o.mass:1;t.mass+=r,t.area+=o.area,t.inertia+=o.inertia,t.centre=i.add(t.centre,i.mult(o.position,r))}return t.centre=i.div(t.centre,t.mass),t}}()},function(e,t,n){var o={};e.exports=o;var r=n(4);o._motionWakeThreshold=.18,o._motionSleepThreshold=.08,o._minBias=.9,o.update=function(e,t){for(var n=t*t*t,r=0;r<e.length;r++){var i=e[r],s=i.speed*i.speed+i.angularSpeed*i.angularSpeed;if(0===i.force.x&&0===i.force.y){var a=Math.min(i.motion,s),c=Math.max(i.motion,s);i.motion=o._minBias*a+(1-o._minBias)*c,i.sleepThreshold>0&&i.motion<o._motionSleepThreshold*n?(i.sleepCounter+=1,i.sleepCounter>=i.sleepThreshold&&o.set(i,!0)):i.sleepCounter>0&&(i.sleepCounter-=1)}else o.set(i,!1)}},o.afterCollisions=function(e,t){for(var n=t*t*t,r=0;r<e.length;r++){var i=e[r];if(i.isActive){var s=i.collision,a=s.bodyA.parent,c=s.bodyB.parent;if(!(a.isSleeping&&c.isSleeping||a.isStatic||c.isStatic)&&(a.isSleeping||c.isSleeping)){var l=a.isSleeping&&!a.isStatic?a:c,u=l===a?c:a;!l.isStatic&&u.motion>o._motionWakeThreshold*n&&o.set(l,!1)}}}},o.set=function(e,t){var n=e.isSleeping;t?(e.isSleeping=!0,e.sleepCounter=e.sleepThreshold,e.positionImpulse.x=0,e.positionImpulse.y=0,e.positionPrev.x=e.position.x,e.positionPrev.y=e.position.y,e.anglePrev=e.angle,e.speed=0,e.angularSpeed=0,e.motion=0,n||r.trigger(e,"sleepStart")):(e.isSleeping=!1,e.sleepCounter=0,n&&r.trigger(e,"sleepEnd"))}},function(e,t,n){var o={};e.exports=o;var r,i,s,a=n(3),c=n(9);r=[],i={overlap:0,axis:null},s={overlap:0,axis:null},o.create=function(e,t){return{pair:null,collided:!1,bodyA:e,bodyB:t,parentA:e.parent,parentB:t.parent,depth:0,normal:{x:0,y:0},tangent:{x:0,y:0},penetration:{x:0,y:0},supports:[]}},o.collides=function(e,t,n){if(o._overlapAxes(i,e.vertices,t.vertices,e.axes),i.overlap<=0)return null;if(o._overlapAxes(s,t.vertices,e.vertices,t.axes),s.overlap<=0)return null;var r,l,u=n&&n.table[c.id(e,t)];u?r=u.collision:((r=o.create(e,t)).collided=!0,r.bodyA=e.id<t.id?e:t,r.bodyB=e.id<t.id?t:e,r.parentA=r.bodyA.parent,r.parentB=r.bodyB.parent),e=r.bodyA,t=r.bodyB,l=i.overlap<s.overlap?i:s;var p=r.normal,d=r.supports,f=l.axis,y=f.x,h=f.y;y*(t.position.x-e.position.x)+h*(t.position.y-e.position.y)<0?(p.x=y,p.y=h):(p.x=-y,p.y=-h),r.tangent.x=-p.y,r.tangent.y=p.x,r.depth=l.overlap,r.penetration.x=p.x*r.depth,r.penetration.y=p.y*r.depth;var v=o._findSupports(e,t,p,1),x=0;if(a.contains(e.vertices,v[0])&&(d[x++]=v[0]),a.contains(e.vertices,v[1])&&(d[x++]=v[1]),x<2){var m=o._findSupports(t,e,p,-1);a.contains(t.vertices,m[0])&&(d[x++]=m[0]),x<2&&a.contains(t.vertices,m[1])&&(d[x++]=m[1])}return 0===x&&(d[x++]=v[0]),d.length=x,r},o._overlapAxes=function(e,t,n,o){var r,i,s,a,c,l,u=t.length,p=n.length,d=t[0].x,f=t[0].y,y=n[0].x,h=n[0].y,v=o.length,x=Number.MAX_VALUE,m=0;for(c=0;c<v;c++){var g=o[c],b=g.x,_=g.y,w=d*b+f*_,S=y*b+h*_,A=w,P=S;for(l=1;l<u;l+=1)(a=t[l].x*b+t[l].y*_)>A?A=a:a<w&&(w=a);for(l=1;l<p;l+=1)(a=n[l].x*b+n[l].y*_)>P?P=a:a<S&&(S=a);if((r=(i=A-S)<(s=P-w)?i:s)<x&&(x=r,m=c,r<=0))break}e.axis=o[m],e.overlap=x},o._projectToAxis=function(e,t,n){for(var o=t[0].x*n.x+t[0].y*n.y,r=o,i=1;i<t.length;i+=1){var s=t[i].x*n.x+t[i].y*n.y;s>r?r=s:s<o&&(o=s)}e.min=o,e.max=r},o._findSupports=function(e,t,n,o){var i,s,a,c,l,u=t.vertices,p=u.length,d=e.position.x,f=e.position.y,y=n.x*o,h=n.y*o,v=Number.MAX_VALUE;for(l=0;l<p;l+=1)(c=y*(d-(s=u[l]).x)+h*(f-s.y))<v&&(v=c,i=s);return v=y*(d-(a=u[(p+i.index-1)%p]).x)+h*(f-a.y),y*(d-(s=u[(i.index+1)%p]).x)+h*(f-s.y)<v?(r[0]=i,r[1]=s,r):(r[0]=i,r[1]=a,r)}},function(e,t,n){var o={};e.exports=o;var r=n(17);o.create=function(e,t){var n=e.bodyA,r=e.bodyB,i={id:o.id(n,r),bodyA:n,bodyB:r,collision:e,contacts:[],activeContacts:[],separation:0,isActive:!0,confirmedActive:!0,isSensor:n.isSensor||r.isSensor,timeCreated:t,timeUpdated:t,inverseMass:0,friction:0,frictionStatic:0,restitution:0,slop:0};return o.update(i,e,t),i},o.update=function(e,t,n){var o=e.contacts,i=t.supports,s=e.activeContacts,a=t.parentA,c=t.parentB,l=a.vertices.length;e.isActive=!0,e.timeUpdated=n,e.collision=t,e.separation=t.depth,e.inverseMass=a.inverseMass+c.inverseMass,e.friction=a.friction<c.friction?a.friction:c.friction,e.frictionStatic=a.frictionStatic>c.frictionStatic?a.frictionStatic:c.frictionStatic,e.restitution=a.restitution>c.restitution?a.restitution:c.restitution,e.slop=a.slop>c.slop?a.slop:c.slop,t.pair=e,s.length=0;for(var u=0;u<i.length;u++){var p=i[u],d=p.body===a?p.index:l+p.index,f=o[d];f?s.push(f):s.push(o[d]=r.create(p))}},o.setActive=function(e,t,n){t?(e.isActive=!0,e.timeUpdated=n):(e.isActive=!1,e.activeContacts.length=0)},o.id=function(e,t){return e.id<t.id?"A"+e.id+"B"+t.id:"A"+t.id+"B"+e.id}},function(e,t,n){var o={};e.exports=o;var r=n(3),i=n(2),s=n(7),a=n(1),c=n(11),l=n(0);o._warming=.4,o._torqueDampen=1,o._minLength=1e-6,o.create=function(e){var t=e;t.bodyA&&!t.pointA&&(t.pointA={x:0,y:0}),t.bodyB&&!t.pointB&&(t.pointB={x:0,y:0});var n=t.bodyA?i.add(t.bodyA.position,t.pointA):t.pointA,o=t.bodyB?i.add(t.bodyB.position,t.pointB):t.pointB,r=i.magnitude(i.sub(n,o));t.length=void 0!==t.length?t.length:r,t.id=t.id||l.nextId(),t.label=t.label||"Constraint",t.type="constraint",t.stiffness=t.stiffness||(t.length>0?1:.7),t.damping=t.damping||0,t.angularStiffness=t.angularStiffness||0,t.angleA=t.bodyA?t.bodyA.angle:t.angleA,t.angleB=t.bodyB?t.bodyB.angle:t.angleB,t.plugin={};var s={visible:!0,lineWidth:2,strokeStyle:"#ffffff",type:"line",anchors:!0};return 0===t.length&&t.stiffness>.1?(s.type="pin",s.anchors=!1):t.stiffness<.9&&(s.type="spring"),t.render=l.extend(s,t.render),t},o.preSolveAll=function(e){for(var t=0;t<e.length;t+=1){var n=e[t],o=n.constraintImpulse;n.isStatic||0===o.x&&0===o.y&&0===o.angle||(n.position.x+=o.x,n.position.y+=o.y,n.angle+=o.angle)}},o.solveAll=function(e,t){for(var n=0;n<e.length;n+=1){var r=e[n],i=!r.bodyA||r.bodyA&&r.bodyA.isStatic,s=!r.bodyB||r.bodyB&&r.bodyB.isStatic;(i||s)&&o.solve(e[n],t)}for(n=0;n<e.length;n+=1)i=!(r=e[n]).bodyA||r.bodyA&&r.bodyA.isStatic,s=!r.bodyB||r.bodyB&&r.bodyB.isStatic,i||s||o.solve(e[n],t)},o.solve=function(e,t){var n=e.bodyA,r=e.bodyB,s=e.pointA,a=e.pointB;if(n||r){n&&!n.isStatic&&(i.rotate(s,n.angle-e.angleA,s),e.angleA=n.angle),r&&!r.isStatic&&(i.rotate(a,r.angle-e.angleB,a),e.angleB=r.angle);var c=s,l=a;if(n&&(c=i.add(n.position,s)),r&&(l=i.add(r.position,a)),c&&l){var u=i.sub(c,l),p=i.magnitude(u);p<o._minLength&&(p=o._minLength);var d,f,y,h,v,x=(p-e.length)/p,m=e.stiffness<1?e.stiffness*t:e.stiffness,g=i.mult(u,x*m),b=(n?n.inverseMass:0)+(r?r.inverseMass:0),_=b+((n?n.inverseInertia:0)+(r?r.inverseInertia:0));if(e.damping){var w=i.create();y=i.div(u,p),v=i.sub(r&&i.sub(r.position,r.positionPrev)||w,n&&i.sub(n.position,n.positionPrev)||w),h=i.dot(y,v)}n&&!n.isStatic&&(f=n.inverseMass/b,n.constraintImpulse.x-=g.x*f,n.constraintImpulse.y-=g.y*f,n.position.x-=g.x*f,n.position.y-=g.y*f,e.damping&&(n.positionPrev.x-=e.damping*y.x*h*f,n.positionPrev.y-=e.damping*y.y*h*f),d=i.cross(s,g)/_*o._torqueDampen*n.inverseInertia*(1-e.angularStiffness),n.constraintImpulse.angle-=d,n.angle-=d),r&&!r.isStatic&&(f=r.inverseMass/b,r.constraintImpulse.x+=g.x*f,r.constraintImpulse.y+=g.y*f,r.position.x+=g.x*f,r.position.y+=g.y*f,e.damping&&(r.positionPrev.x+=e.damping*y.x*h*f,r.positionPrev.y+=e.damping*y.y*h*f),d=i.cross(a,g)/_*o._torqueDampen*r.inverseInertia*(1-e.angularStiffness),r.constraintImpulse.angle+=d,r.angle+=d)}}},o.postSolveAll=function(e){for(var t=0;t<e.length;t++){var n=e[t],l=n.constraintImpulse;if(!(n.isStatic||0===l.x&&0===l.y&&0===l.angle)){s.set(n,!1);for(var u=0;u<n.parts.length;u++){var p=n.parts[u];r.translate(p.vertices,l),u>0&&(p.position.x+=l.x,p.position.y+=l.y),0!==l.angle&&(r.rotate(p.vertices,l.angle,n.position),c.rotate(p.axes,l.angle),u>0&&i.rotateAbout(p.position,l.angle,n.position,p.position)),a.update(p.bounds,p.vertices,n.velocity)}l.angle*=o._warming,l.x*=o._warming,l.y*=o._warming}}},o.pointAWorld=function(e){return{x:(e.bodyA?e.bodyA.position.x:0)+e.pointA.x,y:(e.bodyA?e.bodyA.position.y:0)+e.pointA.y}},o.pointBWorld=function(e){return{x:(e.bodyB?e.bodyB.position.x:0)+e.pointB.x,y:(e.bodyB?e.bodyB.position.y:0)+e.pointB.y}}},function(e,t,n){var o={};e.exports=o;var r=n(2),i=n(0);o.fromVertices=function(e){for(var t={},n=0;n<e.length;n++){var o=(n+1)%e.length,s=r.normalise({x:e[o].y-e[n].y,y:e[n].x-e[o].x}),a=0===s.y?1/0:s.x/s.y;t[a=a.toFixed(3).toString()]=s}return i.values(t)},o.rotate=function(e,t){if(0!==t)for(var n=Math.cos(t),o=Math.sin(t),r=0;r<e.length;r++){var i,s=e[r];i=s.x*n-s.y*o,s.y=s.x*o+s.y*n,s.x=i}}},function(e,t,n){var o={};e.exports=o;var r=n(3),i=n(0),s=n(6),a=n(1),c=n(2);o.rectangle=function(e,t,n,o,a){a=a||{};var c={label:"Rectangle Body",position:{x:e,y:t},vertices:r.fromPath("L 0 0 L "+n+" 0 L "+n+" "+o+" L 0 "+o)};if(a.chamfer){var l=a.chamfer;c.vertices=r.chamfer(c.vertices,l.radius,l.quality,l.qualityMin,l.qualityMax),delete a.chamfer}return s.create(i.extend({},c,a))},o.trapezoid=function(e,t,n,o,a,c){c=c||{};var l,u=n*(a*=.5),p=u+(1-2*a)*n,d=p+u;l=a<.5?"L 0 0 L "+u+" "+-o+" L "+p+" "+-o+" L "+d+" 0":"L 0 0 L "+p+" "+-o+" L "+d+" 0";var f={label:"Trapezoid Body",position:{x:e,y:t},vertices:r.fromPath(l)};if(c.chamfer){var y=c.chamfer;f.vertices=r.chamfer(f.vertices,y.radius,y.quality,y.qualityMin,y.qualityMax),delete c.chamfer}return s.create(i.extend({},f,c))},o.circle=function(e,t,n,r,s){r=r||{};var a={label:"Circle Body",circleRadius:n};s=s||25;var c=Math.ceil(Math.max(10,Math.min(s,n)));return c%2==1&&(c+=1),o.polygon(e,t,c,n,i.extend({},a,r))},o.polygon=function(e,t,n,a,c){if(c=c||{},n<3)return o.circle(e,t,a,c);for(var l=2*Math.PI/n,u="",p=.5*l,d=0;d<n;d+=1){var f=p+d*l,y=Math.cos(f)*a,h=Math.sin(f)*a;u+="L "+y.toFixed(3)+" "+h.toFixed(3)+" "}var v={label:"Polygon Body",position:{x:e,y:t},vertices:r.fromPath(u)};if(c.chamfer){var x=c.chamfer;v.vertices=r.chamfer(v.vertices,x.radius,x.quality,x.qualityMin,x.qualityMax),delete c.chamfer}return s.create(i.extend({},v,c))},o.fromVertices=function(e,t,n,o,l,u,p,d){var f,y,h,v,x,m,g,b,_,w,S=i.getDecomp();for(f=Boolean(S&&S.quickDecomp),o=o||{},h=[],l=void 0!==l&&l,u=void 0!==u?u:.01,p=void 0!==p?p:10,d=void 0!==d?d:.01,i.isArray(n[0])||(n=[n]),_=0;_<n.length;_+=1)if(x=n[_],!(v=r.isConvex(x))&&!f&&i.warnOnce("Bodies.fromVertices: Install the 'poly-decomp' library and use Common.setDecomp or provide 'decomp' as a global to decompose concave vertices."),v||!f)x=v?r.clockwiseSort(x):r.hull(x),h.push({position:{x:e,y:t},vertices:x});else{var A=x.map((function(e){return[e.x,e.y]}));S.makeCCW(A),!1!==u&&S.removeCollinearPoints(A,u),!1!==d&&S.removeDuplicatePoints&&S.removeDuplicatePoints(A,d);var P=S.quickDecomp(A);for(m=0;m<P.length;m++){var C=P[m].map((function(e){return{x:e[0],y:e[1]}}));p>0&&r.area(C)<p||h.push({position:r.centre(C),vertices:C})}}for(m=0;m<h.length;m++)h[m]=s.create(i.extend(h[m],o));if(l)for(m=0;m<h.length;m++){var B=h[m];for(g=m+1;g<h.length;g++){var M=h[g];if(a.overlaps(B.bounds,M.bounds)){var k=B.vertices,I=M.vertices;for(b=0;b<B.vertices.length;b++)for(w=0;w<M.vertices.length;w++){var V=c.magnitudeSquared(c.sub(k[(b+1)%k.length],I[w])),T=c.magnitudeSquared(c.sub(k[b],I[(w+1)%I.length]));V<5&&T<5&&(k[b].isInternal=!0,I[w].isInternal=!0)}}}}return h.length>1?(y=s.create(i.extend({parts:h.slice(0)},o)),s.setPosition(y,{x:e,y:t}),y):h[0]}},function(e,t,n){var o={};e.exports=o;var r=n(0);o.create=function(e){var t={};return e||r.log("Mouse.create: element was undefined, defaulting to document.body","warn"),t.element=e||document.body,t.absolute={x:0,y:0},t.position={x:0,y:0},t.mousedownPosition={x:0,y:0},t.mouseupPosition={x:0,y:0},t.offset={x:0,y:0},t.scale={x:1,y:1},t.wheelDelta=0,t.button=-1,t.pixelRatio=parseInt(t.element.getAttribute("data-pixel-ratio"),10)||1,t.sourceEvents={mousemove:null,mousedown:null,mouseup:null,mousewheel:null},t.mousemove=function(e){var n=o._getRelativeMousePosition(e,t.element,t.pixelRatio);e.changedTouches&&(t.button=0,e.preventDefault()),t.absolute.x=n.x,t.absolute.y=n.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y,t.sourceEvents.mousemove=e},t.mousedown=function(e){var n=o._getRelativeMousePosition(e,t.element,t.pixelRatio);e.changedTouches?(t.button=0,e.preventDefault()):t.button=e.button,t.absolute.x=n.x,t.absolute.y=n.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y,t.mousedownPosition.x=t.position.x,t.mousedownPosition.y=t.position.y,t.sourceEvents.mousedown=e},t.mouseup=function(e){var n=o._getRelativeMousePosition(e,t.element,t.pixelRatio);e.changedTouches&&e.preventDefault(),t.button=-1,t.absolute.x=n.x,t.absolute.y=n.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y,t.mouseupPosition.x=t.position.x,t.mouseupPosition.y=t.position.y,t.sourceEvents.mouseup=e},t.mousewheel=function(e){t.wheelDelta=Math.max(-1,Math.min(1,e.wheelDelta||-e.detail)),e.preventDefault()},o.setElement(t,t.element),t},o.setElement=function(e,t){e.element=t,t.addEventListener("mousemove",e.mousemove),t.addEventListener("mousedown",e.mousedown),t.addEventListener("mouseup",e.mouseup),t.addEventListener("mousewheel",e.mousewheel),t.addEventListener("DOMMouseScroll",e.mousewheel),t.addEventListener("touchmove",e.mousemove),t.addEventListener("touchstart",e.mousedown),t.addEventListener("touchend",e.mouseup)},o.clearSourceEvents=function(e){e.sourceEvents.mousemove=null,e.sourceEvents.mousedown=null,e.sourceEvents.mouseup=null,e.sourceEvents.mousewheel=null,e.wheelDelta=0},o.setOffset=function(e,t){e.offset.x=t.x,e.offset.y=t.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y},o.setScale=function(e,t){e.scale.x=t.x,e.scale.y=t.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y},o._getRelativeMousePosition=function(e,t,n){var o,r,i=t.getBoundingClientRect(),s=document.documentElement||document.body.parentNode||document.body,a=void 0!==window.pageXOffset?window.pageXOffset:s.scrollLeft,c=void 0!==window.pageYOffset?window.pageYOffset:s.scrollTop,l=e.changedTouches;return l?(o=l[0].pageX-i.left-a,r=l[0].pageY-i.top-c):(o=e.pageX-i.left-a,r=e.pageY-i.top-c),{x:o/(t.clientWidth/(t.width||t.clientWidth)*n),y:r/(t.clientHeight/(t.height||t.clientHeight)*n)}}},function(e,t,n){var o={};e.exports=o;var r=n(0),i=n(8);o.create=function(e){return r.extend({bodies:[],pairs:null},e)},o.setBodies=function(e,t){e.bodies=t.slice(0)},o.clear=function(e){e.bodies=[]},o.collisions=function(e){var t,n,r=[],s=e.pairs,a=e.bodies,c=a.length,l=o.canCollide,u=i.collides;for(a.sort(o._compareBoundsX),t=0;t<c;t++){var p=a[t],d=p.bounds,f=p.bounds.max.x,y=p.bounds.max.y,h=p.bounds.min.y,v=p.isStatic||p.isSleeping,x=p.parts.length,m=1===x;for(n=t+1;n<c;n++){var g=a[n];if((B=g.bounds).min.x>f)break;if(!(y<B.min.y||h>B.max.y)&&(!v||!g.isStatic&&!g.isSleeping)&&l(p.collisionFilter,g.collisionFilter)){var b=g.parts.length;if(m&&1===b)(P=u(p,g,s))&&r.push(P);else for(var _=b>1?1:0,w=x>1?1:0;w<x;w++)for(var S=p.parts[w],A=(d=S.bounds,_);A<b;A++){var P,C=g.parts[A],B=C.bounds;d.min.x>B.max.x||d.max.x<B.min.x||d.max.y<B.min.y||d.min.y>B.max.y||(P=u(S,C,s))&&r.push(P)}}}}return r},o.canCollide=function(e,t){return e.group===t.group&&0!==e.group?e.group>0:0!=(e.mask&t.category)&&0!=(t.mask&e.category)},o._compareBoundsX=function(e,t){return e.bounds.min.x-t.bounds.min.x}},function(e,t,n){var o={};e.exports=o;var r=n(0);o._registry={},o.register=function(e){if(o.isPlugin(e)||r.warn("Plugin.register:",o.toString(e),"does not implement all required fields."),e.name in o._registry){var t=o._registry[e.name],n=o.versionParse(e.version).number,i=o.versionParse(t.version).number;n>i?(r.warn("Plugin.register:",o.toString(t),"was upgraded to",o.toString(e)),o._registry[e.name]=e):n<i?r.warn("Plugin.register:",o.toString(t),"can not be downgraded to",o.toString(e)):e!==t&&r.warn("Plugin.register:",o.toString(e),"is already registered to different plugin object")}else o._registry[e.name]=e;return e},o.resolve=function(e){return o._registry[o.dependencyParse(e).name]},o.toString=function(e){return"string"==typeof e?e:(e.name||"anonymous")+"@"+(e.version||e.range||"0.0.0")},o.isPlugin=function(e){return e&&e.name&&e.version&&e.install},o.isUsed=function(e,t){return e.used.indexOf(t)>-1},o.isFor=function(e,t){var n=e.for&&o.dependencyParse(e.for);return!e.for||t.name===n.name&&o.versionSatisfies(t.version,n.range)},o.use=function(e,t){if(e.uses=(e.uses||[]).concat(t||[]),0!==e.uses.length){for(var n=o.dependencies(e),i=r.topologicalSort(n),s=[],a=0;a<i.length;a+=1)if(i[a]!==e.name){var c=o.resolve(i[a]);c?o.isUsed(e,c.name)||(o.isFor(c,e)||(r.warn("Plugin.use:",o.toString(c),"is for",c.for,"but installed on",o.toString(e)+"."),c._warned=!0),c.install?c.install(e):(r.warn("Plugin.use:",o.toString(c),"does not specify an install function."),c._warned=!0),c._warned?(s.push("🔶 "+o.toString(c)),delete c._warned):s.push("✅ "+o.toString(c)),e.used.push(c.name)):s.push("❌ "+i[a])}s.length>0&&r.info(s.join("  "))}else r.warn("Plugin.use:",o.toString(e),"does not specify any dependencies to install.")},o.dependencies=function(e,t){var n=o.dependencyParse(e),i=n.name;if(!(i in(t=t||{}))){e=o.resolve(e)||e,t[i]=r.map(e.uses||[],(function(t){o.isPlugin(t)&&o.register(t);var i=o.dependencyParse(t),s=o.resolve(t);return s&&!o.versionSatisfies(s.version,i.range)?(r.warn("Plugin.dependencies:",o.toString(s),"does not satisfy",o.toString(i),"used by",o.toString(n)+"."),s._warned=!0,e._warned=!0):s||(r.warn("Plugin.dependencies:",o.toString(t),"used by",o.toString(n),"could not be resolved."),e._warned=!0),i.name}));for(var s=0;s<t[i].length;s+=1)o.dependencies(t[i][s],t);return t}},o.dependencyParse=function(e){return r.isString(e)?(/^[\w-]+(@(\*|[\^~]?\d+\.\d+\.\d+(-[0-9A-Za-z-+]+)?))?$/.test(e)||r.warn("Plugin.dependencyParse:",e,"is not a valid dependency string."),{name:e.split("@")[0],range:e.split("@")[1]||"*"}):{name:e.name,range:e.range||e.version}},o.versionParse=function(e){var t=/^(\*)|(\^|~|>=|>)?\s*((\d+)\.(\d+)\.(\d+))(-[0-9A-Za-z-+]+)?$/;t.test(e)||r.warn("Plugin.versionParse:",e,"is not a valid version or range.");var n=t.exec(e),o=Number(n[4]),i=Number(n[5]),s=Number(n[6]);return{isRange:Boolean(n[1]||n[2]),version:n[3],range:e,operator:n[1]||n[2]||"",major:o,minor:i,patch:s,parts:[o,i,s],prerelease:n[7],number:1e8*o+1e4*i+s}},o.versionSatisfies=function(e,t){t=t||"*";var n=o.versionParse(t),r=o.versionParse(e);if(n.isRange){if("*"===n.operator||"*"===e)return!0;if(">"===n.operator)return r.number>n.number;if(">="===n.operator)return r.number>=n.number;if("~"===n.operator)return r.major===n.major&&r.minor===n.minor&&r.patch>=n.patch;if("^"===n.operator)return n.major>0?r.major===n.major&&r.number>=n.number:n.minor>0?r.minor===n.minor&&r.patch>=n.patch:r.patch===n.patch}return e===t||"*"===e}},function(e,t,n){var o={};e.exports=o;var r=n(0),i=n(5),s=n(1),a=n(4),c=n(2),l=n(13);!function(){var e,t;"undefined"!=typeof window&&(e=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(e){window.setTimeout((function(){e(r.now())}),1e3/60)},t=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),o._goodFps=30,o._goodDelta=1e3/60,o.create=function(e){var t={controller:o,engine:null,element:null,canvas:null,mouse:null,frameRequestId:null,timing:{historySize:60,delta:0,deltaHistory:[],lastTime:0,lastTimestamp:0,lastElapsed:0,timestampElapsed:0,timestampElapsedHistory:[],engineDeltaHistory:[],engineElapsedHistory:[],elapsedHistory:[]},options:{width:800,height:600,pixelRatio:1,background:"#14151f",wireframeBackground:"#14151f",hasBounds:!!e.bounds,enabled:!0,wireframes:!0,showSleeping:!0,showDebug:!1,showStats:!1,showPerformance:!1,showBounds:!1,showVelocity:!1,showCollisions:!1,showSeparations:!1,showAxes:!1,showPositions:!1,showAngleIndicator:!1,showIds:!1,showVertexNumbers:!1,showConvexHulls:!1,showInternalEdges:!1,showMousePosition:!1}},n=r.extend(t,e);return n.canvas&&(n.canvas.width=n.options.width||n.canvas.width,n.canvas.height=n.options.height||n.canvas.height),n.mouse=e.mouse,n.engine=e.engine,n.canvas=n.canvas||p(n.options.width,n.options.height),n.context=n.canvas.getContext("2d"),n.textures={},n.bounds=n.bounds||{min:{x:0,y:0},max:{x:n.canvas.width,y:n.canvas.height}},n.options.showBroadphase=!1,1!==n.options.pixelRatio&&o.setPixelRatio(n,n.options.pixelRatio),r.isElement(n.element)?n.element.appendChild(n.canvas):n.canvas.parentNode||r.log("Render.create: options.element was undefined, render.canvas was created but not appended","warn"),n},o.run=function(t){!function r(i){t.frameRequestId=e(r),n(t,i),o.world(t,i),(t.options.showStats||t.options.showDebug)&&o.stats(t,t.context,i),(t.options.showPerformance||t.options.showDebug)&&o.performance(t,t.context,i)}()},o.stop=function(e){t(e.frameRequestId)},o.setPixelRatio=function(e,t){var n=e.options,o=e.canvas;"auto"===t&&(t=d(o)),n.pixelRatio=t,o.setAttribute("data-pixel-ratio",t),o.width=n.width*t,o.height=n.height*t,o.style.width=n.width+"px",o.style.height=n.height+"px"},o.lookAt=function(e,t,n,o){o=void 0===o||o,t=r.isArray(t)?t:[t],n=n||{x:0,y:0};for(var i={min:{x:1/0,y:1/0},max:{x:-1/0,y:-1/0}},s=0;s<t.length;s+=1){var a=t[s],c=a.bounds?a.bounds.min:a.min||a.position||a,u=a.bounds?a.bounds.max:a.max||a.position||a;c&&u&&(c.x<i.min.x&&(i.min.x=c.x),u.x>i.max.x&&(i.max.x=u.x),c.y<i.min.y&&(i.min.y=c.y),u.y>i.max.y&&(i.max.y=u.y))}var p=i.max.x-i.min.x+2*n.x,d=i.max.y-i.min.y+2*n.y,f=e.canvas.height,y=e.canvas.width/f,h=p/d,v=1,x=1;h>y?x=h/y:v=y/h,e.options.hasBounds=!0,e.bounds.min.x=i.min.x,e.bounds.max.x=i.min.x+p*v,e.bounds.min.y=i.min.y,e.bounds.max.y=i.min.y+d*x,o&&(e.bounds.min.x+=.5*p-p*v*.5,e.bounds.max.x+=.5*p-p*v*.5,e.bounds.min.y+=.5*d-d*x*.5,e.bounds.max.y+=.5*d-d*x*.5),e.bounds.min.x-=n.x,e.bounds.max.x-=n.x,e.bounds.min.y-=n.y,e.bounds.max.y-=n.y,e.mouse&&(l.setScale(e.mouse,{x:(e.bounds.max.x-e.bounds.min.x)/e.canvas.width,y:(e.bounds.max.y-e.bounds.min.y)/e.canvas.height}),l.setOffset(e.mouse,e.bounds.min))},o.startViewTransform=function(e){var t=e.bounds.max.x-e.bounds.min.x,n=e.bounds.max.y-e.bounds.min.y,o=t/e.options.width,r=n/e.options.height;e.context.setTransform(e.options.pixelRatio/o,0,0,e.options.pixelRatio/r,0,0),e.context.translate(-e.bounds.min.x,-e.bounds.min.y)},o.endViewTransform=function(e){e.context.setTransform(e.options.pixelRatio,0,0,e.options.pixelRatio,0,0)},o.world=function(e,t){var n,u=r.now(),p=e.engine,d=p.world,f=e.canvas,h=e.context,v=e.options,x=e.timing,m=i.allBodies(d),g=i.allConstraints(d),b=v.wireframes?v.wireframeBackground:v.background,_=[],w=[],S={timestamp:p.timing.timestamp};if(a.trigger(e,"beforeRender",S),e.currentBackground!==b&&y(e,b),h.globalCompositeOperation="source-in",h.fillStyle="transparent",h.fillRect(0,0,f.width,f.height),h.globalCompositeOperation="source-over",v.hasBounds){for(n=0;n<m.length;n++){var A=m[n];s.overlaps(A.bounds,e.bounds)&&_.push(A)}for(n=0;n<g.length;n++){var P=g[n],C=P.bodyA,B=P.bodyB,M=P.pointA,k=P.pointB;C&&(M=c.add(C.position,P.pointA)),B&&(k=c.add(B.position,P.pointB)),M&&k&&(s.contains(e.bounds,M)||s.contains(e.bounds,k))&&w.push(P)}o.startViewTransform(e),e.mouse&&(l.setScale(e.mouse,{x:(e.bounds.max.x-e.bounds.min.x)/e.options.width,y:(e.bounds.max.y-e.bounds.min.y)/e.options.height}),l.setOffset(e.mouse,e.bounds.min))}else w=g,_=m,1!==e.options.pixelRatio&&e.context.setTransform(e.options.pixelRatio,0,0,e.options.pixelRatio,0,0);!v.wireframes||p.enableSleeping&&v.showSleeping?o.bodies(e,_,h):(v.showConvexHulls&&o.bodyConvexHulls(e,_,h),o.bodyWireframes(e,_,h)),v.showBounds&&o.bodyBounds(e,_,h),(v.showAxes||v.showAngleIndicator)&&o.bodyAxes(e,_,h),v.showPositions&&o.bodyPositions(e,_,h),v.showVelocity&&o.bodyVelocity(e,_,h),v.showIds&&o.bodyIds(e,_,h),v.showSeparations&&o.separations(e,p.pairs.list,h),v.showCollisions&&o.collisions(e,p.pairs.list,h),v.showVertexNumbers&&o.vertexNumbers(e,_,h),v.showMousePosition&&o.mousePosition(e,e.mouse,h),o.constraints(w,h),v.hasBounds&&o.endViewTransform(e),a.trigger(e,"afterRender",S),x.lastElapsed=r.now()-u},o.stats=function(e,t,n){for(var o=e.engine,r=o.world,s=i.allBodies(r),a=0,c=0,l=0;l<s.length;l+=1)a+=s[l].parts.length;var u={Part:a,Body:s.length,Cons:i.allConstraints(r).length,Comp:i.allComposites(r).length,Pair:o.pairs.list.length};for(var p in t.fillStyle="#0e0f19",t.fillRect(c,0,302.5,44),t.font="12px Arial",t.textBaseline="top",t.textAlign="right",u){var d=u[p];t.fillStyle="#aaa",t.fillText(p,c+55,8),t.fillStyle="#eee",t.fillText(d,c+55,26),c+=55}},o.performance=function(e,t){var n=e.engine,r=e.timing,i=r.deltaHistory,s=r.elapsedHistory,a=r.timestampElapsedHistory,c=r.engineDeltaHistory,l=r.engineElapsedHistory,p=n.timing.lastDelta,d=u(i),f=u(s),y=u(c),h=u(l),v=u(a)/d||0,x=1e3/d||0;t.fillStyle="#0e0f19",t.fillRect(0,50,370,34),o.status(t,10,69,60,4,i.length,Math.round(x)+" fps",x/o._goodFps,(function(e){return i[e]/d-1})),o.status(t,82,69,60,4,c.length,p.toFixed(2)+" dt",o._goodDelta/p,(function(e){return c[e]/y-1})),o.status(t,154,69,60,4,l.length,h.toFixed(2)+" ut",1-h/o._goodFps,(function(e){return l[e]/h-1})),o.status(t,226,69,60,4,s.length,f.toFixed(2)+" rt",1-f/o._goodFps,(function(e){return s[e]/f-1})),o.status(t,298,69,60,4,a.length,v.toFixed(2)+" x",v*v*v,(function(e){return(a[e]/i[e]/v||0)-1}))},o.status=function(e,t,n,o,i,s,a,c,l){e.strokeStyle="#888",e.fillStyle="#444",e.lineWidth=1,e.fillRect(t,n+7,o,1),e.beginPath(),e.moveTo(t,n+7-i*r.clamp(.4*l(0),-2,2));for(var u=0;u<o;u+=1)e.lineTo(t+u,n+7-(u<s?i*r.clamp(.4*l(u),-2,2):0));e.stroke(),e.fillStyle="hsl("+r.clamp(25+95*c,0,120)+",100%,60%)",e.fillRect(t,n-7,4,4),e.font="12px Arial",e.textBaseline="middle",e.textAlign="right",e.fillStyle="#eee",e.fillText(a,t+o,n-5)},o.constraints=function(e,t){for(var n=t,o=0;o<e.length;o++){var i=e[o];if(i.render.visible&&i.pointA&&i.pointB){var s,a,l=i.bodyA,u=i.bodyB;if(s=l?c.add(l.position,i.pointA):i.pointA,"pin"===i.render.type)n.beginPath(),n.arc(s.x,s.y,3,0,2*Math.PI),n.closePath();else{if(a=u?c.add(u.position,i.pointB):i.pointB,n.beginPath(),n.moveTo(s.x,s.y),"spring"===i.render.type)for(var p,d=c.sub(a,s),f=c.perp(c.normalise(d)),y=Math.ceil(r.clamp(i.length/5,12,20)),h=1;h<y;h+=1)p=h%2==0?1:-1,n.lineTo(s.x+d.x*(h/y)+f.x*p*4,s.y+d.y*(h/y)+f.y*p*4);n.lineTo(a.x,a.y)}i.render.lineWidth&&(n.lineWidth=i.render.lineWidth,n.strokeStyle=i.render.strokeStyle,n.stroke()),i.render.anchors&&(n.fillStyle=i.render.strokeStyle,n.beginPath(),n.arc(s.x,s.y,3,0,2*Math.PI),n.arc(a.x,a.y,3,0,2*Math.PI),n.closePath(),n.fill())}}},o.bodies=function(e,t,n){var o,r,i,s,a=n,c=(e.engine,e.options),l=c.showInternalEdges||!c.wireframes;for(i=0;i<t.length;i++)if((o=t[i]).render.visible)for(s=o.parts.length>1?1:0;s<o.parts.length;s++)if((r=o.parts[s]).render.visible){if(c.showSleeping&&o.isSleeping?a.globalAlpha=.5*r.render.opacity:1!==r.render.opacity&&(a.globalAlpha=r.render.opacity),r.render.sprite&&r.render.sprite.texture&&!c.wireframes){var u=r.render.sprite,p=f(e,u.texture);a.translate(r.position.x,r.position.y),a.rotate(r.angle),a.drawImage(p,p.width*-u.xOffset*u.xScale,p.height*-u.yOffset*u.yScale,p.width*u.xScale,p.height*u.yScale),a.rotate(-r.angle),a.translate(-r.position.x,-r.position.y)}else{if(r.circleRadius)a.beginPath(),a.arc(r.position.x,r.position.y,r.circleRadius,0,2*Math.PI);else{a.beginPath(),a.moveTo(r.vertices[0].x,r.vertices[0].y);for(var d=1;d<r.vertices.length;d++)!r.vertices[d-1].isInternal||l?a.lineTo(r.vertices[d].x,r.vertices[d].y):a.moveTo(r.vertices[d].x,r.vertices[d].y),r.vertices[d].isInternal&&!l&&a.moveTo(r.vertices[(d+1)%r.vertices.length].x,r.vertices[(d+1)%r.vertices.length].y);a.lineTo(r.vertices[0].x,r.vertices[0].y),a.closePath()}c.wireframes?(a.lineWidth=1,a.strokeStyle="#bbb",a.stroke()):(a.fillStyle=r.render.fillStyle,r.render.lineWidth&&(a.lineWidth=r.render.lineWidth,a.strokeStyle=r.render.strokeStyle,a.stroke()),a.fill())}a.globalAlpha=1}},o.bodyWireframes=function(e,t,n){var o,r,i,s,a,c=n,l=e.options.showInternalEdges;for(c.beginPath(),i=0;i<t.length;i++)if((o=t[i]).render.visible)for(a=o.parts.length>1?1:0;a<o.parts.length;a++){for(r=o.parts[a],c.moveTo(r.vertices[0].x,r.vertices[0].y),s=1;s<r.vertices.length;s++)!r.vertices[s-1].isInternal||l?c.lineTo(r.vertices[s].x,r.vertices[s].y):c.moveTo(r.vertices[s].x,r.vertices[s].y),r.vertices[s].isInternal&&!l&&c.moveTo(r.vertices[(s+1)%r.vertices.length].x,r.vertices[(s+1)%r.vertices.length].y);c.lineTo(r.vertices[0].x,r.vertices[0].y)}c.lineWidth=1,c.strokeStyle="#bbb",c.stroke()},o.bodyConvexHulls=function(e,t,n){var o,r,i,s=n;for(s.beginPath(),r=0;r<t.length;r++)if((o=t[r]).render.visible&&1!==o.parts.length){for(s.moveTo(o.vertices[0].x,o.vertices[0].y),i=1;i<o.vertices.length;i++)s.lineTo(o.vertices[i].x,o.vertices[i].y);s.lineTo(o.vertices[0].x,o.vertices[0].y)}s.lineWidth=1,s.strokeStyle="rgba(255,255,255,0.2)",s.stroke()},o.vertexNumbers=function(e,t,n){var o,r,i,s=n;for(o=0;o<t.length;o++){var a=t[o].parts;for(i=a.length>1?1:0;i<a.length;i++){var c=a[i];for(r=0;r<c.vertices.length;r++)s.fillStyle="rgba(255,255,255,0.2)",s.fillText(o+"_"+r,c.position.x+.8*(c.vertices[r].x-c.position.x),c.position.y+.8*(c.vertices[r].y-c.position.y))}}},o.mousePosition=function(e,t,n){var o=n;o.fillStyle="rgba(255,255,255,0.8)",o.fillText(t.position.x+"  "+t.position.y,t.position.x+5,t.position.y-5)},o.bodyBounds=function(e,t,n){var o=n,r=(e.engine,e.options);o.beginPath();for(var i=0;i<t.length;i++)if(t[i].render.visible)for(var s=t[i].parts,a=s.length>1?1:0;a<s.length;a++){var c=s[a];o.rect(c.bounds.min.x,c.bounds.min.y,c.bounds.max.x-c.bounds.min.x,c.bounds.max.y-c.bounds.min.y)}r.wireframes?o.strokeStyle="rgba(255,255,255,0.08)":o.strokeStyle="rgba(0,0,0,0.1)",o.lineWidth=1,o.stroke()},o.bodyAxes=function(e,t,n){var o,r,i,s,a=n,c=(e.engine,e.options);for(a.beginPath(),r=0;r<t.length;r++){var l=t[r],u=l.parts;if(l.render.visible)if(c.showAxes)for(i=u.length>1?1:0;i<u.length;i++)for(o=u[i],s=0;s<o.axes.length;s++){var p=o.axes[s];a.moveTo(o.position.x,o.position.y),a.lineTo(o.position.x+20*p.x,o.position.y+20*p.y)}else for(i=u.length>1?1:0;i<u.length;i++)for(o=u[i],s=0;s<o.axes.length;s++)a.moveTo(o.position.x,o.position.y),a.lineTo((o.vertices[0].x+o.vertices[o.vertices.length-1].x)/2,(o.vertices[0].y+o.vertices[o.vertices.length-1].y)/2)}c.wireframes?(a.strokeStyle="indianred",a.lineWidth=1):(a.strokeStyle="rgba(255, 255, 255, 0.4)",a.globalCompositeOperation="overlay",a.lineWidth=2),a.stroke(),a.globalCompositeOperation="source-over"},o.bodyPositions=function(e,t,n){var o,r,i,s,a=n,c=(e.engine,e.options);for(a.beginPath(),i=0;i<t.length;i++)if((o=t[i]).render.visible)for(s=0;s<o.parts.length;s++)r=o.parts[s],a.arc(r.position.x,r.position.y,3,0,2*Math.PI,!1),a.closePath();for(c.wireframes?a.fillStyle="indianred":a.fillStyle="rgba(0,0,0,0.5)",a.fill(),a.beginPath(),i=0;i<t.length;i++)(o=t[i]).render.visible&&(a.arc(o.positionPrev.x,o.positionPrev.y,2,0,2*Math.PI,!1),a.closePath());a.fillStyle="rgba(255,165,0,0.8)",a.fill()},o.bodyVelocity=function(e,t,n){var o=n;o.beginPath();for(var r=0;r<t.length;r++){var i=t[r];i.render.visible&&(o.moveTo(i.position.x,i.position.y),o.lineTo(i.position.x+2*(i.position.x-i.positionPrev.x),i.position.y+2*(i.position.y-i.positionPrev.y)))}o.lineWidth=3,o.strokeStyle="cornflowerblue",o.stroke()},o.bodyIds=function(e,t,n){var o,r,i=n;for(o=0;o<t.length;o++)if(t[o].render.visible){var s=t[o].parts;for(r=s.length>1?1:0;r<s.length;r++){var a=s[r];i.font="12px Arial",i.fillStyle="rgba(255,255,255,0.5)",i.fillText(a.id,a.position.x+10,a.position.y-10)}}},o.collisions=function(e,t,n){var o,r,i,s,a=n,c=e.options;for(a.beginPath(),i=0;i<t.length;i++)if((o=t[i]).isActive)for(r=o.collision,s=0;s<o.activeContacts.length;s++){var l=o.activeContacts[s].vertex;a.rect(l.x-1.5,l.y-1.5,3.5,3.5)}for(c.wireframes?a.fillStyle="rgba(255,255,255,0.7)":a.fillStyle="orange",a.fill(),a.beginPath(),i=0;i<t.length;i++)if((o=t[i]).isActive&&(r=o.collision,o.activeContacts.length>0)){var u=o.activeContacts[0].vertex.x,p=o.activeContacts[0].vertex.y;2===o.activeContacts.length&&(u=(o.activeContacts[0].vertex.x+o.activeContacts[1].vertex.x)/2,p=(o.activeContacts[0].vertex.y+o.activeContacts[1].vertex.y)/2),r.bodyB===r.supports[0].body||!0===r.bodyA.isStatic?a.moveTo(u-8*r.normal.x,p-8*r.normal.y):a.moveTo(u+8*r.normal.x,p+8*r.normal.y),a.lineTo(u,p)}c.wireframes?a.strokeStyle="rgba(255,165,0,0.7)":a.strokeStyle="orange",a.lineWidth=1,a.stroke()},o.separations=function(e,t,n){var o,r,i,s,a,c=n,l=e.options;for(c.beginPath(),a=0;a<t.length;a++)if((o=t[a]).isActive){i=(r=o.collision).bodyA;var u=1;(s=r.bodyB).isStatic||i.isStatic||(u=.5),s.isStatic&&(u=0),c.moveTo(s.position.x,s.position.y),c.lineTo(s.position.x-r.penetration.x*u,s.position.y-r.penetration.y*u),u=1,s.isStatic||i.isStatic||(u=.5),i.isStatic&&(u=0),c.moveTo(i.position.x,i.position.y),c.lineTo(i.position.x+r.penetration.x*u,i.position.y+r.penetration.y*u)}l.wireframes?c.strokeStyle="rgba(255,165,0,0.5)":c.strokeStyle="orange",c.stroke()},o.inspector=function(e,t){e.engine;var n,o=e.selected,r=e.render,i=r.options;if(i.hasBounds){var s=r.bounds.max.x-r.bounds.min.x,a=r.bounds.max.y-r.bounds.min.y,c=s/r.options.width,l=a/r.options.height;t.scale(1/c,1/l),t.translate(-r.bounds.min.x,-r.bounds.min.y)}for(var u=0;u<o.length;u++){var p=o[u].data;switch(t.translate(.5,.5),t.lineWidth=1,t.strokeStyle="rgba(255,165,0,0.9)",t.setLineDash([1,2]),p.type){case"body":n=p.bounds,t.beginPath(),t.rect(Math.floor(n.min.x-3),Math.floor(n.min.y-3),Math.floor(n.max.x-n.min.x+6),Math.floor(n.max.y-n.min.y+6)),t.closePath(),t.stroke();break;case"constraint":var d=p.pointA;p.bodyA&&(d=p.pointB),t.beginPath(),t.arc(d.x,d.y,10,0,2*Math.PI),t.closePath(),t.stroke()}t.setLineDash([]),t.translate(-.5,-.5)}null!==e.selectStart&&(t.translate(.5,.5),t.lineWidth=1,t.strokeStyle="rgba(255,165,0,0.6)",t.fillStyle="rgba(255,165,0,0.1)",n=e.selectBounds,t.beginPath(),t.rect(Math.floor(n.min.x),Math.floor(n.min.y),Math.floor(n.max.x-n.min.x),Math.floor(n.max.y-n.min.y)),t.closePath(),t.stroke(),t.fill(),t.translate(-.5,-.5)),i.hasBounds&&t.setTransform(1,0,0,1,0,0)};var n=function(e,t){var n=e.engine,r=e.timing,i=r.historySize,s=n.timing.timestamp;r.delta=t-r.lastTime||o._goodDelta,r.lastTime=t,r.timestampElapsed=s-r.lastTimestamp||0,r.lastTimestamp=s,r.deltaHistory.unshift(r.delta),r.deltaHistory.length=Math.min(r.deltaHistory.length,i),r.engineDeltaHistory.unshift(n.timing.lastDelta),r.engineDeltaHistory.length=Math.min(r.engineDeltaHistory.length,i),r.timestampElapsedHistory.unshift(r.timestampElapsed),r.timestampElapsedHistory.length=Math.min(r.timestampElapsedHistory.length,i),r.engineElapsedHistory.unshift(n.timing.lastElapsed),r.engineElapsedHistory.length=Math.min(r.engineElapsedHistory.length,i),r.elapsedHistory.unshift(r.lastElapsed),r.elapsedHistory.length=Math.min(r.elapsedHistory.length,i)},u=function(e){for(var t=0,n=0;n<e.length;n+=1)t+=e[n];return t/e.length||0},p=function(e,t){var n=document.createElement("canvas");return n.width=e,n.height=t,n.oncontextmenu=function(){return!1},n.onselectstart=function(){return!1},n},d=function(e){var t=e.getContext("2d");return(window.devicePixelRatio||1)/(t.webkitBackingStorePixelRatio||t.mozBackingStorePixelRatio||t.msBackingStorePixelRatio||t.oBackingStorePixelRatio||t.backingStorePixelRatio||1)},f=function(e,t){var n=e.textures[t];return n||((n=e.textures[t]=new Image).src=t,n)},y=function(e,t){var n=t;/(jpg|gif|png)$/.test(t)&&(n="url("+t+")"),e.canvas.style.background=n,e.canvas.style.backgroundSize="contain",e.currentBackground=t}}()},function(e,t){var n={};e.exports=n,n.create=function(e){return{vertex:e,normalImpulse:0,tangentImpulse:0}}},function(e,t,n){var o={};e.exports=o;var r=n(7),i=n(19),s=n(14),a=n(20),c=n(4),l=n(5),u=n(10),p=n(0),d=n(6);o.create=function(e){e=e||{};var t=p.extend({positionIterations:6,velocityIterations:4,constraintIterations:2,enableSleeping:!1,events:[],plugin:{},gravity:{x:0,y:1,scale:.001},timing:{timestamp:0,timeScale:1,lastDelta:0,lastElapsed:0}},e);return t.world=e.world||l.create({label:"World"}),t.pairs=e.pairs||a.create(),t.detector=e.detector||s.create(),t.grid={buckets:[]},t.world.gravity=t.gravity,t.broadphase=t.grid,t.metrics={},t},o.update=function(e,t,n){var d=p.now();t=t||1e3/60,n=n||1;var f,y=e.world,h=e.detector,v=e.pairs,x=e.timing,m=x.timestamp;x.timestamp+=t*x.timeScale,x.lastDelta=t*x.timeScale;var g={timestamp:x.timestamp};c.trigger(e,"beforeUpdate",g);var b=l.allBodies(y),_=l.allConstraints(y);for(y.isModified&&s.setBodies(h,b),y.isModified&&l.setModified(y,!1,!1,!0),e.enableSleeping&&r.update(b,x.timeScale),o._bodiesApplyGravity(b,e.gravity),o._bodiesUpdate(b,t,x.timeScale,n,y.bounds),u.preSolveAll(b),f=0;f<e.constraintIterations;f++)u.solveAll(_,x.timeScale);u.postSolveAll(b),h.pairs=e.pairs;var w=s.collisions(h);for(a.update(v,w,m),e.enableSleeping&&r.afterCollisions(v.list,x.timeScale),v.collisionStart.length>0&&c.trigger(e,"collisionStart",{pairs:v.collisionStart}),i.preSolvePosition(v.list),f=0;f<e.positionIterations;f++)i.solvePosition(v.list,x.timeScale);for(i.postSolvePosition(b),u.preSolveAll(b),f=0;f<e.constraintIterations;f++)u.solveAll(_,x.timeScale);for(u.postSolveAll(b),i.preSolveVelocity(v.list),f=0;f<e.velocityIterations;f++)i.solveVelocity(v.list,x.timeScale);return v.collisionActive.length>0&&c.trigger(e,"collisionActive",{pairs:v.collisionActive}),v.collisionEnd.length>0&&c.trigger(e,"collisionEnd",{pairs:v.collisionEnd}),o._bodiesClearForces(b),c.trigger(e,"afterUpdate",g),e.timing.lastElapsed=p.now()-d,e},o.merge=function(e,t){if(p.extend(e,t),t.world){e.world=t.world,o.clear(e);for(var n=l.allBodies(e.world),i=0;i<n.length;i++){var s=n[i];r.set(s,!1),s.id=p.nextId()}}},o.clear=function(e){a.clear(e.pairs),s.clear(e.detector)},o._bodiesClearForces=function(e){for(var t=0;t<e.length;t++){var n=e[t];n.force.x=0,n.force.y=0,n.torque=0}},o._bodiesApplyGravity=function(e,t){var n=void 0!==t.scale?t.scale:.001;if((0!==t.x||0!==t.y)&&0!==n)for(var o=0;o<e.length;o++){var r=e[o];r.isStatic||r.isSleeping||(r.force.y+=r.mass*t.y*n,r.force.x+=r.mass*t.x*n)}},o._bodiesUpdate=function(e,t,n,o,r){for(var i=0;i<e.length;i++){var s=e[i];s.isStatic||s.isSleeping||d.update(s,t,n,o)}}},function(e,t,n){var o={};e.exports=o;var r=n(3),i=n(1);o._restingThresh=4,o._restingThreshTangent=6,o._positionDampen=.9,o._positionWarming=.8,o._frictionNormalMultiplier=5,o.preSolvePosition=function(e){var t,n,o,r=e.length;for(t=0;t<r;t++)(n=e[t]).isActive&&(o=n.activeContacts.length,n.collision.parentA.totalContacts+=o,n.collision.parentB.totalContacts+=o)},o.solvePosition=function(e,t){var n,r,i,s,a,c,l,u,p=o._positionDampen,d=e.length;for(n=0;n<d;n++)(r=e[n]).isActive&&!r.isSensor&&(s=(i=r.collision).parentA,a=i.parentB,c=i.normal,r.separation=c.x*(a.positionImpulse.x+i.penetration.x-s.positionImpulse.x)+c.y*(a.positionImpulse.y+i.penetration.y-s.positionImpulse.y));for(n=0;n<d;n++)(r=e[n]).isActive&&!r.isSensor&&(s=(i=r.collision).parentA,a=i.parentB,c=i.normal,u=(r.separation-r.slop)*t,(s.isStatic||a.isStatic)&&(u*=2),s.isStatic||s.isSleeping||(l=p/s.totalContacts,s.positionImpulse.x+=c.x*u*l,s.positionImpulse.y+=c.y*u*l),a.isStatic||a.isSleeping||(l=p/a.totalContacts,a.positionImpulse.x-=c.x*u*l,a.positionImpulse.y-=c.y*u*l))},o.postSolvePosition=function(e){for(var t=o._positionWarming,n=e.length,s=r.translate,a=i.update,c=0;c<n;c++){var l=e[c],u=l.positionImpulse,p=u.x,d=u.y,f=l.velocity;if(l.totalContacts=0,0!==p||0!==d){for(var y=0;y<l.parts.length;y++){var h=l.parts[y];s(h.vertices,u),a(h.bounds,h.vertices,f),h.position.x+=p,h.position.y+=d}l.positionPrev.x+=p,l.positionPrev.y+=d,p*f.x+d*f.y<0?(u.x=0,u.y=0):(u.x*=t,u.y*=t)}}},o.preSolveVelocity=function(e){var t,n,o=e.length;for(t=0;t<o;t++){var r=e[t];if(r.isActive&&!r.isSensor){var i=r.activeContacts,s=i.length,a=r.collision,c=a.parentA,l=a.parentB,u=a.normal,p=a.tangent;for(n=0;n<s;n++){var d=i[n],f=d.vertex,y=d.normalImpulse,h=d.tangentImpulse;if(0!==y||0!==h){var v=u.x*y+p.x*h,x=u.y*y+p.y*h;c.isStatic||c.isSleeping||(c.positionPrev.x+=v*c.inverseMass,c.positionPrev.y+=x*c.inverseMass,c.anglePrev+=c.inverseInertia*((f.x-c.position.x)*x-(f.y-c.position.y)*v)),l.isStatic||l.isSleeping||(l.positionPrev.x-=v*l.inverseMass,l.positionPrev.y-=x*l.inverseMass,l.anglePrev-=l.inverseInertia*((f.x-l.position.x)*x-(f.y-l.position.y)*v))}}}}},o.solveVelocity=function(e,t){var n,r,i,s,a=t*t,c=o._restingThresh*a,l=o._frictionNormalMultiplier,u=o._restingThreshTangent*a,p=Number.MAX_VALUE,d=e.length;for(i=0;i<d;i++){var f=e[i];if(f.isActive&&!f.isSensor){var y=f.collision,h=y.parentA,v=y.parentB,x=h.velocity,m=v.velocity,g=y.normal.x,b=y.normal.y,_=y.tangent.x,w=y.tangent.y,S=f.activeContacts,A=S.length,P=1/A,C=h.inverseMass+v.inverseMass,B=f.friction*f.frictionStatic*l*a;for(x.x=h.position.x-h.positionPrev.x,x.y=h.position.y-h.positionPrev.y,m.x=v.position.x-v.positionPrev.x,m.y=v.position.y-v.positionPrev.y,h.angularVelocity=h.angle-h.anglePrev,v.angularVelocity=v.angle-v.anglePrev,s=0;s<A;s++){var M=S[s],k=M.vertex,I=k.x-h.position.x,V=k.y-h.position.y,T=k.x-v.position.x,E=k.y-v.position.y,z=x.x-V*h.angularVelocity,R=x.y+I*h.angularVelocity,O=z-(m.x-E*v.angularVelocity),F=R-(m.y+T*v.angularVelocity),j=g*O+b*F,L=_*O+w*F,D=f.separation+j,q=Math.min(D,1),W=(q=D<0?0:q)*B;L>W||-L>W?(r=L>0?L:-L,(n=f.friction*(L>0?1:-1)*a)<-r?n=-r:n>r&&(n=r)):(n=L,r=p);var H=I*b-V*g,U=T*b-E*g,N=P/(C+h.inverseInertia*H*H+v.inverseInertia*U*U),G=(1+f.restitution)*j*N;if(n*=N,j*j>c&&j<0)M.normalImpulse=0;else{var Z=M.normalImpulse;M.normalImpulse+=G,M.normalImpulse=Math.min(M.normalImpulse,0),G=M.normalImpulse-Z}if(L*L>u)M.tangentImpulse=0;else{var Q=M.tangentImpulse;M.tangentImpulse+=n,M.tangentImpulse<-r&&(M.tangentImpulse=-r),M.tangentImpulse>r&&(M.tangentImpulse=r),n=M.tangentImpulse-Q}var X=g*G+_*n,Y=b*G+w*n;h.isStatic||h.isSleeping||(h.positionPrev.x+=X*h.inverseMass,h.positionPrev.y+=Y*h.inverseMass,h.anglePrev+=(I*Y-V*X)*h.inverseInertia),v.isStatic||v.isSleeping||(v.positionPrev.x-=X*v.inverseMass,v.positionPrev.y-=Y*v.inverseMass,v.anglePrev-=(T*Y-E*X)*v.inverseInertia)}}}}},function(e,t,n){var o={};e.exports=o;var r=n(9),i=n(0);o.create=function(e){return i.extend({table:{},list:[],collisionStart:[],collisionActive:[],collisionEnd:[]},e)},o.update=function(e,t,n){var o,i,s,a,c=e.list,l=c.length,u=e.table,p=t.length,d=e.collisionStart,f=e.collisionEnd,y=e.collisionActive;for(d.length=0,f.length=0,y.length=0,a=0;a<l;a++)c[a].confirmedActive=!1;for(a=0;a<p;a++)(s=(o=t[a]).pair)?(s.isActive?y.push(s):d.push(s),r.update(s,o,n),s.confirmedActive=!0):(u[(s=r.create(o,n)).id]=s,d.push(s),c.push(s));var h=[];for(l=c.length,a=0;a<l;a++)(s=c[a]).confirmedActive||(r.setActive(s,!1,n),f.push(s),s.collision.bodyA.isSleeping||s.collision.bodyB.isSleeping||h.push(a));for(a=0;a<h.length;a++)s=c[i=h[a]-a],c.splice(i,1),delete u[s.id]},o.clear=function(e){return e.table={},e.list.length=0,e.collisionStart.length=0,e.collisionActive.length=0,e.collisionEnd.length=0,e}},function(e,t,n){var o=e.exports=n(22);o.Axes=n(11),o.Bodies=n(12),o.Body=n(6),o.Bounds=n(1),o.Collision=n(8),o.Common=n(0),o.Composite=n(5),o.Composites=n(23),o.Constraint=n(10),o.Contact=n(17),o.Detector=n(14),o.Engine=n(18),o.Events=n(4),o.Grid=n(24),o.Mouse=n(13),o.MouseConstraint=n(25),o.Pair=n(9),o.Pairs=n(20),o.Plugin=n(15),o.Query=n(26),o.Render=n(16),o.Resolver=n(19),o.Runner=n(27),o.SAT=n(28),o.Sleeping=n(7),o.Svg=n(29),o.Vector=n(2),o.Vertices=n(3),o.World=n(30),o.Engine.run=o.Runner.run,o.Common.deprecated(o.Engine,"run","Engine.run ➤ use Matter.Runner.run(engine) instead")},function(e,t,n){var o={};e.exports=o;var r=n(15),i=n(0);o.name="matter-js",o.version="0.18.0",o.uses=[],o.used=[],o.use=function(){r.use(o,Array.prototype.slice.call(arguments))},o.before=function(e,t){return e=e.replace(/^Matter./,""),i.chainPathBefore(o,e,t)},o.after=function(e,t){return e=e.replace(/^Matter./,""),i.chainPathAfter(o,e,t)}},function(e,t,n){var o={};e.exports=o;var r=n(5),i=n(10),s=n(0),a=n(6),c=n(12),l=s.deprecated;o.stack=function(e,t,n,o,i,s,c){for(var l,u=r.create({label:"Stack"}),p=e,d=t,f=0,y=0;y<o;y++){for(var h=0,v=0;v<n;v++){var x=c(p,d,v,y,l,f);if(x){var m=x.bounds.max.y-x.bounds.min.y,g=x.bounds.max.x-x.bounds.min.x;m>h&&(h=m),a.translate(x,{x:.5*g,y:.5*m}),p=x.bounds.max.x+i,r.addBody(u,x),l=x,f+=1}else p+=i}d+=h+s,p=e}return u},o.chain=function(e,t,n,o,a,c){for(var l=e.bodies,u=1;u<l.length;u++){var p=l[u-1],d=l[u],f=p.bounds.max.y-p.bounds.min.y,y=p.bounds.max.x-p.bounds.min.x,h=d.bounds.max.y-d.bounds.min.y,v={bodyA:p,pointA:{x:y*t,y:f*n},bodyB:d,pointB:{x:(d.bounds.max.x-d.bounds.min.x)*o,y:h*a}},x=s.extend(v,c);r.addConstraint(e,i.create(x))}return e.label+=" Chain",e},o.mesh=function(e,t,n,o,a){var c,l,u,p,d,f=e.bodies;for(c=0;c<n;c++){for(l=1;l<t;l++)u=f[l-1+c*t],p=f[l+c*t],r.addConstraint(e,i.create(s.extend({bodyA:u,bodyB:p},a)));if(c>0)for(l=0;l<t;l++)u=f[l+(c-1)*t],p=f[l+c*t],r.addConstraint(e,i.create(s.extend({bodyA:u,bodyB:p},a))),o&&l>0&&(d=f[l-1+(c-1)*t],r.addConstraint(e,i.create(s.extend({bodyA:d,bodyB:p},a)))),o&&l<t-1&&(d=f[l+1+(c-1)*t],r.addConstraint(e,i.create(s.extend({bodyA:d,bodyB:p},a))))}return e.label+=" Mesh",e},o.pyramid=function(e,t,n,r,i,s,c){return o.stack(e,t,n,r,i,s,(function(t,o,s,l,u,p){var d=Math.min(r,Math.ceil(n/2)),f=u?u.bounds.max.x-u.bounds.min.x:0;if(!(l>d||s<(l=d-l)||s>n-1-l))return 1===p&&a.translate(u,{x:(s+(n%2==1?1:-1))*f,y:0}),c(e+(u?s*f:0)+s*i,o,s,l,u,p)}))},o.newtonsCradle=function(e,t,n,o,s){for(var a=r.create({label:"Newtons Cradle"}),l=0;l<n;l++){var u=c.circle(e+l*(1.9*o),t+s,o,{inertia:1/0,restitution:1,friction:0,frictionAir:1e-4,slop:1}),p=i.create({pointA:{x:e+l*(1.9*o),y:t},bodyB:u});r.addBody(a,u),r.addConstraint(a,p)}return a},l(o,"newtonsCradle","Composites.newtonsCradle ➤ moved to newtonsCradle example"),o.car=function(e,t,n,o,s){var l=a.nextGroup(!0),u=.5*-n+20,p=.5*n-20,d=r.create({label:"Car"}),f=c.rectangle(e,t,n,o,{collisionFilter:{group:l},chamfer:{radius:.5*o},density:2e-4}),y=c.circle(e+u,t+0,s,{collisionFilter:{group:l},friction:.8}),h=c.circle(e+p,t+0,s,{collisionFilter:{group:l},friction:.8}),v=i.create({bodyB:f,pointB:{x:u,y:0},bodyA:y,stiffness:1,length:0}),x=i.create({bodyB:f,pointB:{x:p,y:0},bodyA:h,stiffness:1,length:0});return r.addBody(d,f),r.addBody(d,y),r.addBody(d,h),r.addConstraint(d,v),r.addConstraint(d,x),d},l(o,"car","Composites.car ➤ moved to car example"),o.softBody=function(e,t,n,r,i,a,l,u,p,d){p=s.extend({inertia:1/0},p),d=s.extend({stiffness:.2,render:{type:"line",anchors:!1}},d);var f=o.stack(e,t,n,r,i,a,(function(e,t){return c.circle(e,t,u,p)}));return o.mesh(f,n,r,l,d),f.label="Soft Body",f},l(o,"softBody","Composites.softBody ➤ moved to softBody and cloth examples")},function(e,t,n){var o={};e.exports=o;var r=n(9),i=n(0),s=i.deprecated;o.create=function(e){return i.extend({buckets:{},pairs:{},pairsList:[],bucketWidth:48,bucketHeight:48},e)},o.update=function(e,t,n,r){var i,s,a,c,l,u=n.world,p=e.buckets,d=!1;for(i=0;i<t.length;i++){var f=t[i];if((!f.isSleeping||r)&&(!u.bounds||!(f.bounds.max.x<u.bounds.min.x||f.bounds.min.x>u.bounds.max.x||f.bounds.max.y<u.bounds.min.y||f.bounds.min.y>u.bounds.max.y))){var y=o._getRegion(e,f);if(!f.region||y.id!==f.region.id||r){f.region&&!r||(f.region=y);var h=o._regionUnion(y,f.region);for(s=h.startCol;s<=h.endCol;s++)for(a=h.startRow;a<=h.endRow;a++){c=p[l=o._getBucketId(s,a)];var v=s>=y.startCol&&s<=y.endCol&&a>=y.startRow&&a<=y.endRow,x=s>=f.region.startCol&&s<=f.region.endCol&&a>=f.region.startRow&&a<=f.region.endRow;!v&&x&&x&&c&&o._bucketRemoveBody(e,c,f),(f.region===y||v&&!x||r)&&(c||(c=o._createBucket(p,l)),o._bucketAddBody(e,c,f))}f.region=y,d=!0}}}d&&(e.pairsList=o._createActivePairsList(e))},s(o,"update","Grid.update ➤ replaced by Matter.Detector"),o.clear=function(e){e.buckets={},e.pairs={},e.pairsList=[]},s(o,"clear","Grid.clear ➤ replaced by Matter.Detector"),o._regionUnion=function(e,t){var n=Math.min(e.startCol,t.startCol),r=Math.max(e.endCol,t.endCol),i=Math.min(e.startRow,t.startRow),s=Math.max(e.endRow,t.endRow);return o._createRegion(n,r,i,s)},o._getRegion=function(e,t){var n=t.bounds,r=Math.floor(n.min.x/e.bucketWidth),i=Math.floor(n.max.x/e.bucketWidth),s=Math.floor(n.min.y/e.bucketHeight),a=Math.floor(n.max.y/e.bucketHeight);return o._createRegion(r,i,s,a)},o._createRegion=function(e,t,n,o){return{id:e+","+t+","+n+","+o,startCol:e,endCol:t,startRow:n,endRow:o}},o._getBucketId=function(e,t){return"C"+e+"R"+t},o._createBucket=function(e,t){return e[t]=[]},o._bucketAddBody=function(e,t,n){var o,i=e.pairs,s=r.id,a=t.length;for(o=0;o<a;o++){var c=t[o];if(!(n.id===c.id||n.isStatic&&c.isStatic)){var l=s(n,c),u=i[l];u?u[2]+=1:i[l]=[n,c,1]}}t.push(n)},o._bucketRemoveBody=function(e,t,n){var o,s=e.pairs,a=r.id;t.splice(i.indexOf(t,n),1);var c=t.length;for(o=0;o<c;o++){var l=s[a(n,t[o])];l&&(l[2]-=1)}},o._createActivePairsList=function(e){var t,n,o=e.pairs,r=i.keys(o),s=r.length,a=[];for(n=0;n<s;n++)(t=o[r[n]])[2]>0?a.push(t):delete o[r[n]];return a}},function(e,t,n){var o={};e.exports=o;var r=n(3),i=n(7),s=n(13),a=n(4),c=n(14),l=n(10),u=n(5),p=n(0),d=n(1);o.create=function(e,t){var n=(e?e.mouse:null)||(t?t.mouse:null);n||(e&&e.render&&e.render.canvas?n=s.create(e.render.canvas):t&&t.element?n=s.create(t.element):(n=s.create(),p.warn("MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected")));var r={type:"mouseConstraint",mouse:n,element:null,body:null,constraint:l.create({label:"Mouse Constraint",pointA:n.position,pointB:{x:0,y:0},length:.01,stiffness:.1,angularStiffness:1,render:{strokeStyle:"#90EE90",lineWidth:3}}),collisionFilter:{category:1,mask:4294967295,group:0}},i=p.extend(r,t);return a.on(e,"beforeUpdate",(function(){var t=u.allBodies(e.world);o.update(i,t),o._triggerEvents(i)})),i},o.update=function(e,t){var n=e.mouse,o=e.constraint,s=e.body;if(0===n.button){if(o.bodyB)i.set(o.bodyB,!1),o.pointA=n.position;else for(var l=0;l<t.length;l++)if(s=t[l],d.contains(s.bounds,n.position)&&c.canCollide(s.collisionFilter,e.collisionFilter))for(var u=s.parts.length>1?1:0;u<s.parts.length;u++){var p=s.parts[u];if(r.contains(p.vertices,n.position)){o.pointA=n.position,o.bodyB=e.body=s,o.pointB={x:n.position.x-s.position.x,y:n.position.y-s.position.y},o.angleB=s.angle,i.set(s,!1),a.trigger(e,"startdrag",{mouse:n,body:s});break}}}else o.bodyB=e.body=null,o.pointB=null,s&&a.trigger(e,"enddrag",{mouse:n,body:s})},o._triggerEvents=function(e){var t=e.mouse,n=t.sourceEvents;n.mousemove&&a.trigger(e,"mousemove",{mouse:t}),n.mousedown&&a.trigger(e,"mousedown",{mouse:t}),n.mouseup&&a.trigger(e,"mouseup",{mouse:t}),s.clearSourceEvents(t)}},function(e,t,n){var o={};e.exports=o;var r=n(2),i=n(8),s=n(1),a=n(12),c=n(3);o.collides=function(e,t){for(var n=[],o=t.length,r=e.bounds,a=i.collides,c=s.overlaps,l=0;l<o;l++){var u=t[l],p=u.parts.length,d=1===p?0:1;if(c(u.bounds,r))for(var f=d;f<p;f++){var y=u.parts[f];if(c(y.bounds,r)){var h=a(y,e);if(h){n.push(h);break}}}}return n},o.ray=function(e,t,n,i){i=i||1e-100;for(var s=r.angle(t,n),c=r.magnitude(r.sub(t,n)),l=.5*(n.x+t.x),u=.5*(n.y+t.y),p=a.rectangle(l,u,c,i,{angle:s}),d=o.collides(p,e),f=0;f<d.length;f+=1){var y=d[f];y.body=y.bodyB=y.bodyA}return d},o.region=function(e,t,n){for(var o=[],r=0;r<e.length;r++){var i=e[r],a=s.overlaps(i.bounds,t);(a&&!n||!a&&n)&&o.push(i)}return o},o.point=function(e,t){for(var n=[],o=0;o<e.length;o++){var r=e[o];if(s.contains(r.bounds,t))for(var i=1===r.parts.length?0:1;i<r.parts.length;i++){var a=r.parts[i];if(s.contains(a.bounds,t)&&c.contains(a.vertices,t)){n.push(r);break}}}return n}},function(e,t,n){var o={};e.exports=o;var r,i,s,a=n(4),c=n(18),l=n(0);"undefined"!=typeof window&&(r=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame,i=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),r||(r=function(e){s=setTimeout((function(){e(l.now())}),1e3/60)},i=function(){clearTimeout(s)}),o.create=function(e){var t=l.extend({fps:60,correction:1,deltaSampleSize:60,counterTimestamp:0,frameCounter:0,deltaHistory:[],timePrev:null,timeScalePrev:1,frameRequestId:null,isFixed:!1,enabled:!0},e);return t.delta=t.delta||1e3/t.fps,t.deltaMin=t.deltaMin||1e3/t.fps,t.deltaMax=t.deltaMax||1e3/(.5*t.fps),t.fps=1e3/t.delta,t},o.run=function(e,t){return void 0!==e.positionIterations&&(t=e,e=o.create()),function n(i){e.frameRequestId=r(n),i&&e.enabled&&o.tick(e,t,i)}(),e},o.tick=function(e,t,n){var o,r=t.timing,i=1,s={timestamp:r.timestamp};a.trigger(e,"beforeTick",s),e.isFixed?o=e.delta:(o=n-e.timePrev||e.delta,e.timePrev=n,e.deltaHistory.push(o),e.deltaHistory=e.deltaHistory.slice(-e.deltaSampleSize),i=(o=(o=(o=Math.min.apply(null,e.deltaHistory))<e.deltaMin?e.deltaMin:o)>e.deltaMax?e.deltaMax:o)/e.delta,e.delta=o),0!==e.timeScalePrev&&(i*=r.timeScale/e.timeScalePrev),0===r.timeScale&&(i=0),e.timeScalePrev=r.timeScale,e.correction=i,e.frameCounter+=1,n-e.counterTimestamp>=1e3&&(e.fps=e.frameCounter*((n-e.counterTimestamp)/1e3),e.counterTimestamp=n,e.frameCounter=0),a.trigger(e,"tick",s),a.trigger(e,"beforeUpdate",s),c.update(t,o,i),a.trigger(e,"afterUpdate",s),a.trigger(e,"afterTick",s)},o.stop=function(e){i(e.frameRequestId)},o.start=function(e,t){o.run(e,t)}},function(e,t,n){var o={};e.exports=o;var r=n(8),i=n(0).deprecated;o.collides=function(e,t){return r.collides(e,t)},i(o,"collides","SAT.collides ➤ replaced by Collision.collides")},function(e,t,n){var o={};e.exports=o,n(1);var r=n(0);o.pathToVertices=function(e,t){"undefined"==typeof window||"SVGPathSeg"in window||r.warn("Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.");var n,i,s,a,c,l,u,p,d,f,y,h=[],v=0,x=0,m=0;t=t||15;var g=function(e,t,n){var o=n%2==1&&n>1;if(!d||e!=d.x||t!=d.y){d&&o?(f=d.x,y=d.y):(f=0,y=0);var r={x:f+e,y:y+t};!o&&d||(d=r),h.push(r),x=f+e,m=y+t}},b=function(e){var t=e.pathSegTypeAsLetter.toUpperCase();if("Z"!==t){switch(t){case"M":case"L":case"T":case"C":case"S":case"Q":x=e.x,m=e.y;break;case"H":x=e.x;break;case"V":m=e.y}g(x,m,e.pathSegType)}};for(o._svgPathToAbsolute(e),s=e.getTotalLength(),l=[],n=0;n<e.pathSegList.numberOfItems;n+=1)l.push(e.pathSegList.getItem(n));for(u=l.concat();v<s;){if((c=l[e.getPathSegAtLength(v)])!=p){for(;u.length&&u[0]!=c;)b(u.shift());p=c}switch(c.pathSegTypeAsLetter.toUpperCase()){case"C":case"T":case"S":case"Q":case"A":a=e.getPointAtLength(v),g(a.x,a.y,0)}v+=t}for(n=0,i=u.length;n<i;++n)b(u[n]);return h},o._svgPathToAbsolute=function(e){for(var t,n,o,r,i,s,a=e.pathSegList,c=0,l=0,u=a.numberOfItems,p=0;p<u;++p){var d=a.getItem(p),f=d.pathSegTypeAsLetter;if(/[MLHVCSQTA]/.test(f))"x"in d&&(c=d.x),"y"in d&&(l=d.y);else switch("x1"in d&&(o=c+d.x1),"x2"in d&&(i=c+d.x2),"y1"in d&&(r=l+d.y1),"y2"in d&&(s=l+d.y2),"x"in d&&(c+=d.x),"y"in d&&(l+=d.y),f){case"m":a.replaceItem(e.createSVGPathSegMovetoAbs(c,l),p);break;case"l":a.replaceItem(e.createSVGPathSegLinetoAbs(c,l),p);break;case"h":a.replaceItem(e.createSVGPathSegLinetoHorizontalAbs(c),p);break;case"v":a.replaceItem(e.createSVGPathSegLinetoVerticalAbs(l),p);break;case"c":a.replaceItem(e.createSVGPathSegCurvetoCubicAbs(c,l,o,r,i,s),p);break;case"s":a.replaceItem(e.createSVGPathSegCurvetoCubicSmoothAbs(c,l,i,s),p);break;case"q":a.replaceItem(e.createSVGPathSegCurvetoQuadraticAbs(c,l,o,r),p);break;case"t":a.replaceItem(e.createSVGPathSegCurvetoQuadraticSmoothAbs(c,l),p);break;case"a":a.replaceItem(e.createSVGPathSegArcAbs(c,l,d.r1,d.r2,d.angle,d.largeArcFlag,d.sweepFlag),p);break;case"z":case"Z":c=t,l=n}"M"!=f&&"m"!=f||(t=c,n=l)}}},function(e,t,n){var o={};e.exports=o;var r=n(5);n(0),o.create=r.create,o.add=r.add,o.remove=r.remove,o.clear=r.clear,o.addComposite=r.addComposite,o.addBody=r.addBody,o.addConstraint=r.addConstraint}])},e.exports=o()},956:(e,t,n)=>{var o=n(60).parse;o.parseSVG=o,o.makeAbsolute=function(e){var t,n={x:0,y:0},o={x:"x0",y:"y0",x1:"x0",y1:"y0",x2:"x0",y2:"y0"};return e.forEach((function(e){for(var r in"moveto"===e.command&&(t=e),e.x0=n.x,e.y0=n.y,o)r in e&&(e[r]+=e.relative?e[o[r]]:0);"x"in e||(e.x=n.x),"y"in e||(e.y=n.y),e.relative=!1,e.code=e.code.toUpperCase(),"closepath"==e.command&&(e.x=t.x,e.y=t.y),n=e})),e},e.exports=o},60:e=>{"use strict";function t(e,n,o,r){this.message=e,this.expected=n,this.found=o,this.location=r,this.name="SyntaxError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(this,t)}!function(e,t){function n(){this.constructor=e}n.prototype=t.prototype,e.prototype=new n}(t,Error),t.buildMessage=function(e,t){var n={literal:function(e){return'"'+r(e.text)+'"'},class:function(e){var t,n="";for(t=0;t<e.parts.length;t++)n+=e.parts[t]instanceof Array?i(e.parts[t][0])+"-"+i(e.parts[t][1]):i(e.parts[t]);return"["+(e.inverted?"^":"")+n+"]"},any:function(e){return"any character"},end:function(e){return"end of input"},other:function(e){return e.description}};function o(e){return e.charCodeAt(0).toString(16).toUpperCase()}function r(e){return e.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,(function(e){return"\\x0"+o(e)})).replace(/[\x10-\x1F\x7F-\x9F]/g,(function(e){return"\\x"+o(e)}))}function i(e){return e.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,(function(e){return"\\x0"+o(e)})).replace(/[\x10-\x1F\x7F-\x9F]/g,(function(e){return"\\x"+o(e)}))}return"Expected "+function(e){var t,o,r,i=new Array(e.length);for(t=0;t<e.length;t++)i[t]=(r=e[t],n[r.type](r));if(i.sort(),i.length>0){for(t=1,o=1;t<i.length;t++)i[t-1]!==i[t]&&(i[o]=i[t],o++);i.length=o}switch(i.length){case 1:return i[0];case 2:return i[0]+" or "+i[1];default:return i.slice(0,-1).join(", ")+", or "+i[i.length-1]}}(e)+" but "+function(e){return e?'"'+r(e)+'"':"end of input"}(t)+" found."},e.exports={SyntaxError:t,parse:function(e,n){n=void 0!==n?n:{};var o,r={},i={svg_path:J},s=J,a=function(e,t){return function(e,t){if(!t)return[e];for(var n=[e],o=0,r=t.length;o<r;o++)n[o+1]=t[o][1];return n}(e,t)},c=/^[Mm]/,l=Z(["M","m"],!1,!1),u=/^[Zz]/,p=Z(["Z","z"],!1,!1),d=/^[Ll]/,f=Z(["L","l"],!1,!1),y=function(e,t){return we(e,t)},h=/^[Hh]/,v=Z(["H","h"],!1,!1),x=/^[Vv]/,m=Z(["V","v"],!1,!1),g=/^[Cc]/,b=Z(["C","c"],!1,!1),_=/^[Ss]/,w=Z(["S","s"],!1,!1),S=/^[Qq]/,A=Z(["Q","q"],!1,!1),P=/^[Tt]/,C=Z(["T","t"],!1,!1),B=/^[Aa]/,M=Z(["A","a"],!1,!1),k=/^[01]/,I=Z(["0","1"],!1,!1),V=G(",",!1),T=function(e){return e.join("")},E=G(".",!1),z=/^[eE]/,R=Z(["e","E"],!1,!1),O=/^[+\-]/,F=Z(["+","-"],!1,!1),j=/^[0-9]/,L=Z([["0","9"]],!1,!1),D=/^[ \t\n\r]/,q=Z([" ","\t","\n","\r"],!1,!1),W=0,H=[{line:1,column:1}],U=0,N=[];if("startRule"in n){if(!(n.startRule in i))throw new Error("Can't start parsing from rule \""+n.startRule+'".');s=i[n.startRule]}function G(e,t){return{type:"literal",text:e,ignoreCase:t}}function Z(e,t,n){return{type:"class",parts:e,inverted:t,ignoreCase:n}}function Q(t){var n,o=H[t];if(o)return o;for(n=t-1;!H[n];)n--;for(o={line:(o=H[n]).line,column:o.column};n<t;)10===e.charCodeAt(n)?(o.line++,o.column=1):o.column++,n++;return H[t]=o,o}function X(e,t){var n=Q(e),o=Q(t);return{start:{offset:e,line:n.line,column:n.column},end:{offset:t,line:o.line,column:o.column}}}function Y(e){W<U||(W>U&&(U=W,N=[]),N.push(e))}function J(){var e,t,n,o,i;for(e=W,t=[],n=ve();n!==r;)t.push(n),n=ve();if(t!==r)if(n=function(){var e,t,n,o,i,s;if(e=W,(t=$())!==r){for(n=[],o=W,i=[],s=ve();s!==r;)i.push(s),s=ve();for(i!==r&&(s=$())!==r?o=i=[i,s]:(W=o,o=r);o!==r;){for(n.push(o),o=W,i=[],s=ve();s!==r;)i.push(s),s=ve();i!==r&&(s=$())!==r?o=i=[i,s]:(W=o,o=r)}n!==r?e=t=a(t,n):(W=e,e=r)}else W=e,e=r;return e}(),n===r&&(n=null),n!==r){for(o=[],i=ve();i!==r;)o.push(i),i=ve();o!==r?(t=function(e){if(!e)return[];for(var t=[],n=0;n<e.length;n++)t=t.concat.apply(t,e[n]);var o=t[0];return o&&"m"==o.code&&(delete o.relative,o.code="M"),t}(n),e=t):(W=e,e=r)}else W=e,e=r;else W=e,e=r;return e}function $(){var t,n,o,i,s,u;if(t=W,n=function(){var t,n,o,i,s,a,u,p,d,f;if(t=W,c.test(e.charAt(W))?(n=e.charAt(W),W++):(n=r,Y(l)),n!==r){for(o=[],i=ve();i!==r;)o.push(i),i=ve();o!==r&&(i=se())!==r?(s=W,(a=ue())===r&&(a=null),a!==r&&(u=ee())!==r?s=a=[a,u]:(W=s,s=r),s===r&&(s=null),s!==r?(d=s,f=we(p=n,[i]),d&&(f=f.concat(we("M"==p?"L":"l",d[1]))),t=n=f):(W=t,t=r)):(W=t,t=r)}else W=t,t=r;return t}(),n!==r){for(o=[],i=W,s=[],u=ve();u!==r;)s.push(u),u=ve();for(s!==r&&(u=K())!==r?i=s=[s,u]:(W=i,i=r);i!==r;){for(o.push(i),i=W,s=[],u=ve();u!==r;)s.push(u),u=ve();s!==r&&(u=K())!==r?i=s=[s,u]:(W=i,i=r)}o!==r?t=n=a(n,o):(W=t,t=r)}else W=t,t=r;return t}function K(){var t,n;return u.test(e.charAt(W))?(n=e.charAt(W),W++):(n=r,Y(p)),n!==r&&(n=we("Z")),(t=n)===r&&(t=function(){var t,n,o,i;if(t=W,d.test(e.charAt(W))?(n=e.charAt(W),W++):(n=r,Y(f)),n!==r){for(o=[],i=ve();i!==r;)o.push(i),i=ve();o!==r&&(i=ee())!==r?t=n=y(n,i):(W=t,t=r)}else W=t,t=r;return t}())===r&&(t=function(){var t,n,o,i;if(t=W,h.test(e.charAt(W))?(n=e.charAt(W),W++):(n=r,Y(v)),n!==r){for(o=[],i=ve();i!==r;)o.push(i),i=ve();o!==r&&(i=te())!==r?t=n=we(n,i.map((function(e){return{x:e}}))):(W=t,t=r)}else W=t,t=r;return t}())===r&&(t=function(){var t,n,o,i;if(t=W,x.test(e.charAt(W))?(n=e.charAt(W),W++):(n=r,Y(m)),n!==r){for(o=[],i=ve();i!==r;)o.push(i),i=ve();o!==r&&(i=te())!==r?t=n=we(n,i.map((function(e){return{y:e}}))):(W=t,t=r)}else W=t,t=r;return t}())===r&&(t=function(){var t,n,o,i;if(t=W,g.test(e.charAt(W))?(n=e.charAt(W),W++):(n=r,Y(b)),n!==r){for(o=[],i=ve();i!==r;)o.push(i),i=ve();o!==r?(i=function(){var e,t,n,o,i,s;if(e=W,(t=ne())!==r){for(n=[],o=W,(i=ue())===r&&(i=null),i!==r&&(s=ne())!==r?o=i=[i,s]:(W=o,o=r);o!==r;)n.push(o),o=W,(i=ue())===r&&(i=null),i!==r&&(s=ne())!==r?o=i=[i,s]:(W=o,o=r);n!==r?e=t=a(t,n):(W=e,e=r)}else W=e,e=r;return e}(),i!==r?t=n=y(n,i):(W=t,t=r)):(W=t,t=r)}else W=t,t=r;return t}())===r&&(t=function(){var t,n,o,i;if(t=W,_.test(e.charAt(W))?(n=e.charAt(W),W++):(n=r,Y(w)),n!==r){for(o=[],i=ve();i!==r;)o.push(i),i=ve();o!==r?(i=function(){var e,t,n,o,i,s;if(e=W,(t=oe())!==r){for(n=[],o=W,(i=ue())===r&&(i=null),i!==r&&(s=oe())!==r?o=i=[i,s]:(W=o,o=r);o!==r;)n.push(o),o=W,(i=ue())===r&&(i=null),i!==r&&(s=oe())!==r?o=i=[i,s]:(W=o,o=r);n!==r?e=t=a(t,n):(W=e,e=r)}else W=e,e=r;return e}(),i!==r?t=n=y(n,i):(W=t,t=r)):(W=t,t=r)}else W=t,t=r;return t}())===r&&(t=function(){var t,n,o,i;if(t=W,S.test(e.charAt(W))?(n=e.charAt(W),W++):(n=r,Y(A)),n!==r){for(o=[],i=ve();i!==r;)o.push(i),i=ve();o!==r?(i=function(){var e,t,n,o,i,s;if(e=W,(t=re())!==r){for(n=[],o=W,(i=ue())===r&&(i=null),i!==r&&(s=re())!==r?o=i=[i,s]:(W=o,o=r);o!==r;)n.push(o),o=W,(i=ue())===r&&(i=null),i!==r&&(s=re())!==r?o=i=[i,s]:(W=o,o=r);n!==r?e=t=a(t,n):(W=e,e=r)}else W=e,e=r;return e}(),i!==r?t=n=y(n,i):(W=t,t=r)):(W=t,t=r)}else W=t,t=r;return t}())===r&&(t=function(){var t,n,o,i;if(t=W,P.test(e.charAt(W))?(n=e.charAt(W),W++):(n=r,Y(C)),n!==r){for(o=[],i=ve();i!==r;)o.push(i),i=ve();o!==r?(i=function(){var e,t,n,o,i,s;if(e=W,(t=se())!==r){for(n=[],o=W,(i=ue())===r&&(i=null),i!==r&&(s=se())!==r?o=i=[i,s]:(W=o,o=r);o!==r;)n.push(o),o=W,(i=ue())===r&&(i=null),i!==r&&(s=se())!==r?o=i=[i,s]:(W=o,o=r);n!==r?e=t=a(t,n):(W=e,e=r)}else W=e,e=r;return e}(),i!==r?t=n=y(n,i):(W=t,t=r)):(W=t,t=r)}else W=t,t=r;return t}())===r&&(t=function(){var t,n,o,i;if(t=W,B.test(e.charAt(W))?(n=e.charAt(W),W++):(n=r,Y(M)),n!==r){for(o=[],i=ve();i!==r;)o.push(i),i=ve();o!==r?(i=function(){var e,t,n,o,i,s;if(e=W,(t=ie())!==r){for(n=[],o=W,(i=ue())===r&&(i=null),i!==r&&(s=ie())!==r?o=i=[i,s]:(W=o,o=r);o!==r;)n.push(o),o=W,(i=ue())===r&&(i=null),i!==r&&(s=ie())!==r?o=i=[i,s]:(W=o,o=r);n!==r?e=t=a(t,n):(W=e,e=r)}else W=e,e=r;return e}(),i!==r?t=n=y(n,i):(W=t,t=r)):(W=t,t=r)}else W=t,t=r;return t}()),t}function ee(){var e,t,n,o,i,s;if(e=W,(t=se())!==r){for(n=[],o=W,(i=ue())===r&&(i=null),i!==r&&(s=se())!==r?o=i=[i,s]:(W=o,o=r);o!==r;)n.push(o),o=W,(i=ue())===r&&(i=null),i!==r&&(s=se())!==r?o=i=[i,s]:(W=o,o=r);n!==r?e=t=a(t,n):(W=e,e=r)}else W=e,e=r;return e}function te(){var e,t,n,o,i,s;if(e=W,(t=ce())!==r){for(n=[],o=W,(i=ue())===r&&(i=null),i!==r&&(s=ce())!==r?o=i=[i,s]:(W=o,o=r);o!==r;)n.push(o),o=W,(i=ue())===r&&(i=null),i!==r&&(s=ce())!==r?o=i=[i,s]:(W=o,o=r);n!==r?e=t=a(t,n):(W=e,e=r)}else W=e,e=r;return e}function ne(){var e,t,n,o,i,s,a,c,l;return e=W,(t=se())!==r?((n=ue())===r&&(n=null),n!==r&&(o=se())!==r?((i=ue())===r&&(i=null),i!==r&&(s=se())!==r?(c=o,l=s,e=t={x1:(a=t).x,y1:a.y,x2:c.x,y2:c.y,x:l.x,y:l.y}):(W=e,e=r)):(W=e,e=r)):(W=e,e=r),e}function oe(){var e,t,n,o,i,s;return e=W,(t=se())!==r?((n=ue())===r&&(n=null),n!==r&&(o=se())!==r?(s=o,e=t={x2:(i=t).x,y2:i.y,x:s.x,y:s.y}):(W=e,e=r)):(W=e,e=r),e}function re(){var e,t,n,o,i,s;return e=W,(t=se())!==r?((n=ue())===r&&(n=null),n!==r&&(o=se())!==r?(s=o,e=t={x1:(i=t).x,y1:i.y,x:s.x,y:s.y}):(W=e,e=r)):(W=e,e=r),e}function ie(){var e,t,n,o,i,s,a,c,l,u,p,d;return e=W,(t=ae())!==r?((n=ue())===r&&(n=null),n!==r&&(o=ae())!==r?((i=ue())===r&&(i=null),i!==r&&(s=ce())!==r&&ue()!==r&&(a=le())!==r?((c=ue())===r&&(c=null),c!==r&&(l=le())!==r?((u=ue())===r&&(u=null),u!==r&&(p=se())!==r?e=t={rx:t,ry:o,xAxisRotation:s,largeArc:a,sweep:l,x:(d=p).x,y:d.y}:(W=e,e=r)):(W=e,e=r)):(W=e,e=r)):(W=e,e=r)):(W=e,e=r),e}function se(){var e,t,n,o;return e=W,(t=ce())!==r?((n=ue())===r&&(n=null),n!==r&&(o=ce())!==r?e=t={x:t,y:o}:(W=e,e=r)):(W=e,e=r),e}function ae(){var e;return W,(e=de())===r&&(e=he()),e!==r&&(e*=1),e}function ce(){var e,t,n;return W,e=W,(t=ye())===r&&(t=null),t!==r&&(n=de())!==r?e=t=[t,n]:(W=e,e=r),e===r&&(e=W,(t=ye())===r&&(t=null),t!==r&&(n=he())!==r?e=t=[t,n]:(W=e,e=r)),e!==r&&(e=1*e.join("")),e}function le(){var t;return W,k.test(e.charAt(W))?(t=e.charAt(W),W++):(t=r,Y(I)),t!==r&&(t="1"==t),t}function ue(){var e,t,n,o,i;if(e=W,t=[],(n=ve())!==r)for(;n!==r;)t.push(n),n=ve();else t=r;if(t!==r)if((n=pe())===r&&(n=null),n!==r){for(o=[],i=ve();i!==r;)o.push(i),i=ve();o!==r?e=t=[t,n,o]:(W=e,e=r)}else W=e,e=r;else W=e,e=r;if(e===r){if(e=W,t=W,(n=pe())!==r){for(o=[],i=ve();i!==r;)o.push(i),i=ve();o!==r?t=n=[n,o]:(W=t,t=r)}else W=t,t=r;t!==r&&(t=""),e=t}return e}function pe(){var t;return 44===e.charCodeAt(W)?(t=",",W++):(t=r,Y(V)),t}function de(){var t,n,o;return W,t=W,n=function(){var t,n,o,i;return W,t=W,(n=he())===r&&(n=null),n!==r?(46===e.charCodeAt(W)?(o=".",W++):(o=r,Y(E)),o!==r&&(i=he())!==r?t=n=[n,o,i]:(W=t,t=r)):(W=t,t=r),t===r&&(t=W,(n=he())!==r?(46===e.charCodeAt(W)?(o=".",W++):(o=r,Y(E)),o!==r?t=n=[n,o]:(W=t,t=r)):(W=t,t=r)),t!==r&&(t=T(t)),t}(),n!==r?((o=fe())===r&&(o=null),o!==r?t=n=[n,o]:(W=t,t=r)):(W=t,t=r),t===r&&(t=W,(n=he())!==r&&(o=fe())!==r?t=n=[n,o]:(W=t,t=r)),t!==r&&(t=T(t)),t}function fe(){var t,n,o,i;return W,t=W,z.test(e.charAt(W))?(n=e.charAt(W),W++):(n=r,Y(R)),n!==r?((o=ye())===r&&(o=null),o!==r&&(i=he())!==r?t=n=[n,o,i]:(W=t,t=r)):(W=t,t=r),t!==r&&(t=T(t)),t}function ye(){var t;return O.test(e.charAt(W))?(t=e.charAt(W),W++):(t=r,Y(F)),t}function he(){var t,n;if(W,t=[],j.test(e.charAt(W))?(n=e.charAt(W),W++):(n=r,Y(L)),n!==r)for(;n!==r;)t.push(n),j.test(e.charAt(W))?(n=e.charAt(W),W++):(n=r,Y(L));else t=r;return t!==r&&(t=t.join("")),t}function ve(){var t;return W,D.test(e.charAt(W))?(t=e.charAt(W),W++):(t=r,Y(q)),t!==r&&(t=""),t}var xe,me,ge,be={m:"moveto",l:"lineto",h:"horizontal lineto",v:"vertical lineto",c:"curveto",s:"smooth curveto",q:"quadratic curveto",t:"smooth quadratic curveto",a:"elliptical arc",z:"closepath"};for(var _e in be)be[_e.toUpperCase()]=be[_e];function we(e,t){t||(t=[{}]);for(var n=t.length;n--;){var o={code:e,command:be[e]};for(var r in e==e.toLowerCase()&&(o.relative=!0),t[n])o[r]=t[n][r];t[n]=o}return t}if((o=s())!==r&&W===e.length)return o;throw o!==r&&W<e.length&&Y({type:"end"}),xe=N,me=U<e.length?e.charAt(U):null,ge=U<e.length?X(U,U+1):X(U,U),new t(t.buildMessage(xe,me),xe,me,ge)}}}},n={};function o(t){var r=n[t];if(void 0!==r)return r.exports;var i=n[t]={exports:{}};return e[t].call(i.exports,i,i.exports,o),i.exports}o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};return(()=>{"use strict";o.r(r),o.d(r,{PhysicalSvg:()=>Ie,StopPhysicalSvg:()=>Be});var e=o(842),n=function(e,t){return n=e.x,o=e.y,r=t.x,i=t.y,Math.sqrt(Math.pow(n-r,2)+Math.pow(o-i,2));var n,o,r,i},i=function(t,n){return e.Vector.create(t.x*n.x,t.y*n.y)},s=function(e,t){return e.x===t.x&&e.y===t.y},a=function(e,t,n,o){var r,i=e-n,s=t-o;return(r=i||s?Math.atan2(s,i)-Math.PI:0)<0&&(r+=2*Math.PI),r},c=function(){function t(){}return t.prototype.intersects=function(t,n){var o=e.Vector.create(t.x,t.y),r=e.Vector.create(t.x0,t.y0),s=e.Vector.create(n.x,n.y),a=e.Vector.create(n.x0,n.y0),c=e.Vector.sub(r,o),l=e.Vector.sub(a,s),u=e.Vector.cross(c,l),p=e.Vector.cross(e.Vector.sub(s,o),c);if(this.isZero(u)&&this.isZero(p)){var d=e.Vector.magnitude(i(e.Vector.sub(s,o),c)),f=e.Vector.magnitude(i(e.Vector.sub(o,s),l)),y=e.Vector.magnitude(i(c,c)),h=e.Vector.magnitude(i(l,l));return 0<=d&&d<=y||0<=(f&&f<=h)}if(this.isZero(u)&&!this.isZero(p))return!1;var v=e.Vector.cross(e.Vector.sub(s,o),l)/u,x=e.Vector.cross(e.Vector.sub(s,o),c)/u;return!this.isZero(u)&&0<=v&&v<=1&&0<=x&&x<=1},t.prototype.supportedCommandTypes=function(){return[["L","Z"],["L","Z"]]},t.prototype.isZero=function(e){return Math.abs(e)<1e-10},t}();const l={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let u;const p=new Uint8Array(16);function d(){if(!u&&(u="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!u))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return u(p)}const f=[];for(let e=0;e<256;++e)f.push((e+256).toString(16).slice(1));const y=function(e,t,n){if(l.randomUUID&&!t&&!e)return l.randomUUID();const o=(e=e||{}).random||(e.rng||d)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,t){n=n||0;for(let e=0;e<16;++e)t[n+e]=o[e];return t}return function(e,t=0){return(f[e[t+0]]+f[e[t+1]]+f[e[t+2]]+f[e[t+3]]+"-"+f[e[t+4]]+f[e[t+5]]+"-"+f[e[t+6]]+f[e[t+7]]+"-"+f[e[t+8]]+f[e[t+9]]+"-"+f[e[t+10]]+f[e[t+11]]+f[e[t+12]]+f[e[t+13]]+f[e[t+14]]+f[e[t+15]]).toLowerCase()}(o)};var h=function(){function e(e,t){this._id=y(),this._parent=t,this._value=e,this._children=[]}return Object.defineProperty(e.prototype,"id",{get:function(){return this._id},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this._value},enumerable:!1,configurable:!0}),e.prototype.addChild=function(t){var n=new e(t,this);return n._parent=this,this._children.push(n),n},e.prototype.addChildNode=function(e){return e._parent=this,this._children.push(e),e},e.prototype.getChildrenRecursively=function(){var e=new Array(this);return this._children.forEach((function(t){t.getChildrenRecursively().forEach((function(t){e.push(t)}))})),e},e.prototype.getRoot=function(){return void 0===this._parent?this:this._parent.getRoot()},e}(),v=function(){function e(e){this._roots=[],this._aggregationFcn=e}return e.prototype.getAggregatedCommands=function(){return this._roots.map((function(e){return e.getChildrenRecursively().map((function(e){return e.value}))}))},e.prototype.addValue=function(e){var t=this;if(0===this._roots.length)this._roots.push(new h(e,void 0));else{var n=this.getAllNodes().filter((function(n){return t._aggregationFcn(n.value,e)}));if(0===n.length)this._roots.push(new h(e,void 0));else{var o=n[0].addChild(e);n.slice(1,n.length).map((function(e){return e.getRoot()})).filter((function(e){return e.id!==o.getRoot().id})).filter((function(e,t,n){return t===n.findIndex((function(t){return t.id===e.id}))})).forEach((function(e){o.addChildNode(e),t._roots.splice(t._roots.indexOf(e),1)}))}}},e.prototype.getAllNodes=function(){return this._roots.flatMap((function(e){return e.getChildrenRecursively()}))},e}(),x=function(){function e(){}return e.prototype.intersects=function(e,t){var n=e.x,o=e.y,r=e.x0,i=e.y0,s=t.x,a=t.y,c=(a-o)*(r-n)-(s-n)*(i-o);if(Math.abs(c)>1e-10)return!1;var l=(s-n)*(r-n)+(a-o)*(i-o);return!(l<0)&&l<=(r-n)*(r-n)+(i-o)*(i-o)},e.prototype.supportedCommandTypes=function(){return[["L","Z"],["M"]]},e}();const{abs:m,cos:g,sin:b,acos:_,atan2:w,sqrt:S,pow:A}=Math;function P(e){return e<0?-A(-e,1/3):A(e,1/3)}const C=Math.PI,B=2*C,M=C/2,k=Number.MAX_SAFE_INTEGER||9007199254740991,I=Number.MIN_SAFE_INTEGER||-9007199254740991,V={x:0,y:0,z:0},T={Tvalues:[-.06405689286260563,.06405689286260563,-.1911188674736163,.1911188674736163,-.3150426796961634,.3150426796961634,-.4337935076260451,.4337935076260451,-.5454214713888396,.5454214713888396,-.6480936519369755,.6480936519369755,-.7401241915785544,.7401241915785544,-.820001985973903,.820001985973903,-.8864155270044011,.8864155270044011,-.9382745520027328,.9382745520027328,-.9747285559713095,.9747285559713095,-.9951872199970213,.9951872199970213],Cvalues:[.12793819534675216,.12793819534675216,.1258374563468283,.1258374563468283,.12167047292780339,.12167047292780339,.1155056680537256,.1155056680537256,.10744427011596563,.10744427011596563,.09761865210411388,.09761865210411388,.08619016153195327,.08619016153195327,.0733464814110803,.0733464814110803,.05929858491543678,.05929858491543678,.04427743881741981,.04427743881741981,.028531388628933663,.028531388628933663,.0123412297999872,.0123412297999872],arcfn:function(e,t){const n=t(e);let o=n.x*n.x+n.y*n.y;return void 0!==n.z&&(o+=n.z*n.z),S(o)},compute:function(e,t,n){if(0===e)return t[0].t=0,t[0];const o=t.length-1;if(1===e)return t[o].t=1,t[o];const r=1-e;let i=t;if(0===o)return t[0].t=e,t[0];if(1===o){const t={x:r*i[0].x+e*i[1].x,y:r*i[0].y+e*i[1].y,t:e};return n&&(t.z=r*i[0].z+e*i[1].z),t}if(o<4){let t,s,a,c=r*r,l=e*e,u=0;2===o?(i=[i[0],i[1],i[2],V],t=c,s=r*e*2,a=l):3===o&&(t=c*r,s=c*e*3,a=r*l*3,u=e*l);const p={x:t*i[0].x+s*i[1].x+a*i[2].x+u*i[3].x,y:t*i[0].y+s*i[1].y+a*i[2].y+u*i[3].y,t:e};return n&&(p.z=t*i[0].z+s*i[1].z+a*i[2].z+u*i[3].z),p}const s=JSON.parse(JSON.stringify(t));for(;s.length>1;){for(let t=0;t<s.length-1;t++)s[t]={x:s[t].x+(s[t+1].x-s[t].x)*e,y:s[t].y+(s[t+1].y-s[t].y)*e},void 0!==s[t].z&&(s[t]=s[t].z+(s[t+1].z-s[t].z)*e);s.splice(s.length-1,1)}return s[0].t=e,s[0]},computeWithRatios:function(e,t,n,o){const r=1-e,i=n,s=t;let a,c=i[0],l=i[1],u=i[2],p=i[3];return c*=r,l*=e,2===s.length?(a=c+l,{x:(c*s[0].x+l*s[1].x)/a,y:(c*s[0].y+l*s[1].y)/a,z:!!o&&(c*s[0].z+l*s[1].z)/a,t:e}):(c*=r,l*=2*r,u*=e*e,3===s.length?(a=c+l+u,{x:(c*s[0].x+l*s[1].x+u*s[2].x)/a,y:(c*s[0].y+l*s[1].y+u*s[2].y)/a,z:!!o&&(c*s[0].z+l*s[1].z+u*s[2].z)/a,t:e}):(c*=r,l*=1.5*r,u*=3*r,p*=e*e*e,4===s.length?(a=c+l+u+p,{x:(c*s[0].x+l*s[1].x+u*s[2].x+p*s[3].x)/a,y:(c*s[0].y+l*s[1].y+u*s[2].y+p*s[3].y)/a,z:!!o&&(c*s[0].z+l*s[1].z+u*s[2].z+p*s[3].z)/a,t:e}):void 0))},derive:function(e,t){const n=[];for(let o=e,r=o.length,i=r-1;r>1;r--,i--){const e=[];for(let n,r=0;r<i;r++)n={x:i*(o[r+1].x-o[r].x),y:i*(o[r+1].y-o[r].y)},t&&(n.z=i*(o[r+1].z-o[r].z)),e.push(n);n.push(e),o=e}return n},between:function(e,t,n){return t<=e&&e<=n||T.approximately(e,t)||T.approximately(e,n)},approximately:function(e,t,n){return m(e-t)<=(n||1e-6)},length:function(e){const t=T.Tvalues.length;let n=0;for(let o,r=0;r<t;r++)o=.5*T.Tvalues[r]+.5,n+=T.Cvalues[r]*T.arcfn(o,e);return.5*n},map:function(e,t,n,o,r){return o+(e-t)/(n-t)*(r-o)},lerp:function(e,t,n){const o={x:t.x+e*(n.x-t.x),y:t.y+e*(n.y-t.y)};return void 0!==t.z&&void 0!==n.z&&(o.z=t.z+e*(n.z-t.z)),o},pointToString:function(e){let t=e.x+"/"+e.y;return void 0!==e.z&&(t+="/"+e.z),t},pointsToString:function(e){return"["+e.map(T.pointToString).join(", ")+"]"},copy:function(e){return JSON.parse(JSON.stringify(e))},angle:function(e,t,n){const o=t.x-e.x,r=t.y-e.y,i=n.x-e.x,s=n.y-e.y;return w(o*s-r*i,o*i+r*s)},round:function(e,t){const n=""+e,o=n.indexOf(".");return parseFloat(n.substring(0,o+1+t))},dist:function(e,t){const n=e.x-t.x,o=e.y-t.y;return S(n*n+o*o)},closest:function(e,t){let n,o,r=A(2,63);return e.forEach((function(e,i){o=T.dist(t,e),o<r&&(r=o,n=i)})),{mdist:r,mpos:n}},abcratio:function(e,t){if(2!==t&&3!==t)return!1;if(void 0===e)e=.5;else if(0===e||1===e)return e;const n=A(e,t)+A(1-e,t);return m((n-1)/n)},projectionratio:function(e,t){if(2!==t&&3!==t)return!1;if(void 0===e)e=.5;else if(0===e||1===e)return e;const n=A(1-e,t);return n/(A(e,t)+n)},lli8:function(e,t,n,o,r,i,s,a){const c=(e-n)*(i-a)-(t-o)*(r-s);return 0!=c&&{x:((e*o-t*n)*(r-s)-(e-n)*(r*a-i*s))/c,y:((e*o-t*n)*(i-a)-(t-o)*(r*a-i*s))/c}},lli4:function(e,t,n,o){const r=e.x,i=e.y,s=t.x,a=t.y,c=n.x,l=n.y,u=o.x,p=o.y;return T.lli8(r,i,s,a,c,l,u,p)},lli:function(e,t){return T.lli4(e,e.c,t,t.c)},makeline:function(e,t){return new W(e.x,e.y,(e.x+t.x)/2,(e.y+t.y)/2,t.x,t.y)},findbbox:function(e){let t=k,n=k,o=I,r=I;return e.forEach((function(e){const i=e.bbox();t>i.x.min&&(t=i.x.min),n>i.y.min&&(n=i.y.min),o<i.x.max&&(o=i.x.max),r<i.y.max&&(r=i.y.max)})),{x:{min:t,mid:(t+o)/2,max:o,size:o-t},y:{min:n,mid:(n+r)/2,max:r,size:r-n}}},shapeintersections:function(e,t,n,o,r){if(!T.bboxoverlap(t,o))return[];const i=[],s=[e.startcap,e.forward,e.back,e.endcap],a=[n.startcap,n.forward,n.back,n.endcap];return s.forEach((function(t){t.virtual||a.forEach((function(o){if(o.virtual)return;const s=t.intersects(o,r);s.length>0&&(s.c1=t,s.c2=o,s.s1=e,s.s2=n,i.push(s))}))})),i},makeshape:function(e,t,n){const o=t.points.length,r=e.points.length,i=T.makeline(t.points[o-1],e.points[0]),s=T.makeline(e.points[r-1],t.points[0]),a={startcap:i,forward:e,back:t,endcap:s,bbox:T.findbbox([i,e,t,s]),intersections:function(e){return T.shapeintersections(a,a.bbox,e,e.bbox,n)}};return a},getminmax:function(e,t,n){if(!n)return{min:0,max:0};let o,r,i=k,s=I;-1===n.indexOf(0)&&(n=[0].concat(n)),-1===n.indexOf(1)&&n.push(1);for(let a=0,c=n.length;a<c;a++)o=n[a],r=e.get(o),r[t]<i&&(i=r[t]),r[t]>s&&(s=r[t]);return{min:i,mid:(i+s)/2,max:s,size:s-i}},align:function(e,t){const n=t.p1.x,o=t.p1.y,r=-w(t.p2.y-o,t.p2.x-n);return e.map((function(e){return{x:(e.x-n)*g(r)-(e.y-o)*b(r),y:(e.x-n)*b(r)+(e.y-o)*g(r)}}))},roots:function(e,t){t=t||{p1:{x:0,y:0},p2:{x:1,y:0}};const n=e.length-1,o=T.align(e,t),r=function(e){return 0<=e&&e<=1};if(2===n){const e=o[0].y,t=o[1].y,n=o[2].y,i=e-2*t+n;if(0!==i){const o=-S(t*t-e*n),s=-e+t;return[-(o+s)/i,-(-o+s)/i].filter(r)}return t!==n&&0===i?[(2*t-n)/(2*t-2*n)].filter(r):[]}const i=o[0].y,s=o[1].y,a=o[2].y;let c=3*s-i-3*a+o[3].y,l=3*i-6*s+3*a,u=-3*i+3*s,p=i;if(T.approximately(c,0)){if(T.approximately(l,0))return T.approximately(u,0)?[]:[-p/u].filter(r);const e=S(u*u-4*l*p),t=2*l;return[(e-u)/t,(-u-e)/t].filter(r)}l/=c,u/=c,p/=c;const d=(3*u-l*l)/3,f=d/3,y=(2*l*l*l-9*l*u+27*p)/27,h=y/2,v=h*h+f*f*f;let x,m,b,w,A;if(v<0){const e=-d/3,t=S(e*e*e),n=-y/(2*t),o=_(n<-1?-1:n>1?1:n),i=2*P(t);return b=i*g(o/3)-l/3,w=i*g((o+B)/3)-l/3,A=i*g((o+2*B)/3)-l/3,[b,w,A].filter(r)}if(0===v)return x=h<0?P(-h):-P(h),b=2*x-l/3,w=-x-l/3,[b,w].filter(r);{const e=S(v);return x=P(-h+e),m=P(h+e),[x-m-l/3].filter(r)}},droots:function(e){if(3===e.length){const t=e[0],n=e[1],o=e[2],r=t-2*n+o;if(0!==r){const e=-S(n*n-t*o),i=-t+n;return[-(e+i)/r,-(-e+i)/r]}return n!==o&&0===r?[(2*n-o)/(2*(n-o))]:[]}if(2===e.length){const t=e[0],n=e[1];return t!==n?[t/(t-n)]:[]}return[]},curvature:function(e,t,n,o,r){let i,s,a,c,l=0,u=0;const p=T.compute(e,t),d=T.compute(e,n),f=p.x*p.x+p.y*p.y;if(o?(i=S(A(p.y*d.z-d.y*p.z,2)+A(p.z*d.x-d.z*p.x,2)+A(p.x*d.y-d.x*p.y,2)),s=A(f+p.z*p.z,1.5)):(i=p.x*d.y-p.y*d.x,s=A(f,1.5)),0===i||0===s)return{k:0,r:0};if(l=i/s,u=s/i,!r){const r=T.curvature(e-.001,t,n,o,!0).k,i=T.curvature(e+.001,t,n,o,!0).k;c=(i-l+(l-r))/2,a=(m(i-l)+m(l-r))/2}return{k:l,r:u,dk:c,adk:a}},inflections:function(e){if(e.length<4)return[];const t=T.align(e,{p1:e[0],p2:e.slice(-1)[0]}),n=t[2].x*t[1].y,o=t[3].x*t[1].y,r=t[1].x*t[2].y,i=18*(-3*n+2*o+3*r-t[3].x*t[2].y),s=18*(3*n-o-3*r),a=18*(r-n);if(T.approximately(i,0)){if(!T.approximately(s,0)){let e=-a/s;if(0<=e&&e<=1)return[e]}return[]}const c=s*s-4*i*a,l=Math.sqrt(c),u=2*i;return T.approximately(u,0)?[]:[(l-s)/u,-(s+l)/u].filter((function(e){return 0<=e&&e<=1}))},bboxoverlap:function(e,t){const n=["x","y"],o=n.length;for(let r,i,s,a,c=0;c<o;c++)if(r=n[c],i=e[r].mid,s=t[r].mid,a=(e[r].size+t[r].size)/2,m(i-s)>=a)return!1;return!0},expandbox:function(e,t){t.x.min<e.x.min&&(e.x.min=t.x.min),t.y.min<e.y.min&&(e.y.min=t.y.min),t.z&&t.z.min<e.z.min&&(e.z.min=t.z.min),t.x.max>e.x.max&&(e.x.max=t.x.max),t.y.max>e.y.max&&(e.y.max=t.y.max),t.z&&t.z.max>e.z.max&&(e.z.max=t.z.max),e.x.mid=(e.x.min+e.x.max)/2,e.y.mid=(e.y.min+e.y.max)/2,e.z&&(e.z.mid=(e.z.min+e.z.max)/2),e.x.size=e.x.max-e.x.min,e.y.size=e.y.max-e.y.min,e.z&&(e.z.size=e.z.max-e.z.min)},pairiteration:function(e,t,n){const o=e.bbox(),r=t.bbox(),i=1e5,s=n||.5;if(o.x.size+o.y.size<s&&r.x.size+r.y.size<s)return[(i*(e._t1+e._t2)/2|0)/i+"/"+(i*(t._t1+t._t2)/2|0)/i];let a=e.split(.5),c=t.split(.5),l=[{left:a.left,right:c.left},{left:a.left,right:c.right},{left:a.right,right:c.right},{left:a.right,right:c.left}];l=l.filter((function(e){return T.bboxoverlap(e.left.bbox(),e.right.bbox())}));let u=[];return 0===l.length||(l.forEach((function(e){u=u.concat(T.pairiteration(e.left,e.right,s))})),u=u.filter((function(e,t){return u.indexOf(e)===t}))),u},getccenter:function(e,t,n){const o=t.x-e.x,r=t.y-e.y,i=n.x-t.x,s=n.y-t.y,a=o*g(M)-r*b(M),c=o*b(M)+r*g(M),l=i*g(M)-s*b(M),u=i*b(M)+s*g(M),p=(e.x+t.x)/2,d=(e.y+t.y)/2,f=(t.x+n.x)/2,y=(t.y+n.y)/2,h=p+a,v=d+c,x=f+l,m=y+u,_=T.lli8(p,d,h,v,f,y,x,m),S=T.dist(_,e);let A,P=w(e.y-_.y,e.x-_.x),C=w(t.y-_.y,t.x-_.x),k=w(n.y-_.y,n.x-_.x);return P<k?((P>C||C>k)&&(P+=B),P>k&&(A=k,k=P,P=A)):k<C&&C<P?(A=k,k=P,P=A):k+=B,_.s=P,_.e=k,_.r=S,_},numberSort:function(e,t){return e-t}};class E{constructor(e){this.curves=[],this._3d=!1,e&&(this.curves=e,this._3d=this.curves[0]._3d)}valueOf(){return this.toString()}toString(){return"["+this.curves.map((function(e){return T.pointsToString(e.points)})).join(", ")+"]"}addCurve(e){this.curves.push(e),this._3d=this._3d||e._3d}length(){return this.curves.map((function(e){return e.length()})).reduce((function(e,t){return e+t}))}curve(e){return this.curves[e]}bbox(){const e=this.curves;for(var t=e[0].bbox(),n=1;n<e.length;n++)T.expandbox(t,e[n].bbox());return t}offset(e){const t=[];return this.curves.forEach((function(n){t.push(...n.offset(e))})),new E(t)}}const{abs:z,min:R,max:O,cos:F,sin:j,acos:L,sqrt:D}=Math,q=Math.PI;class W{constructor(e){let t=e&&e.forEach?e:Array.from(arguments).slice(),n=!1;if("object"==typeof t[0]){n=t.length;const e=[];t.forEach((function(t){["x","y","z"].forEach((function(n){void 0!==t[n]&&e.push(t[n])}))})),t=e}let o=!1;const r=t.length;if(n){if(n>4){if(1!==arguments.length)throw new Error("Only new Bezier(point[]) is accepted for 4th and higher order curves");o=!0}}else if(6!==r&&8!==r&&9!==r&&12!==r&&1!==arguments.length)throw new Error("Only new Bezier(point[]) is accepted for 4th and higher order curves");const i=this._3d=!o&&(9===r||12===r)||e&&e[0]&&void 0!==e[0].z,s=this.points=[];for(let e=0,n=i?3:2;e<r;e+=n){var a={x:t[e],y:t[e+1]};i&&(a.z=t[e+2]),s.push(a)}const c=this.order=s.length-1,l=this.dims=["x","y"];i&&l.push("z"),this.dimlen=l.length;const u=T.align(s,{p1:s[0],p2:s[c]}),p=T.dist(s[0],s[c]);this._linear=u.reduce(((e,t)=>e+z(t.y)),0)<p/50,this._lut=[],this._t1=0,this._t2=1,this.update()}static quadraticFromPoints(e,t,n,o){if(void 0===o&&(o=.5),0===o)return new W(t,t,n);if(1===o)return new W(e,t,t);const r=W.getABC(2,e,t,n,o);return new W(e,r.A,n)}static cubicFromPoints(e,t,n,o,r){void 0===o&&(o=.5);const i=W.getABC(3,e,t,n,o);void 0===r&&(r=T.dist(t,i.C));const s=r*(1-o)/o,a=T.dist(e,n),c=(n.x-e.x)/a,l=(n.y-e.y)/a,u=r*c,p=r*l,d=s*c,f=s*l,y=t.x-u,h=t.y-p,v=t.x+d,x=t.y+f,m=i.A,g=m.x+(y-m.x)/(1-o),b=m.y+(h-m.y)/(1-o),_=m.x+(v-m.x)/o,w=m.y+(x-m.y)/o,S={x:e.x+(g-e.x)/o,y:e.y+(b-e.y)/o},A={x:n.x+(_-n.x)/(1-o),y:n.y+(w-n.y)/(1-o)};return new W(e,S,A,n)}static getUtils(){return T}getUtils(){return W.getUtils()}static get PolyBezier(){return E}valueOf(){return this.toString()}toString(){return T.pointsToString(this.points)}toSVG(){if(this._3d)return!1;const e=this.points,t=["M",e[0].x,e[0].y,2===this.order?"Q":"C"];for(let n=1,o=e.length;n<o;n++)t.push(e[n].x),t.push(e[n].y);return t.join(" ")}setRatios(e){if(e.length!==this.points.length)throw new Error("incorrect number of ratio values");this.ratios=e,this._lut=[]}verify(){const e=this.coordDigest();e!==this._print&&(this._print=e,this.update())}coordDigest(){return this.points.map((function(e,t){return""+t+e.x+e.y+(e.z?e.z:0)})).join("")}update(){this._lut=[],this.dpoints=T.derive(this.points,this._3d),this.computedirection()}computedirection(){const e=this.points,t=T.angle(e[0],e[this.order],e[1]);this.clockwise=t>0}length(){return T.length(this.derivative.bind(this))}static getABC(e=2,t,n,o,r=.5){const i=T.projectionratio(r,e),s=1-i,a={x:i*t.x+s*o.x,y:i*t.y+s*o.y},c=T.abcratio(r,e);return{A:{x:n.x+(n.x-a.x)/c,y:n.y+(n.y-a.y)/c},B:n,C:a,S:t,E:o}}getABC(e,t){t=t||this.get(e);let n=this.points[0],o=this.points[this.order];return W.getABC(this.order,n,t,o,e)}getLUT(e){if(this.verify(),e=e||100,this._lut.length===e)return this._lut;this._lut=[],e++,this._lut=[];for(let t,n,o=0;o<e;o++)n=o/(e-1),t=this.compute(n),t.t=n,this._lut.push(t);return this._lut}on(e,n){n=n||5;const o=this.getLUT(),r=[];for(let t,i=0,s=0;i<o.length;i++)t=o[i],T.dist(t,e)<n&&(r.push(t),s+=i/o.length);return!!r.length&&(t/=r.length)}project(e){const t=this.getLUT(),n=t.length-1,o=T.closest(t,e),r=o.mpos,i=(r-1)/n,s=(r+1)/n,a=.1/n;let c,l,u=o.mdist,p=i,d=p;for(u+=1;p<s+a;p+=a)c=this.compute(p),l=T.dist(e,c),l<u&&(u=l,d=p);return d=d<0?0:d>1?1:d,c=this.compute(d),c.t=d,c.d=u,c}get(e){return this.compute(e)}point(e){return this.points[e]}compute(e){return this.ratios?T.computeWithRatios(e,this.points,this.ratios,this._3d):T.compute(e,this.points,this._3d,this.ratios)}raise(){const e=this.points,t=[e[0]],n=e.length;for(let o,r,i=1;i<n;i++)o=e[i],r=e[i-1],t[i]={x:(n-i)/n*o.x+i/n*r.x,y:(n-i)/n*o.y+i/n*r.y};return t[n]=e[n-1],new W(t)}derivative(e){return T.compute(e,this.dpoints[0],this._3d)}dderivative(e){return T.compute(e,this.dpoints[1],this._3d)}align(){let e=this.points;return new W(T.align(e,{p1:e[0],p2:e[e.length-1]}))}curvature(e){return T.curvature(e,this.dpoints[0],this.dpoints[1],this._3d)}inflections(){return T.inflections(this.points)}normal(e){return this._3d?this.__normal3(e):this.__normal2(e)}__normal2(e){const t=this.derivative(e),n=D(t.x*t.x+t.y*t.y);return{x:-t.y/n,y:t.x/n}}__normal3(e){const t=this.derivative(e),n=this.derivative(e+.01),o=D(t.x*t.x+t.y*t.y+t.z*t.z),r=D(n.x*n.x+n.y*n.y+n.z*n.z);t.x/=o,t.y/=o,t.z/=o,n.x/=r,n.y/=r,n.z/=r;const i={x:n.y*t.z-n.z*t.y,y:n.z*t.x-n.x*t.z,z:n.x*t.y-n.y*t.x},s=D(i.x*i.x+i.y*i.y+i.z*i.z);i.x/=s,i.y/=s,i.z/=s;const a=[i.x*i.x,i.x*i.y-i.z,i.x*i.z+i.y,i.x*i.y+i.z,i.y*i.y,i.y*i.z-i.x,i.x*i.z-i.y,i.y*i.z+i.x,i.z*i.z];return{x:a[0]*t.x+a[1]*t.y+a[2]*t.z,y:a[3]*t.x+a[4]*t.y+a[5]*t.z,z:a[6]*t.x+a[7]*t.y+a[8]*t.z}}hull(e){let t=this.points,n=[],o=[],r=0;for(o[r++]=t[0],o[r++]=t[1],o[r++]=t[2],3===this.order&&(o[r++]=t[3]);t.length>1;){n=[];for(let i,s=0,a=t.length-1;s<a;s++)i=T.lerp(e,t[s],t[s+1]),o[r++]=i,n.push(i);t=n}return o}split(e,t){if(0===e&&t)return this.split(t).left;if(1===t)return this.split(e).right;const n=this.hull(e),o={left:2===this.order?new W([n[0],n[3],n[5]]):new W([n[0],n[4],n[7],n[9]]),right:2===this.order?new W([n[5],n[4],n[2]]):new W([n[9],n[8],n[6],n[3]]),span:n};return o.left._t1=T.map(0,0,1,this._t1,this._t2),o.left._t2=T.map(e,0,1,this._t1,this._t2),o.right._t1=T.map(e,0,1,this._t1,this._t2),o.right._t2=T.map(1,0,1,this._t1,this._t2),t?(t=T.map(t,e,1,0,1),o.right.split(t).left):o}extrema(){const e={};let t=[];return this.dims.forEach(function(n){let o=function(e){return e[n]},r=this.dpoints[0].map(o);e[n]=T.droots(r),3===this.order&&(r=this.dpoints[1].map(o),e[n]=e[n].concat(T.droots(r))),e[n]=e[n].filter((function(e){return e>=0&&e<=1})),t=t.concat(e[n].sort(T.numberSort))}.bind(this)),e.values=t.sort(T.numberSort).filter((function(e,n){return t.indexOf(e)===n})),e}bbox(){const e=this.extrema(),t={};return this.dims.forEach(function(n){t[n]=T.getminmax(this,n,e[n])}.bind(this)),t}overlaps(e){const t=this.bbox(),n=e.bbox();return T.bboxoverlap(t,n)}offset(e,t){if(void 0!==t){const n=this.get(e),o=this.normal(e),r={c:n,n:o,x:n.x+o.x*t,y:n.y+o.y*t};return this._3d&&(r.z=n.z+o.z*t),r}if(this._linear){const t=this.normal(0),n=this.points.map((function(n){const o={x:n.x+e*t.x,y:n.y+e*t.y};return n.z&&t.z&&(o.z=n.z+e*t.z),o}));return[new W(n)]}return this.reduce().map((function(t){return t._linear?t.offset(e)[0]:t.scale(e)}))}simple(){if(3===this.order){const e=T.angle(this.points[0],this.points[3],this.points[1]),t=T.angle(this.points[0],this.points[3],this.points[2]);if(e>0&&t<0||e<0&&t>0)return!1}const e=this.normal(0),t=this.normal(1);let n=e.x*t.x+e.y*t.y;return this._3d&&(n+=e.z*t.z),z(L(n))<q/3}reduce(){let e,t,n=0,o=0,r=.01,i=[],s=[],a=this.extrema().values;for(-1===a.indexOf(0)&&(a=[0].concat(a)),-1===a.indexOf(1)&&a.push(1),n=a[0],e=1;e<a.length;e++)o=a[e],t=this.split(n,o),t._t1=n,t._t2=o,i.push(t),n=o;return i.forEach((function(e){for(n=0,o=0;o<=1;)for(o=n+r;o<=1.01;o+=r)if(t=e.split(n,o),!t.simple()){if(o-=r,z(n-o)<r)return[];t=e.split(n,o),t._t1=T.map(n,0,1,e._t1,e._t2),t._t2=T.map(o,0,1,e._t1,e._t2),s.push(t),n=o;break}n<1&&(t=e.split(n,1),t._t1=T.map(n,0,1,e._t1,e._t2),t._t2=e._t2,s.push(t))})),s}translate(e,t,n){n="number"==typeof n?n:t;const o=this.order;let r=this.points.map(((e,r)=>(1-r/o)*t+r/o*n));return new W(this.points.map(((t,n)=>({x:t.x+e.x*r[n],y:t.y+e.y*r[n]}))))}scale(e){const t=this.order;let n=!1;if("function"==typeof e&&(n=e),n&&2===t)return this.raise().scale(n);const o=this.clockwise,r=this.points;if(this._linear)return this.translate(this.normal(0),n?n(0):e,n?n(1):e);const i=n?n(0):e,s=n?n(1):e,a=[this.offset(0,10),this.offset(1,10)],c=[],l=T.lli4(a[0],a[0].c,a[1],a[1].c);if(!l)throw new Error("cannot scale this curve. Try reducing it first.");return[0,1].forEach((function(e){const n=c[e*t]=T.copy(r[e*t]);n.x+=(e?s:i)*a[e].n.x,n.y+=(e?s:i)*a[e].n.y})),n?([0,1].forEach((function(i){if(2!==t||!i){var s=r[i+1],a={x:s.x-l.x,y:s.y-l.y},u=n?n((i+1)/t):e;n&&!o&&(u=-u);var p=D(a.x*a.x+a.y*a.y);a.x/=p,a.y/=p,c[i+1]={x:s.x+u*a.x,y:s.y+u*a.y}}})),new W(c)):([0,1].forEach((e=>{if(2===t&&e)return;const n=c[e*t],o=this.derivative(e),i={x:n.x+o.x,y:n.y+o.y};c[e+1]=T.lli4(n,i,l,r[e+1])})),new W(c))}outline(e,t,n,o){if(t=void 0===t?e:t,this._linear){const r=this.normal(0),i=this.points[0],s=this.points[this.points.length-1];let a,c,l;void 0===n&&(n=e,o=t),a={x:i.x+r.x*e,y:i.y+r.y*e},l={x:s.x+r.x*n,y:s.y+r.y*n},c={x:(a.x+l.x)/2,y:(a.y+l.y)/2};const u=[a,c,l];a={x:i.x-r.x*t,y:i.y-r.y*t},l={x:s.x-r.x*o,y:s.y-r.y*o},c={x:(a.x+l.x)/2,y:(a.y+l.y)/2};const p=[l,c,a],d=T.makeline(p[2],u[0]),f=T.makeline(u[2],p[0]),y=[d,new W(u),f,new W(p)];return new E(y)}const r=this.reduce(),i=r.length,s=[];let a,c=[],l=0,u=this.length();const p=void 0!==n&&void 0!==o;function d(e,t,n,o,r){return function(i){const s=o/n,a=(o+r)/n,c=t-e;return T.map(i,0,1,e+s*c,e+a*c)}}r.forEach((function(r){const i=r.length();p?(s.push(r.scale(d(e,n,u,l,i))),c.push(r.scale(d(-t,-o,u,l,i)))):(s.push(r.scale(e)),c.push(r.scale(-t))),l+=i})),c=c.map((function(e){return a=e.points,a[3]?e.points=[a[3],a[2],a[1],a[0]]:e.points=[a[2],a[1],a[0]],e})).reverse();const f=s[0].points[0],y=s[i-1].points[s[i-1].points.length-1],h=c[i-1].points[c[i-1].points.length-1],v=c[0].points[0],x=T.makeline(h,f),m=T.makeline(y,v),g=[x].concat(s).concat([m]).concat(c);return new E(g)}outlineshapes(e,t,n){t=t||e;const o=this.outline(e,t).curves,r=[];for(let e=1,t=o.length;e<t/2;e++){const i=T.makeshape(o[e],o[t-e],n);i.startcap.virtual=e>1,i.endcap.virtual=e<t/2-1,r.push(i)}return r}intersects(e,t){return e?e.p1&&e.p2?this.lineIntersects(e):(e instanceof W&&(e=e.reduce()),this.curveintersects(this.reduce(),e,t)):this.selfintersects(t)}lineIntersects(e){const t=R(e.p1.x,e.p2.x),n=R(e.p1.y,e.p2.y),o=O(e.p1.x,e.p2.x),r=O(e.p1.y,e.p2.y);return T.roots(this.points,e).filter((e=>{var i=this.get(e);return T.between(i.x,t,o)&&T.between(i.y,n,r)}))}selfintersects(e){const t=this.reduce(),n=t.length-2,o=[];for(let r,i,s,a=0;a<n;a++)i=t.slice(a,a+1),s=t.slice(a+2),r=this.curveintersects(i,s,e),o.push(...r);return o}curveintersects(e,t,n){const o=[];e.forEach((function(e){t.forEach((function(t){e.overlaps(t)&&o.push({left:e,right:t})}))}));let r=[];return o.forEach((function(e){const t=T.pairiteration(e.left,e.right,n);t.length>0&&(r=r.concat(t))})),r}arcs(e){return e=e||.5,this._iterate(e,[])}_error(e,t,n,o){const r=(o-n)/4,i=this.get(n+r),s=this.get(o-r),a=T.dist(e,t),c=T.dist(e,i),l=T.dist(e,s);return z(c-a)+z(l-a)}_iterate(e,t){let n,o=0,r=1;do{n=0,r=1;let i,s,a,c,l,u=this.get(o),p=!1,d=!1,f=r,y=1;do{if(d=p,c=a,f=(o+r)/2,i=this.get(f),s=this.get(r),a=T.getccenter(u,i,s),a.interval={start:o,end:r},p=this._error(a,u,o,r)<=e,l=d&&!p,l||(y=r),p){if(r>=1){if(a.interval.end=y=1,c=a,r>1){let e={x:a.x+a.r*F(a.e),y:a.y+a.r*j(a.e)};a.e+=T.angle({x:a.x,y:a.y},e,this.get(1))}break}r+=(r-o)/2}else r=f}while(!l&&n++<100);if(n>=100)break;c=c||a,t.push(c),o=y}while(r<1);return t}}var H,U=function(t){switch(t.code){case"M":return e.Vector.create(t.x,t.y);case"T":throw new Error("T not supported");case"Z":case"L":return G(t);case"C":case"Q":case"S":return N(t)}},N=function(t){var n=X(t),o=new W(n).get(.5);return e.Vector.create(o.x,o.y)},G=function(t){return n=e.Vector.create(t.x,t.y),o=e.Vector.create(t.x0,t.y0),e.Vector.create((n.x+o.x)/2,(n.y+o.y)/2);var n,o},Z=function(e){return a(e.x,e.y,e.x0,e.y0)},Q=function(t){return n(e.Vector.create(t.x,t.y),e.Vector.create(t.x0,t.y0))},X=function(t){switch(t.code){case"C":return[e.Vector.create(t.x0,t.y0),e.Vector.create(t.x1,t.y1),e.Vector.create(t.x2,t.y2),e.Vector.create(t.x,t.y)];case"Q":return[e.Vector.create(t.x0,t.y0),e.Vector.create(t.x1,t.y1),e.Vector.create(t.x,t.y)];case"S":return[e.Vector.create(t.x0,t.y0),e.Vector.create(t.x2,t.y2),e.Vector.create(t.x,t.y)];case"T":throw new Error("T not defined")}},Y=function(){function t(){}return t.prototype.intersects=function(t,n){var o=e.Vector.create(t.x0,t.y0),r=e.Vector.create(t.x,t.y),i=e.Vector.create(n.x0,n.y0),a=e.Vector.create(n.x,n.y);return!!(s(o,i)||s(o,a)||s(r,i)||s(r,a))||0!==new W(X(t)).intersects({p1:i,p2:a}).length},t.prototype.supportedCommandTypes=function(){return[["C","S","Q"],["L","Z"]]},t}(),J=function(){function t(){}return t.prototype.intersects=function(t,n){var o=e.Vector.create(t.x0,t.y0),r=e.Vector.create(t.x,t.y),i=e.Vector.create(n.x0,n.y0),a=e.Vector.create(n.x,n.y);if(s(o,i)||s(o,a)||s(r,i)||s(r,a))return!0;var c=new W(X(t)),l=new W(X(n));return 0!==c.curveintersects([c],[l]).length},t.prototype.supportedCommandTypes=function(){return[["C","S","Q"],["C","S","Q"]]},t}(),$=function(){function t(){}return t.prototype.intersects=function(t,n){var o=e.Vector.create(t.x0,t.y0),r=e.Vector.create(t.x,t.y),i=e.Vector.create(n.x,n.y);return s(o,i)||s(r,i)},t.prototype.supportedCommandTypes=function(){return[["C","S","Q"],["M"]]},t}(),K=function(){function t(){}return t.prototype.intersects=function(t,n){var o=e.Vector.create(t.x,t.y),r=e.Vector.create(n.x,n.y);return s(o,r)},t.prototype.supportedCommandTypes=function(){return[["M"],["M"]]},t}(),ee=function(){function e(){this._intersectorRegistry=[new c,new x,new Y,new J,new $,new K]}return e.prototype.aggregate=function(e){var t=this,n=e.flatMap((function(e){return e})),o=new v((function(e,n){return t.intersect(e,n,t._intersectorRegistry)}));return n.forEach((function(e){o.addValue(e)})),o.getAggregatedCommands()},e.prototype.intersect=function(e,t,n){var o=n.find((function(n){var o=n.supportedCommandTypes();return o[0].includes(e.code)&&o[1].includes(t.code)||o[1].includes(e.code)&&o[0].includes(t.code)}));if(void 0===o)throw new Error("intersector not defined for types ".concat(e.code," ").concat(t.code));return o.supportedCommandTypes()[0].includes(e.code)?o.intersects(e,t):o.intersects(t,e)},e}(),te=function(){function e(){}return e.prototype.aggregate=function(e){return e},e}(),ne=function(){function t(t,n){this._lineCmd=t;var o=G(t),r=Q(t),i=Z(t);e.Vector.create(t.x,t.y),e.Vector.create(t.x0,t.y0),this._point=e.Bodies.circle(t.x,t.y,1,{isSensor:!0}),e.Body.setDensity(this._point,0),this._body=e.Bodies.rectangle(o.x,o.y,r,n,{angle:i}),this._bodies=[this._point,this._body]}return Object.defineProperty(t.prototype,"bodies",{get:function(){return this._bodies},enumerable:!1,configurable:!0}),t.prototype.updateSvgCommand=function(){this._lineCmd.x=this._point.position.x,this._lineCmd.y=this._point.position.y},t}(),oe=function(){function t(t){this._moveCmd=t,this._point=e.Bodies.circle(t.x,t.y,1,{render:{fillStyle:"white"},isSensor:!0}),e.Body.setDensity(this._point,0),this._bodies=[this._point]}return Object.defineProperty(t.prototype,"bodies",{get:function(){return this._bodies},enumerable:!1,configurable:!0}),t.prototype.updateSvgCommand=function(){this._moveCmd.x=this._point.position.x,this._moveCmd.y=this._point.position.y},t}(),re=function(){function t(){}return t.prototype.createPoints=function(e,t){var n=1/t;return Array.from(Array(t+1).keys()).map((function(t){return e.get(t*n)}))},t.prototype.createInnerBodies=function(t,o){var r=X(o),i=this.createPoints(new W(r),3);return i.filter((function(e,t){return t<i.length-1})).map((function(o,r){var s=e.Vector.create(o.x,o.y),c=e.Vector.create(i[r+1].x,i[r+1].y),l=(e.Vector.normalise(e.Vector.sub(c,s)),e.Vector.create((s.x+c.x)/2,(s.y+c.y)/2)),u=n(c,s);return e.Bodies.rectangle(l.x,l.y,u,t,{angle:a(c.x,c.y,s.x,s.y)})}))},t}(),ie=(H=function(e,t){return H=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},H(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}H(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),se=function(t){function n(n,o){var r=t.call(this)||this;return r._curve=n,r._bodies=r.createInnerBodies(o,n),r._point1=e.Bodies.circle(n.x,n.y,1,{isSensor:!0,render:{fillStyle:"lightblue"}}),e.Body.setDensity(r._point1,0),r._bodies.push(r._point1),r._point2=e.Bodies.circle(n.x1,n.y1,1,{isSensor:!0,render:{fillStyle:"lightblue"}}),e.Body.setDensity(r._point2,0),r._bodies.push(r._point2),r._point3=e.Bodies.circle(n.x2,n.y2,1,{isSensor:!0,render:{fillStyle:"lightblue"}}),e.Body.setDensity(r._point3,0),r._bodies.push(r._point3),r}return ie(n,t),Object.defineProperty(n.prototype,"bodies",{get:function(){return this._bodies},enumerable:!1,configurable:!0}),n.prototype.updateSvgCommand=function(){this._curve.x=this._point1.position.x,this._curve.y=this._point1.position.y,this._curve.x1=this._point2.position.x,this._curve.y1=this._point2.position.y,this._curve.x2=this._point3.position.x,this._curve.y2=this._point3.position.y},n}(re),ae=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),ce=function(t){function n(n,o){var r=t.call(this)||this;return r._curve=n,r._bodies=r.createInnerBodies(o,n),r._point1=e.Bodies.circle(n.x,n.y,1,{isSensor:!0,render:{fillStyle:"lightblue"}}),e.Body.setDensity(r._point1,0),r._bodies.push(r._point1),r._point3=e.Bodies.circle(n.x2,n.y2,1,{isSensor:!0,render:{fillStyle:"lightblue"}}),e.Body.setDensity(r._point3,0),r._bodies.push(r._point3),r}return ae(n,t),Object.defineProperty(n.prototype,"bodies",{get:function(){return this._bodies},enumerable:!1,configurable:!0}),n.prototype.updateSvgCommand=function(){this._curve.x=this._point1.position.x,this._curve.y=this._point1.position.y,this._curve.x2=this._point3.position.x,this._curve.y2=this._point3.position.y},n}(re),le=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),ue=function(t){function n(n,o){var r=t.call(this)||this;return r._curve=n,r._bodies=r.createInnerBodies(o,n),r._point1=e.Bodies.circle(n.x,n.y,1,{isSensor:!0,render:{fillStyle:"lightblue"}}),e.Body.setDensity(r._point1,0),r._bodies.push(r._point1),r._point2=e.Bodies.circle(n.x1,n.y1,1,{isSensor:!0,render:{fillStyle:"lightblue"}}),e.Body.setDensity(r._point2,0),r._bodies.push(r._point2),r}return le(n,t),Object.defineProperty(n.prototype,"bodies",{get:function(){return this._bodies},enumerable:!1,configurable:!0}),n.prototype.updateSvgCommand=function(){this._curve.x=this._point1.position.x,this._curve.y=this._point1.position.y,this._curve.x1=this._point2.position.x,this._curve.y1=this._point2.position.y},n}(re),pe=function(){function t(t){this._closeCmd=t;var n=e.Vector.create(t.x,t.y),o=e.Vector.create(t.x0,t.y0);if(s(n,o))this._bodies=[];else{var r=G(t),i=Q(t),a=Z(t),c=e.Bodies.rectangle(r.x,r.y,i,5,{angle:a});this._bodies=[c]}}return Object.defineProperty(t.prototype,"bodies",{get:function(){return this._bodies},enumerable:!1,configurable:!0}),t.prototype.updateSvgCommand=function(){},t}(),de=e.Engine,fe=(e.Runner,e.Bodies),ye=function(){function t(t,n,o){var r=this;this._svgData=t,this._engine=de.create(),this._world=this._engine.world,this._commandBodies=[],this._plugins=o;var i=[];t.aggregatedCommands.forEach((function(t){var o=t.map((function(e){return U(e).x})).reduce((function(e,t){return e+t}))/t.length,s=t.map((function(e){return U(e).y})).reduce((function(e,t){return e+t}))/t.length,a=fe.circle(o,s,3e3,n),c=t.map((function(e){return function(e,t){switch(e.code){case"L":return new ne(e,t);case"M":return new oe(e);case"C":return new se(e,t);case"Q":return new ue(e,t);case"S":return new ce(e,t);case"T":throw new Error("T not supported yet!");case"Z":return new pe(e)}}(e,n.colliderWidth)}));r._commandBodies=r._commandBodies.concat(c);var l=c.map((function(e){return e.bodies})).flatMap((function(e){return e}));e.Body.setParts(a,l,!1),e.World.add(r._world,a),i.push(a)})),o.forEach((function(e){return e.setup(t,r._engine,i)}))}return t.prototype.update=function(e){de.update(this._engine),this._commandBodies.forEach((function(e){return e.updateSvgCommand()}))},t.prototype.stop=function(){this._plugins.forEach((function(e){return e.stop()}))},t}(),he=function(){function e(e,t,n){this._svg=e,this._strokeWidth=15,this._width=e.clientWidth,this._height=e.clientHeight,this._pathCommands=t,this._aggregatedCommands=n;var o=e.getAttribute("viewBox");if(null!==o){var r=o.split(/[ ,]/).filter(Boolean).map(Number);this._viewBox={minx:r[0],miny:r[1],width:r[2],height:r[3]}}}return Object.defineProperty(e.prototype,"pathCommands",{get:function(){return this._pathCommands},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"aggregatedCommands",{get:function(){return this._aggregatedCommands},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"svg",{get:function(){return this._svg},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"width",{get:function(){return this._width},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this._height},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"viewBox",{get:function(){return this._viewBox},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"relativeStrokeWidth",{get:function(){return this._strokeWidth},enumerable:!1,configurable:!0}),e}(),ve=function(e,t,n,o){this.code="L",this.relative=!1,this.command="lineto",this.x=e,this.y=t,this.x0=n,this.y0=o},xe=o(956),me=function(){function e(e){this._gravity=e}return e.prototype.setup=function(e,t,n){t.gravity.x=this._gravity.x,t.gravity.y=this._gravity.y},e.prototype.stop=function(){},e}(),ge=function(){function t(){}return t.prototype.setup=function(t,n,o){var r=n.world,i=t.width,s=t.height,a=0,c=0,l=100;if(void 0!==t.viewBox){var u=t.viewBox.width,p=t.viewBox.height,d=u<p?p/u:u/p,f=i<s?s/i:i/s;i<s?u<p?(s=p*(1/f)*d,i=u):(s=p*f*d,i=u):u<p?(i=u*f*d,s=p):(i=u*(1/f)*d,s=p),a=t.viewBox.minx-(i-u)/2,c=t.viewBox.miny-(s-p)/2}var y=e.Bodies.rectangle(i/2+a,s+50+c,i,l,{isStatic:!0});e.World.add(r,y);var h=e.Bodies.rectangle(i/2+a,-50+c,i,l,{isStatic:!0});e.World.add(r,h);var v=e.Bodies.rectangle(-50+a,s/2+c,l,s,{isStatic:!0});e.World.add(r,v);var x=e.Bodies.rectangle(i+50+a,s/2+c,l,s,{isStatic:!0});e.World.add(r,x)},t.prototype.stop=function(){},t}(),be=function(){function t(e){this._mouseForce=e}return t.prototype.setup=function(t,n,o){var r=this,i=n.world;t.svg.addEventListener("mousemove",(function(t){r._mousePos=e.Vector.create(t.offsetX,t.offsetY)})),e.Events.on(n,"afterUpdate",(function(){void 0!==r._previousMousePos&&void 0!==r._mousePos&&e.Query.point(e.Composite.allBodies(i),r._mousePos).forEach((function(t){var n=e.Vector.normalise(e.Vector.sub(r._mousePos,r._previousMousePos));e.Body.applyForce(t,r._mousePos,e.Vector.mult(n,r._mouseForce))})),r._previousMousePos=r._mousePos}))},t.prototype.stop=function(){},t}(),_e=function(){function t(e){this._elementToAddCanvas=e}return t.prototype.setup=function(t,n,o){var r=document.body;null!=t.svg.parentElement&&(r=t.svg.parentElement),void 0!==this._elementToAddCanvas&&(r=this._elementToAddCanvas),this._renderer=e.Render.create({element:r,engine:n,options:{wireframes:!0,width:t.width,height:t.height,showAngleIndicator:!1}}),e.Render.run(this._renderer)},t.prototype.stop=function(){void 0!==this._renderer&&(e.Render.stop(this._renderer),this._renderer.canvas.remove())},t}(),we=function(e){switch(e.code){case"M":var t=e;return"M ".concat(t.x.toFixed(2)," ").concat(t.y.toFixed(2));case"L":var n=e;return"L ".concat(n.x.toFixed(2)," ").concat(n.y.toFixed(2));case"Z":return"Z";case"C":return"C ".concat((o=e).x1.toFixed(2)," ").concat(o.y1.toFixed(2)," ").concat(o.x2.toFixed(2)," ").concat(o.y2.toFixed(2),"  ").concat(o.x.toFixed(2)," ").concat(o.y.toFixed(2));case"S":return"S ".concat((o=e).x2.toFixed(2)," ").concat(o.y2.toFixed(2),"  ").concat(o.x.toFixed(2)," ").concat(o.y.toFixed(2));case"Q":var o;return"Q ".concat((o=e).x1.toFixed(2)," ").concat(o.y1.toFixed(2)," ").concat(o.x.toFixed(2)," ").concat(o.y.toFixed(2));default:throw new Error("no serializer found for ".concat(e.code))}},Se=function(){function e(){this._stopped=!1}return e.prototype.renderLoop=function(e,t){var n=Array.prototype.slice.call(e.svg.getElementsByTagName("path"));this.updateFrame(e,t,n)},e.prototype.updateFrame=function(e,t,n){var o=this;t.update(e.aggregatedCommands),e.pathCommands.forEach((function(e,t){var o=e.map(we).join(" ");n[t].setAttribute("d",o)})),this._stopped||window.requestAnimationFrame((function(r){return o.updateFrame(e,t,n)}))},e.prototype.stop=function(){this._stopped=!0},e}(),Ae=function(){function t(e){this._force=e}return t.prototype.setup=function(t,n,o){var r=this,i=n.world;this._listener=function(t){return r._scrollPos=e.Vector.create(window.scrollX,window.scrollY)},window.addEventListener("scroll",this._listener),e.Events.on(n,"afterUpdate",(function(){void 0!==r._scrollPos&&void 0!==r._previousScrollPos&&e.Composite.allBodies(i).forEach((function(t){var n=e.Vector.normalise(e.Vector.sub(r._scrollPos,r._previousScrollPos));e.Body.applyForce(t,t.position,e.Vector.mult(n,r._force))})),r._previousScrollPos=r._scrollPos}))},t.prototype.stop=function(){window.removeEventListener("scroll",this._listener)},t}(),Pe=function(){function t(e){this._maxSpeed=e}return t.prototype.setup=function(t,n,o){var r=this;e.Events.on(n,"beforeUpdate",(function(){o.forEach((function(t){t.velocity.x>r._maxSpeed&&e.Body.setVelocity(t,{x:r._maxSpeed,y:t.velocity.y}),t.velocity.x<-r._maxSpeed&&e.Body.setVelocity(t,{x:-r._maxSpeed,y:t.velocity.y}),t.velocity.y>r._maxSpeed&&e.Body.setVelocity(t,{x:t.velocity.x,y:r._maxSpeed}),t.velocity.y<-r._maxSpeed&&e.Body.setVelocity(t,{x:-t.velocity.x,y:-r._maxSpeed})}))}))},t.prototype.stop=function(){},t}(),Ce=function(){function t(e){this._maxSpeed=e}return t.prototype.setup=function(t,n,o){var r=this;e.Events.on(n,"beforeUpdate",(function(){o.forEach((function(t){t.angularVelocity>r._maxSpeed&&e.Body.setAngularVelocity(t,r._maxSpeed),t.angularVelocity<-r._maxSpeed&&e.Body.setAngularVelocity(t,-r._maxSpeed)}))}))},t.prototype.stop=function(){},t}(),Be=function(){function e(e,t){this._physics=e,this._renderer=t}return e.prototype.stop=function(){this._renderer.stop(),this._physics.stop()},e}(),Me=function(){function e(e,t){this._aggregator=e,this._svg=t,this._plugins=[]}return e.prototype.withGravity=function(e){return this._plugins.push(new me(e)),this},e.prototype.withBorderCollider=function(){return this._plugins.push(new ge),this},e.prototype.withMouseInteraction=function(e){return this._plugins.push(new be(e)),this},e.prototype.withScrollInteraction=function(e){return this._plugins.push(new Ae(e)),this},e.prototype.withDebugRenderer=function(e){return this._plugins.push(new _e(e)),this},e.prototype.withCustomPlugin=function(e){return this._plugins.push(e),this},e.prototype.withLimitVelocityPlugin=function(e){return this._plugins.push(new Pe(e)),this},e.prototype.withLimitAngularVelocityPlugin=function(e){return this._plugins.push(new Ce(e)),this},e.prototype.startSimulation=function(e){var t=this.createSvgData(),n=new ye(t,e,this._plugins),o=new Se;return o.renderLoop(t,n),new Be(n,o)},e.prototype.createSvgData=function(){var e=Array.prototype.slice.call(this._svg.getElementsByTagName("path")).map((function(e){return e.getAttribute("d")})).map((function(e){return(0,xe.makeAbsolute)((0,xe.parseSVG)(e)).filter((function(e){return"Z"!==e.code||0!==Q(e)})).map((function(e){switch(e.code){case"H":case"V":return new ve(e.x,e.y,e.x0,e.y0);case"A":throw new Error("A not supported yet");default:return e}}))})),t=this._aggregator.aggregate(e);return new he(this._svg,e,t)},e}(),ke=function(){function e(e){this._svg=e}return e.prototype.useCollisionAggregator=function(){return new Me(new ee,this._svg)},e.prototype.usePathAggregator=function(){return new Me(new te,this._svg)},e.prototype.useCustomAggregator=function(e){return new Me(e,this._svg)},e}(),Ie=function(e){return new ke(e)}})(),r})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,